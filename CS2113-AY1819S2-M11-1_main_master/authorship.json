[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d LeagueTracker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:imagesDir: docs/images]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "image:https://travis-ci.org/CS2113-AY1819S2-M11-1/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/CS2113-AY1819S2-M11-1/main\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* This is a CLI (Command Line Interface) League Tracker application *written in OOP fashion*. It has a very basic GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* It is a Java application intended for League Operators to manage teams, players, matches records."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "*Useful Links*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "This application is morphed from AddressBook-Level3 project created by SE-EDU initiative https://github.com/se-edu/[here]."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Some parts of this sample application was inspired by the excellent"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by Marco Jakob"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contact Us"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S2-M11-1/main/issues[issue tracker]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "E0176106": 12,
      "-": 16
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "mainClassName \u003d \u0027seedu.addressbook.Main\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027test/java\u0027]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    checkstyleTest.enabled \u003d false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "test {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    archiveName \u003d \u0027AB.jar\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        })"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u0027site-name\u0027: \u0027LeagueTracker\u0027,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2113-ay1819s2-m11-1/main\u0027,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0176106"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027asciidoctor\u0027, \u0027checkstyleMain\u0027, \u0027checkstyleTest\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 95,
      "E0176106": 77
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cproperty name\u003d\"file\" value\u003d\"config/checkstyle/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Required for SuppressionCommentFilter to work --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"FileContentsHolder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    IMPORT CHECKS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      1. STATIC: static imports"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    An import statement is redundant if:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    An import statement is unused if:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    NAMING CHECKS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0176106"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0176106"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        else"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!--"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      else if {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      if (true)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return 1; // Not allowed"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"UpperEll\" /\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0176106"
        },
        "content": "       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    ORDER CHECKS"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "E0176106"
        },
        "content": "         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      3. Constructors"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      4. Methods"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           synchronized, native, strictfp"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    WHITESPACE CHECKS"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           by regular or curly braces."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "E0176106"
        },
        "content": "             e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "E0176106"
        },
        "content": "             e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "E0176106"
        },
        "content": "         a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "E0176106"
        },
        "content": "         a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    JAVADOC CHECKS"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks public methods that have more than 1 line of code."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        Single line of code methods are often due to refactor for readability."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that every non-trivial private method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks private methods that have more than 3 lines of code."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        We define methods that have more than 3 lines of code as non-trivial."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"private\"/\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "E0176106": 423
    }
  },
  {
    "path": "config/checkstyle/suppressions.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c?xml version\u003d\"1.0\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c!DOCTYPE suppressions PUBLIC"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\"-//Puppy Crawl//DTD Suppressions 1.1//EN\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\"http://checkstyle.sourceforge.net/dtds/suppressions_1_1.dtd\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003csuppressions\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003csuppress checks\u003d\"JavadocType\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c/suppressions\u003e"
      }
    ],
    "authorContributionMap": {
      "E0176106": 9
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The LeagueTracker provides football league operator with an efficient method of managing the players, teams and matches in the season. It features many ways to keep track of the teams and players playing in the league. The LeagueTracker will help manager have an easier time in keeping track of the current situation in the football league. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Lee Chong Wei Justin"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::e0176106.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty}[http://github.com/E0176106[github]] [\u003c\u003cE0176106#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Role: Integration, Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Responsibilities: Match Schedule Feature"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Hu Yidi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::huyidi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty}[https://github.com/huyidi[github]] [\u003c\u003chuyidi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Role: Documentation, Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Responsibilities: League Feature"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Wang Jiannan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::warheade.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty}[http://github.com/warheade[github]] [\u003c\u003cwarheade#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Role: Team Lead, Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Responsibilities: Player Feature"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Lee Ying Rong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::yingrong1996.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty}[http://github.com/yingrong1996[github]] [\u003c\u003cyingrong1996#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Role: Testing, Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Responsibilities: Team Feature"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huyidi": 46,
      "E0176106": 5
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S2-M11-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "huyidi": 5,
      "E0176106": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d League Tracker - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "By: `CS2113-AY1819S2-M11-1`      Since: ``      Licence: ``"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The LeagueTracker provides football league operator with an efficient method of managing the current teams that are playing in the season. It features many ways to keep track of the teams and players playing in the league. The LeagueTracker will help manager have an easier time in keeping track of the curretn situation in the football league."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Run the `seedu.addressbook.Main` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Football League Operators +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Has a need to manage leagues, team and player profiles +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Has a need to collect and view specific data regarding the league, matches, teams and players information in the league  +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Prefer typing over mouse input +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Prefer desktop apps over other type +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "* Reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0176106"
        },
        "content": "*Value proposition*: "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Manage league/team/player faster than a typical mouse/GUI driven app. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Easy access to records needed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|`* * *` |League Organiser |add, edit and delete players into the records | Add new player when they join,delete old player when they retire"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|`* * *` |League Organiser |add, edit and delete teams into current league| Add new team that move up major league"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|`* * *` |League Organiser |list all teams and player. | See all current teams and player"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|`* * *` |League Organiser |Able to see the performance of players in the league | Know player\u0027s goals scored and Penalties."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|`* * *` |League Organiser |Able to see the teams ranking in league | Know which team is currently leading in points"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|`* * *` |League Organiser |Able to keep track on the future match up for the playing teams| see the match scheduling"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|`* *` |League Organiser | Able to see the statistic of each team | know the percentage of winnings, average of fouls per matches of each team"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|`* *` |League Organiser |Able to tag injuries of players | know what old injuries player have"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|`*` |League Organiser |Able to constantly keep track of best player | able to find out the golden leg(best scorer) of the season"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|`*` |League Organiser | Select certain player to moniter performance | keep track of \u0027HOT\u0027 Players"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Quality requirement: The system should be efficient enough for organiser to quickly updat and keep track of the teams playing in the league."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Performance requirements: The system should be able to present the information in an orgainised format as the data could be confusing."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Project scope: The product is developed solely for the use of league organiser."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "warheade"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "warheade"
        },
        "content": "(For all use cases below, the System is the League Tracker and the Actor is the user, unless specified otherwise)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use Case: Add Player"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "warheade"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User requests to add a specific player in the League"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User specify the following detail:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "warheade"
        },
        "content": "  Name, Position Played, Age, Gender, Goals Scored, Goals Assisted, Team, Country,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "warheade"
        },
        "content": "Jersey Number, Appearance,HealthStatus"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System adds the person."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If successful, a message will be shown and a new player is added"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If not successful, a message specifying reason for failure will be shown and command list"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "warheade"
        },
        "content": "  will be printed"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "warheade"
        },
        "content": "+"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use Case: Delete Player"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "warheade"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) User requests to list all players in the league"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) System shows a list of players"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User requests to delete a specific player in the list"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User specify the following detail:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "warheade"
        },
        "content": "  Name, Team,Jersey Number"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System adds the person."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If successful, a message will be shown and the player is deleted"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If not successful, a message specifying reason for failure will be shown and command list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "warheade"
        },
        "content": "  will be printed"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "warheade"
        },
        "content": "+"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use Case: Transfer Player"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "warheade"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) User requests to list all players in the league"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) System shows a list of players"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User requests to transfer a specific player in the list"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User specify the following detail:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "warheade"
        },
        "content": "  Name,Team,Jersey Number,Original Team,Destination Team"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System transfers the player."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If successful, a message will be shown and the player\u0027s details as well as details for teams will"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "warheade"
        },
        "content": "  be updated."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If not successful, a message specifying reason for failure will be shown and command list"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "warheade"
        },
        "content": "  will be printed"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "warheade"
        },
        "content": "+"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use Case: Edit Player"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "warheade"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) User requests to list all players in the league"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) System shows a list of players"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User requests to edit a specific player in the list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User first specifies the name, team and Jersey Number of the player"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System returns a message of whether the player exists"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If the player exists, a \"Please enter new details\" Message will be shown by system to ask for"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "warheade"
        },
        "content": "  input. Otherwise, a PlayerNotFound exception Message will be printed followed by the list of commands"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "warheade"
        },
        "content": ". Assume the player exists, user then specifies the following detail to be reflected in the new profile:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "warheade"
        },
        "content": "  Name,Team,Jersey Number,Original Team,Destination Team"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System updates the player."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If successful, a message will be shown and the player\u0027s details will"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "warheade"
        },
        "content": "  be updated."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If not successful, a message specifying reason for failure will be shown and command list"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "warheade"
        },
        "content": "  will be printed"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "warheade"
        },
        "content": "+"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "warheade"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003dGlossary"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "warheade"
        },
        "content": "League: a group of football teams which play each other over a period for a championship."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "warheade"
        },
        "content": "Transfer: the action taken whenever a player under contract moves between clubs. It refers to the transferring of a player\u0027s registration from one association football club to another."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::transfer.png[]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huyidi"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huyidi"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huyidi"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huyidi"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huyidi"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huyidi"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huyidi"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "huyidi"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huyidi"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "huyidi"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "huyidi"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huyidi"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "huyidi"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "huyidi"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "huyidi"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "huyidi": 56,
      "warheade": 89,
      "yingrong1996": 122,
      "-": 42,
      "E0176106": 10
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all persons who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Person` class implements the `ReadOnlyPerson` interface so that clients who don\u0027t need write access to `Person` objects can access `Person` objects through the `ReadOnlyPerson` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyPersonUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The above method can be used to get a printable string representing a bunch of person details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `Formattter` class (an application of the Single Responsibility Principle) improves the _cohesion_ of the `MainWindow` class as well as the `Formatter` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Invert dependency from Logic to Storage"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how `Logic` class depends on the `StorageFile` class. This is a violation of DIP."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Modify the implementation as follows so that both `Logic` and `StorageFile` now depend on the"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "`abstract` class `Storage`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStroageFileDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Logic` class depends on the `StorageFile` class. This means when testing the `Logic` class,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "our test cases execute the `StorageFile` class as well. What if we want to test the `Logic` class without"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "getting the `StorageFile` class involved? That is a situation where we can use _Dependency Injection_."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Change the implementation as follows so that we can inject a `StorageStub` when testing the `Logic`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "class."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "If you did the exercise in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "already but those changes are in a different branch, you may be able to reuse some of those commits"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "by cherry picking them from that branch to the branch you created for this exercise."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Note: _cherry picking_ is simply copy-pasting a commit from one branch to another. In SourceTree, you can"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "right-click on the commit your want to copy to the current branch, and choose \u0027Cherry pick\u0027."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement the `StorageStub` such that calls to the `save` method do nothing (i.e. empty method body). +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Update the `LogicTest` to work with the `StorageStub` instead of the actual `StorageFile` object."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `Logic` injects a `StorageStub` object to replace the dependency of `Logic` on `StorageFile` before"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "testing `Logic`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `Logic` class"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `Logic` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `Logic` follows the OCP i.e. `Logic` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `Parser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, does `Logic` become more OCP-compliant"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "after applying DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve `Logic`\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "-": 232,
      "E0176106": 1
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d League Tracker - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "This product is not meant for end-users and therefore there is no user-friendly installer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Please refer to the \u003c\u003cDeveloperGuide#setting-up, Setting up\u003e\u003e section to learn how to set up the project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "By : `CS2113-AY1819S2-M11-1`\tSince: `` Licence:``"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The LeagueTracker provides soccer league opreator with an efficient method of managing the current teams that are playing in the season. It features many ways to keep track of the teams and players playing in the league. The LeagueTracker will help manager have an easier time in keeping track of the curretn situation in the soccer league."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": ".  Download the latest `LeagueTracker.jar` \\\\coming soon"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your League Tracker System."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": ".  Double-click the file to start the application. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". The GUI should appear in a few seconds"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Help is also shown if you enter an incorrect command e.g. `abcd`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Players"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d List Player"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "List current Players in a team. +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Format ：`ListPlayer NameOfTeam`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`ListPlayer Liverpool`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d List All Players"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "List current Players in the whole league. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Format ：`ListAllPlayer`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Add Player"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new player to League Tracker. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Format ：`AddPlayer NAME POSITION AGE GENDER PENALTY GOALSSCORED GOALSASSISTED TEAM RANKINLEAGUE COUNTRY JERSEYNUMBER APPEARANCE HEALTHSTATUS`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "`AddPlayer Lionel_Messi RW 31 Male 0 20 20 FC_Barcelona 1 Argentina 10 20 Healthy`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Player"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Delete an existing player in League Tracker. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Format ：`DeletePlayer NAME TEAM`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "`DeletePlayer Lionel_Messi FC_Barcelona`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Player"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Edit an existing player in League Tracker. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Format ：`EditPlayer OLDNAME OLDTEAM POSITION AGE GENDER PENALTY GOALSSCORED GOALSASSISTED TEAM RANKINLEAGUE COUNTRY JERSEYNUMBER APPEARANCE HEALTHSTATUS`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "`EditPlayer Lionel_Messi Real_Madrid RW 31 Male 0 20 20 FC_Barcelona 1 Argentina 10 20 Healthy`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Display Player Profile"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Display the whole profile of the player. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Format ：`DisplayProfile NAME TEAM`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "`DisplayProfile Lionel_Messi FC_Barcelona`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Teams"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d List Team"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "List current Teams in League. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format :`ListTeam`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d Add Team"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Add a new Team to League Tracker. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `AddTeam NAME c/COUNTRY g/GOAL SCORED p/POINTS  `"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": " `AddTeam Liverpool c/United Kingdom g/64 p/70 +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": " Adds a new Team with the specified details."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Team"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Edit a Team in League Tracker. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `EditTeam INDEX [c/COUNTRY] [g/GOAL SCORED] [p/POINTS]  `"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `ListTeam` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `EditTeam 1 c/Singapore` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Edits the country of the 1st team in the Team list to Singapore."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Team"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Delete a Team from League Tracker. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `DelTeam INDEX  `"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `ListTeam` +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `DelTeam 1` +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Deletes the 1st Team in the Team list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Finance"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d\u003d Give Team Finance"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Give the financial condition in USD of a Team selected in League Tracker. +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Format : `finance INDEX`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* `ListTeam` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* `finance 1` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Finance of the team selected: 5487.0."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Match Schedule"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d List Matches"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0176106"
        },
        "content": "List Matches in League. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format :`ListMatches`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d Add Matches"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Add a new Match to League Tracker. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `AddMatch dd/mm/yyyy h/hometeam a/awayteam`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0176106"
        },
        "content": " `AddMatch 28/02/2019 h/Fulham a/Chelsea +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0176106"
        },
        "content": " Adds a new Match with the specified details."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0176106"
        },
        "content": " "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Matches"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Delete a Match from League Tracker. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `DeleteMatch INDEX  `"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `ListMatches` +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `DeleteMatch 1` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Deletes the 1st Match in the Match list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0176106"
        },
        "content": "League tracker data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0176106"
        },
        "content": "There is no need to save manually. league tracker data are saved in a file called `addressbook.txt` in the project root folder."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Q: How do I transfer my data to another Computer?"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0176106"
        },
        "content": "A: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous LeagueTracker folder."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Players"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "*List Players in a Team* : `ListPlayer`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*List all Players in the league* : `ListAllPlayer`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "*Add a Player to League* : `AddPlayer`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "*Delete a Player from League* : `DeletePlayer`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "*Edit a Player\u0027s Profile* : `EditPlayer`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "*Display a Player\u0027s Profile* : `DisplayProfile`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Teams"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0176106"
        },
        "content": "*List Team in League* : `ListTeam` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0176106"
        },
        "content": "*Add Team to League* : `AddTeam` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0176106"
        },
        "content": "*Edit Team\u0027s Profile* : `EditTeam` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0176106"
        },
        "content": "*Delete Team from League* : `DelTeam`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d League"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Match Schedule"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0176106"
        },
        "content": "*List Matches in League* : `ListMatches` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0176106"
        },
        "content": "*Add Match to League* : `AddMatch` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0176106"
        },
        "content": "*Delete Match from League* : `DeleteMatch`"
      }
    ],
    "authorContributionMap": {
      "huyidi": 12,
      "E0176106": 105,
      "-": 81
    }
  },
  {
    "path": "src/seedu/addressbook/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a person to the address book. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Contact details can be marked private by prepending \u0027p\u0027 to the prefix.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: NAME [p]p/PHONE [p]e/EMAIL [p]a/ADDRESS  [t/TAG]...\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" John Doe p/98765432 e/johnd@gmail.com a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(String name,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                      String phone, boolean isPhonePrivate,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                      String email, boolean isEmailPrivate,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                      String address, boolean isAddressPrivate,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                      Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toAdd \u003d new Person("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Name(name),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(phone, isPhonePrivate),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(email, isEmailPrivate),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(address, isAddressPrivate),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                tagSet"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AddCommand(Person toAdd) { this.toAdd \u003d toAdd; }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyPerson getPerson() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (UniquePersonList.DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 1,
      "-": 66
    }
  },
  {
    "path": "src/seedu/addressbook/commands/AddMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Adds a match to the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class AddMatchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addmatch\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a match to the address book. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Parameters: DATE h/HOMETEAM a/AWAYTEAM [t/TAG]...\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \" 17 MAR 2019 h/West Ham a/Huddersfield\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New match added: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MATCH \u003d \"This match already exists in the address book\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final Match toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AddMatchCommand(String date,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                      String home,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                      String away,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                      Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.toAdd \u003d new Match("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new Date(date),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new Home(home),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new Away(away),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                tagSet"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AddMatchCommand(Match toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public ReadOnlyMatch getMatch() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            addressBook.addMatch(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (UniqueMatchList.DuplicateMatchException dme) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MATCH);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 66
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Clears the person list in address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clear persons in address book permanently.\\n\\t\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Person list has been cleared!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        addressBook.clearPerson();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "E0176106": 4
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ClearMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Clears the match list in address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class ClearMatchCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearmatch\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clear matches in address book permanently.\\n\\t\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Match list has been cleared!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        addressBook.clearMatch();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 19
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.ui.Gui.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook addressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    protected List\u003c? extends ReadOnlyMatch\u003e relevantMatches;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    protected List\u003c? extends ReadOnlyTeam\u003e relevantTeams;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param targetIndex last visible listing index of the target person"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command(int targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setTargetIndex(targetIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of persons."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param personsDisplayed used to generate summary"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return summary message for persons displayed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getMessageForPersonListShownSummary(List\u003c? extends ReadOnlyPerson\u003e personsDisplayed) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, personsDisplayed.size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of Matches."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static String getMessageForMatchListShownSummary(List\u003c? extends ReadOnlyMatch\u003e matchesDisplayed) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return String.format(Messages.MESSAGE_MATCHES_LISTED_OVERVIEW, matchesDisplayed.size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of Teams."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static String getMessageForTeamListShownSummary(List\u003c? extends ReadOnlyTeam\u003e teamsDisplayed) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return String.format(Messages.MESSAGE_TEAMS_LISTED_OVERVIEW, teamsDisplayed.size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new UnsupportedOperationException(\"This method should be implement in child classes\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    //Note: it is better to make the execute() method abstract, by replacing the above method with the line below:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    //public abstract CommandResult execute();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Supplies the data the command will operate on."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setData(AddressBook addressBook,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                        List\u003c? extends ReadOnlyPerson\u003e relevantPersons,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                        List\u003c? extends ReadOnlyTeam\u003e relevantTeams,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                        List\u003c? extends ReadOnlyMatch\u003e relevantMatches) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.relevantTeams \u003d relevantTeams;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.relevantMatches \u003d relevantMatches;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the the target person in the last shown list from the given arguments."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected ReadOnlyPerson getTargetPerson() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return relevantPersons.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    protected ReadOnlyMatch getTargetMatch() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return relevantMatches.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    protected ReadOnlyTeam getTargetTeam() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return relevantTeams.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTargetIndex(int targetIndex) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 16,
      "-": 72,
      "E0176106": 18
    }
  },
  {
    "path": "src/seedu/addressbook/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The feedback message to be shown to the user. Contains a description of the execution result */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The list of persons that was produced by the command */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /** The list of teams that was produced by the command */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final List\u003c? extends ReadOnlyTeam\u003e relevantTeams;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /** The list of matches that was produced by the command */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final List\u003c? extends ReadOnlyMatch\u003e relevantMatches;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /** Constructor for result which do not return any list*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        relevantPersons \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        relevantTeams \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        relevantMatches \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult(String feedbackToUser,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                         List\u003c? extends ReadOnlyPerson\u003e relevantPersons,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                         List\u003c? extends ReadOnlyTeam\u003e relevantTeams,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                         List\u003c? extends ReadOnlyMatch\u003e relevantMatches) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.relevantTeams \u003d relevantTeams;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.relevantMatches \u003d relevantMatches;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns list of persons relevant to the command command result, if any."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e getRelevantPersons() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.ofNullable(relevantPersons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns list of matches relevant to the command command result, if any."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyMatch\u003e\u003e getRelevantMatches() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Optional.ofNullable(relevantMatches);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns list of teams relevant to the command command result, if any."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyTeam\u003e\u003e getRelevantTeams() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Optional.ofNullable(relevantTeams);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 16,
      "-": 35,
      "E0176106": 15
    }
  },
  {
    "path": "src/seedu/addressbook/commands/DeleteMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList.MatchNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Deletes a match identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class DeleteMatchCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletematch\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Deletes the match identified by the index number used in the last match listing.\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_DELETE_MATCH_SUCCESS \u003d \"Deleted Match: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public DeleteMatchCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            final ReadOnlyMatch target \u003d getTargetMatch();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            addressBook.removeMatch(target);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_MATCH_SUCCESS, target));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_MATCH_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (MatchNotFoundException mnfe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_MATCH_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 42
    }
  },
  {
    "path": "src/seedu/addressbook/commands/FinanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.Finance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * check the financial profit in USD of a team identified using it\u0027s last displayed index from the League."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class FinanceCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"finance\" ;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Checks the financial condition of a team identified using it\u0027s last displayed index from the League.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Finance of the team selected:\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public FinanceCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            final ReadOnlyTeam target \u003d getTargetTeam();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            Finance finance \u003d new Finance(target);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            double money \u003d finance.getFinance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + \" \" + money);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huyidi": 44
    }
  },
  {
    "path": "src/seedu/addressbook/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e personsFound \u003d getPersonsWithNameContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(personsFound), personsFound, null, null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieve all persons in the address book whose names contain some of the specified keywords."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of persons found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cReadOnlyPerson\u003e getPersonsWithNameContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e matchedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(person.getName().getWordsInName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                matchedPersons.add(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return matchedPersons;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "E0176106": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/FindMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Finds and lists all matches in address book with date that contains any of the argument keywords."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class FindMatchCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findmatch\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Finds all matches with date that contains any of \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" MAR APR JUN\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public FindMatchCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cReadOnlyMatch\u003e matchesFound \u003d getMatchesWithDateContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new CommandResult(getMessageForMatchListShownSummary(matchesFound), null, null, matchesFound);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Retrieve all matches in the address book with date containing some of the specified keywords."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return list of matches found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cReadOnlyMatch\u003e getMatchesWithDateContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cReadOnlyMatch\u003e matchedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (ReadOnlyMatch match : addressBook.getAllMatches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            final Set\u003cString\u003e wordsInDate \u003d new HashSet\u003c\u003e(match.getDate().getWordsInDate());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            if (!Collections.disjoint(wordsInDate, keywords)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                matchedMatches.add(match);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return matchedMatches;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 56
    }
  },
  {
    "path": "src/seedu/addressbook/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Team.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" +\"Shows program usage instructions.\\n\\t\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ALL_USAGES \u003d AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + SortCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + AddTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + DeleteTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + ClearTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + FindTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + ListTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + ViewCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ViewAllCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"\\n\" + FinanceCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + AddMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + DeleteMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + ClearMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + FindMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + ListMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ExitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 1,
      "yingrong1996": 9,
      "-": 27,
      "E0176106": 5
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Displays all persons in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyPerson\u003e allPersons \u003d addressBook.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(allPersons), allPersons, null, null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "E0176106": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ListMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Lists all matches in the league tracker to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class ListMatchCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listmatch\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Displays all matches in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cReadOnlyMatch\u003e allMatches \u003d addressBook.getAllMatches().immutableListView();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new CommandResult(getMessageForMatchListShownSummary(allMatches), null, null, allMatches);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 24
    }
  },
  {
    "path": "src/seedu/addressbook/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Sorts all persons in the address book to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Sorts all persons in the address book in ascending alphabetical order.\\n\\t\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been sorted!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        addressBook.sort();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 23
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Team/AddTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.Team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Adds a Team to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class AddTeam extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTeam\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a Team to the address book. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Parameters: NAME c/COUNTRY s/SPONSORSHIP BALANCE [t/TAG]...\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \" Singapore United c/Singapore s/5487 t/Lousy\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Team added: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This Team already exists in the address book\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final Team toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AddTeam(String name,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                   String country,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                   String sponsor,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                   Set\u003cString\u003e tags ) throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.toAdd \u003d new Team("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                new Name(name),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                new Country(country),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                new Sponsor(sponsor),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                new HashSet\u003c\u003e(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                tagSet"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AddTeam(Team toAdd) { this.toAdd \u003d toAdd; }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public ReadOnlyTeam getTeam() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            addressBook.addTeam(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (UniqueTeamList.DuplicateTeamException dpe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 67
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Team/ClearTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.Team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Clears the Team List."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class ClearTeam extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearTeam\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clears Team List permanently.\\n\\t\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Team List has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        addressBook.clearTeam();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 21
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Team/DeleteTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.Team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Deletes a team identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class DeleteTeam extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delTeam\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Deletes the Team identified by the index number used in the last person listing.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_DELETE_TEAM_SUCCESS \u003d \"Deleted Team: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public DeleteTeam(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final ReadOnlyTeam target \u003d getTargetTeam();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            addressBook.removeTeam(target);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_TEAM_SUCCESS, target));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (UniqueTeamList.TeamNotFoundException tnfe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_TEAM_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 44
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Team/EditTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "//package seedu.addressbook.commands.Team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "//public class EditTeam {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 4
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Team/FindTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.Team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Finds and lists all teams in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class FindTeam extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findTeam\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Finds all teams whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" United\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public FindTeam(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cReadOnlyTeam\u003e teamsFound \u003d getTeamsWithNameContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new CommandResult(getMessageForTeamListShownSummary(teamsFound), null, teamsFound, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Retrieve all teams in the address book whose names contain some of the specified keywords."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003cReadOnlyTeam\u003e getTeamsWithNameContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cReadOnlyTeam\u003e matchedTeams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (ReadOnlyTeam team : addressBook.getAllTeams()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(team.getName().getWordsInName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                matchedTeams.add(team);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return matchedTeams;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 54,
      "E0176106": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Team/ListTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.Team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class ListTeam extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listTeam\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Displays all Teams in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cReadOnlyTeam\u003e allTeams \u003d addressBook.getAllTeams().immutableListView();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new CommandResult(getMessageForTeamListShownSummary(allTeams),null, allTeams, null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 24,
      "E0176106": 1
    }
  },
  {
    "path": "src/seedu/addressbook/common/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_IN_ADDRESSBOOK \u003d \"Person could not be found in address book\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_INVALID_MATCH_DISPLAYED_INDEX \u003d \"The match index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_MATCH_NOT_IN_ADDRESSBOOK \u003d \"Match could not be found in address book\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_MATCHES_LISTED_OVERVIEW \u003d \"%1$d matches listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_INVALID_TEAM_DISPLAYED_INDEX \u003d \"The team index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_TEAM_NOT_IN_ADDRESSBOOK \u003d \"Team could not be found in address book\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_TEAMS_LISTED_OVERVIEW \u003d \"%1$d teams listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE \u003d \"Launch command format: \" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \"java seedu.addressbook.Main [STORAGE_FILE_PATH]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Welcome to your Address Book!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USING_STORAGE_FILE \u003d \"Using storage file : %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 1,
      "-": 16,
      "E0176106": 5
    }
  },
  {
    "path": "src/seedu/addressbook/data/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList.DuplicateMatchException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList.MatchNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the entire address book. Contains the data of the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList allPersons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final UniqueTeamList allTeams;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final UniqueMatchList allMatches;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook empty() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allMatches \u003d new UniqueMatchList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allTeams \u003d new UniqueTeamList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an address book with the given data."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons external changes to this will not affect this address book"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param matches external changes to this will not affect this address book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AddressBook(UniquePersonList persons,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                        UniqueTeamList teams,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                        UniqueMatchList matches) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allPersons \u003d new UniquePersonList(persons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.allTeams \u003d new UniqueTeamList(teams);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.allMatches \u003d new UniqueMatchList(matches);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void addPerson(Person toAdd) throws DuplicatePersonException { allPersons.add(toAdd); }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Adds a Team to the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void addTeam(Team toAdd) throws UniqueTeamList.DuplicateTeamException { allTeams.add(toAdd); }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Adds a match to the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws DuplicateMatchException if an equivalent match already exists."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void addMatch(Match toAdd) throws DuplicateMatchException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allMatches.add(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if an equivalent person exists in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsPerson(ReadOnlyPerson key) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.contains(key);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Checks if an equivalent match exists in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean containsMatch(ReadOnlyMatch key) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return allMatches.contains(key);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such Person could be found."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.remove(toRemove);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Removes the equivalent match from the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws MatchNotFoundException if no such Match could be found."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void removeMatch(ReadOnlyMatch toRemove) throws MatchNotFoundException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allMatches.remove(toRemove);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Clears all matches from the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void clearMatch() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allMatches.clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Removes the equivalent team from the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void removeTeam(ReadOnlyTeam toRemove) throws UniqueTeamList.TeamNotFoundException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allTeams.remove(toRemove);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Sorts all persons from the address book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void sort() { "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allPersons.sort(); "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons from the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void clearPerson() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.clear();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Clears all teams from the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void clearTeam() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allTeams.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Defensively copied UniquePersonList of all persons in the address book at the time of the call."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList getAllPersons() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniquePersonList(allPersons);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Defensively copied UniqueMatchList of all matches in the address book at the time of the call."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList getAllMatches() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new UniqueMatchList(allMatches);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueTeamList getAllTeams() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new UniqueTeamList(allTeams); "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.allPersons.equals(((AddressBook) other).allPersons));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.hashCode();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 31,
      "-": 81,
      "E0176106": 61
    }
  },
  {
    "path": "src/seedu/addressbook/data/finance/Finance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.data.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.DuplicatePersonException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.team.Sponsor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * Represents Financial condition for a Team in the League."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class Finance {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double sponsor \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double venueCost \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double playerSalary \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double ticketIncome \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public Finance(ReadOnlyTeam team) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Sponsor sponsorSponsor \u003d team.getSponsor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        String sponsorString \u003d sponsorSponsor.value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.sponsor \u003d Double.valueOf(sponsorString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "       /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        * wait for variables from other class"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        *Sponsor sponsorSponsor \u003d team.getSponsor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        String venueCostString \u003d sponsorSponsor.value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.venueCost \u003d Double.valueOf(venueCostString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Sponsor sponsorSponsor \u003d team.getSponsor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        String playerSalaryString \u003d sponsorSponsor.value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.playerSalary \u003d Double.valueOf(playerSalaryString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Sponsor sponsorSponsor \u003d team.getSponsor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        String sponsorString \u003d sponsorSponsor.value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.sponsor \u003d Double.valueOf(sponsorString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getFinance(){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double money;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        money \u003d sponsor - venueCost + playerSalary + ticketIncome;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return money;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getSponsor(){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return sponsor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getVenueCost(){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return venueCost;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getPlayerSalary(){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return playerSalary;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getTicketIncome(){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return ticketIncome;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 72
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/Away.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Represents a Match away team in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAway(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class Away {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String EXAMPLE \u003d \"Huddersfield\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_AWAY_CONSTRAINTS \u003d \"Match away teams should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String AWAY_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public final String fullAway;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Validates given away team."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if given away team string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Away(String away) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        away \u003d away.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!isValidAway(away)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new IllegalValueException(MESSAGE_AWAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.fullAway \u003d away;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns true if a given string is a valid match away team."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static boolean isValidAway(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return test.matches(AWAY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Retrieves a listing of every word in the away team, in order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cString\u003e getWordsInAway() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Arrays.asList(fullAway.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullAway;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof Away // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.fullAway.equals(((Away) other).fullAway)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullAway.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 64
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Represents a Match date in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String EXAMPLE \u003d \"17 MAR 2019\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Match dates should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public final String fullDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Validates given date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if given date string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Date(String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        date \u003d date.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!isValidDate(date)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new IllegalValueException(MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.fullDate \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns true if a given string is a valid match date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return test.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Retrieves a listing of every word in the date, in order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cString\u003e getWordsInDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Arrays.asList(fullDate.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.fullDate.equals(((Date) other).fullDate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullDate.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 64
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/Home.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Represents a Match home team in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHome(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class Home {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String EXAMPLE \u003d \"West Ham\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_HOME_CONSTRAINTS \u003d \"Match home teams should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String HOME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public final String fullHome;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Validates given home team."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if given home team string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Home(String home) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        home \u003d home.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!isValidHome(home)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new IllegalValueException(MESSAGE_HOME_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.fullHome \u003d home;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns true if a given string is a valid match home team."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static boolean isValidHome(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return test.matches(HOME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Retrieves a listing of every word in the home team, in order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cString\u003e getWordsInHome() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Arrays.asList(fullHome.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullHome;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof Home // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.fullHome.equals(((Home) other).fullHome)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullHome.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 64
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/Match.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Represents a Match in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class Match implements ReadOnlyMatch {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Home home;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Away away;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Match(Date date, Home home, Away away, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.home \u003d home;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.away \u003d away;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Match(ReadOnlyMatch source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this(source.getDate(), source.getHome(), source.getAway(), source.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Home getHome() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return home;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Away getAway() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return away;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Replaces this match\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        tags.addAll(replacement);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof ReadOnlyMatch // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyMatch) other));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Objects.hash(date, home, away, tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 83
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/ReadOnlyMatch.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * A read-only immutable interface for a Match in the addressbook."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public interface ReadOnlyMatch {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    Date getDate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    Home getHome();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    Away getAway();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * The returned {@code Set} is a deep copy of the internal {@code Set},"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * changes on the returned list will not affect the match\u0027s internal tags."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyMatch other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 other.getDate().equals(this.getDate()) // state checks here onwards"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 other.getHome().equals(this.getHome())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 other.getAway().equals(this.getAway()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Formats the match as text, showing all match details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        builder.append(getDate())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                .append(\" Home: \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        builder.append(getHome())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                .append(\" Away: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        builder.append(getAway())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 52
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/UniqueMatchList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * A list of matches. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * @see Match#equals(Object)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class UniqueMatchList implements Iterable\u003cMatch\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static class DuplicateMatchException extends DuplicateDataException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        protected DuplicateMatchException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            super(\"Operation would result in duplicate matches\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Signals that an operation targeting a specified match in the list would fail because"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * there is no such matching match in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static class MatchNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final List\u003cMatch\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs empty match list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs a match list with the given matches."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList(Match... matches) throws DuplicateMatchException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cMatch\u003e initialTags \u003d Arrays.asList(matches);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new DuplicateMatchException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param matches a collection of matches"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws DuplicateMatchException if the {@code matches} contains duplicate matches"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList(Collection\u003cMatch\u003e matches) throws DuplicateMatchException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!Utils.elementsAreUnique(matches)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new DuplicateMatchException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.addAll(matches);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList(UniqueMatchList source) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyMatch}s."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cReadOnlyMatch\u003e immutableListView() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Checks if the list contains an equivalent match as the given argument."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean contains(ReadOnlyMatch toCheck) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Adds a match to the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws DuplicateMatchException if the match to add is a duplicate of an existing match in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void add(Match toAdd) throws DuplicateMatchException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new DuplicateMatchException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Removes the equivalent match from the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws MatchNotFoundException if no such match could be found in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void remove(ReadOnlyMatch toRemove) throws MatchNotFoundException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final boolean matchFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!matchFoundAndDeleted) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new MatchNotFoundException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Clears all matches in list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Iterator\u003cMatch\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof UniqueMatchList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.internalList.equals("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                ((UniqueMatchList) other).internalList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 134
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Age.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Represents a player\u0027s age in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(int)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final int example \u003d 20;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_AGE_CONSTRAINTS \u003d \"Age of a player must be an integer\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final int fullAge;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given age."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given age integer is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Age (int age) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidAge(age)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullAge \u003d age;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid age."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidAge(int test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return (test\u003e0 \u0026\u0026 test \u003c100);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 40
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Appearance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Appearance {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final int example \u003d 30;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_APPEARANCE_CONSTRAINTS \u003d \"No. of appearance of a player must be an integer\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final int fullAppearance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given appearance number."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given Number of Appearance integer is invalid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Appearance (int Appearance) throws IllegalValueException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidAPP(Appearance)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_APPEARANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullAppearance \u003d Appearance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given integer is a valid jersey number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidAPP(int test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return (test\u003e0 \u0026\u0026 test \u003c35);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 33
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Country.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Country {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 5
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"Male\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_GENDER_CONSTRAINTS \u003d \"Player\u0027s Gender should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String fullGender;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given gender."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given gender string is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Gender (String gender ) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "        gender \u003d gender.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidGender(gender)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullGender \u003d gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid gender."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Retrieves a listing of every word in the Gender, in order."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return Arrays.asList(fullGender.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullGender;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.fullGender.equals(((Gender) other).fullGender)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullGender.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 59
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/GoalsAssisted.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class GoalsAssisted {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final int example \u003d 10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_GA_CONSTRAINTS \u003d \"No.of assists for a player must be an integer\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final int fullGA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given No. of assists."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given assist number integer is invalid."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public GoalsAssisted (int GA) throws IllegalValueException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidGA(GA)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_GA_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullGA \u003d GA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given integer is a valid goals assisted number."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidGA(int test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return (test\u003e\u003d0 \u0026\u0026 test \u003c100);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 32
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/GoalsScored.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class GoalsScored {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final int example \u003d 10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_GS_CONSTRAINTS \u003d \"No.of goals scored for a player must be an integer\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final int fullGS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given goals scored."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given goals scored integer is invalid."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public GoalsScored (int GS) throws IllegalValueException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidGS(GS)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_GS_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullGS \u003d GS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given integer is a valid goals scored number."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidGS(int test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return (test\u003e\u003d0 \u0026\u0026 test \u003c100);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 31
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/HealthStatus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class HealthStatus {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"Healthy\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_HEALTHSTATUS_CONSTRAINTS \u003d \"Player\u0027s Health Status should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String HEALTHSTATUS_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String fullHS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given Health Status."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given Health Status string is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public HealthStatus (String HS) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "        HS \u003d HS.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidHS(HS)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_HEALTHSTATUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullHS \u003d HS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid Health Strategy."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidHS(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return test.matches(HEALTHSTATUS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Retrieves a listing of every word in Health Status, in order."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public List\u003cString\u003e getWordsInTeam() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return Arrays.asList(fullHS.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullHS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof HealthStatus // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.fullHS.equals(((HealthStatus) other).fullHS)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullHS.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 59
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/JerseyNumber.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class JerseyNumber {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final int example \u003d 10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_JN_CONSTRAINTS \u003d \"Jersey Number of a player must be an integer\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final int fullJN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given jersey number."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given Jersey Number integer is invalid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public JerseyNumber (int JN) throws IllegalValueException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidJN(JN)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_JN_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullJN \u003d JN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given integer is a valid jersey number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidJN(int test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return (test\u003e0 \u0026\u0026 test \u003c35);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 33
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"John Doe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Person names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidName(name)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.asList(fullName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int compareTo(Name name){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return this.fullName.compareToIgnoreCase(name.fullName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 5,
      "-": 63
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/PositionPlayed.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Represents a player\u0027s Position on the field."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPosition(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class PositionPlayed {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String example \u003d \"Midfielder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_POSITIONPLAYED_CONSTRAINTS \u003d \"Position of a player must be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String PositionPlayed_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String fullPosition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given position."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given position string is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public PositionPlayed (String position,boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidPosition(position)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_POSITIONPLAYED_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullPosition \u003d position;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid position."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidPosition(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return test.matches(PositionPlayed_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "warheade": 43
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Team.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Team {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"FC Barcelona\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_TEAM_CONSTRAINTS \u003d \"Player\u0027s team names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String TEAM_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String fullTeam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given Team name."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given team name string is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Team(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidTeam(name)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TEAM_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullTeam \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid team name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidTeam(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return test.matches(TEAM_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Retrieves a listing of every word in the team name, in order."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public List\u003cString\u003e getWordsInTeam() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return Arrays.asList(fullTeam.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullTeam;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof Team // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.fullTeam.equals(((Team) other).fullTeam)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullTeam.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 59
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#equals(Object)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class DuplicatePersonException extends DuplicateDataException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        protected DuplicatePersonException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation targeting a specified person in the list would fail because"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * there is no such matching person in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class PersonNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cPerson\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs empty person list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList() {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a person list with the given persons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(Person... persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cPerson\u003e initialTags \u003d Arrays.asList(persons);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons a collection of persons"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the {@code persons} contains duplicate persons"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(Collection\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Utils.elementsAreUnique(persons)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(persons);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(UniquePersonList source) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyPerson}s."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e immutableListView() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(ReadOnlyPerson toCheck) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personFoundAndDeleted) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons in list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Sort all persons in list by ascending alphabetical order."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void sort(){"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Comparator\u003cPerson\u003e CustomPersonCompare \u003d Comparator.comparing(Person::getName);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Collections.sort(internalList,CustomPersonCompare);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.internalList.equals("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                        ((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 9,
      "-": 134
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/Country.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a Team\u0027s country in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Country {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String EXAMPLE \u003d \"Singapore\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_COUNTRY_CONSTRAINTS \u003d \"Country names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COUNTRY_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Validates given country names."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Country(String country) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        country \u003d country.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidCountry(country)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new IllegalValueException(MESSAGE_COUNTRY_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.value \u003d country;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if a given string is a valid country names."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidCountry(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return test.matches(COUNTRY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof Country // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.value.equals(((Country) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 51
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a Team\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String EXAMPLE \u003d \"Singapore United\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Team names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Name(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidName(name)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.fullName \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if a given string is a valid person name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Arrays.asList(fullName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int compareTo(Name name){ return this.fullName.compareToIgnoreCase(name.fullName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 66
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/PlayerList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "//package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "//import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "///**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "// * Represents a Player List in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "// * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "// */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "//public class PlayerList implements ReadOnlyPerson {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 13
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/ReadOnlyTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * A read-only immutable interface for a Team in the league tracker."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public interface ReadOnlyTeam {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Country getCountry();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Sponsor getSponsor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Set\u003cPerson\u003e getPlayers();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * changes on the returned list will not affect the team\u0027s internal tags."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyTeam other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 other.getCountry().equals(this.getCountry())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 other.getSponsor().equals(this.getSponsor()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getName().fullName.trim())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Country: \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getCountry().toString().trim())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Sponsorship: USD \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getSponsor().toString().trim())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Tags: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 51
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/Sponsor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a Team\u0027s balance of sponsorship in USD in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Sponsor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String EXAMPLE \u003d \"500\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_SPONSOR_CONSTRAINTS \u003d \"Team\u0027s Sponsorship in USD\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String SPONSOR_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Validates given sponsorship amount."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Sponsor(String sponsor) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        sponsor \u003d sponsor.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidSponsor(sponsor)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new IllegalValueException(MESSAGE_SPONSOR_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.value \u003d sponsor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if a given string is a valid sponsorship amount."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidSponsor(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return test.matches(SPONSOR_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof Sponsor // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.value.equals(((Sponsor) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 51
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/Team.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a Team in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Team implements ReadOnlyTeam {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Country country;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Sponsor sponsor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final Set\u003cPerson\u003e playerlist \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Team(Name name, Country country,Sponsor sponsor ,Set\u003cPerson\u003e playerlist, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.sponsor \u003d sponsor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.playerlist.addAll(playerlist);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Team(ReadOnlyTeam source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this(source.getName(), source.getCountry(),source.getSponsor(),source.getPlayers(), source.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Set\u003cPerson\u003e getPlayers() {return new HashSet\u003c\u003e(playerlist);}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Sponsor getSponsor() {return sponsor;}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return country;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Set\u003cTag\u003e getTags() { return new HashSet\u003c\u003e(tags); }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Replaces this team\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        tags.addAll(replacement);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setPlayers(Set\u003cPerson\u003e replacement) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        playerlist.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        playerlist.addAll(replacement);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof ReadOnlyTeam // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyTeam) other));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Objects.hash(name, country, sponsor, playerlist ,tags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 92
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/UniqueTeamList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * A list of Teams. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class UniqueTeamList implements Iterable\u003cTeam\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static class DuplicateTeamException extends DuplicateDataException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        protected DuplicateTeamException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            super(\"Operation would result in duplicate Teams\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Signals that an operation targeting a specified Team in the list would fail because"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * there is no such matching Team in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static class TeamNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final List\u003cTeam\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs empty Team list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs a Team list with the given Teams."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList(Team...teams) throws DuplicateTeamException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cTeam\u003e initialTags \u003d Arrays.asList(teams);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new DuplicateTeamException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList(Collection\u003cTeam\u003e teams) throws DuplicateTeamException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!Utils.elementsAreUnique(teams)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new DuplicateTeamException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.addAll(teams);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList(UniqueTeamList source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public List\u003cReadOnlyTeam\u003e immutableListView() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if the list contains an equivalent team as the given argument."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean contains(ReadOnlyTeam toCheck) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Adds a Team to the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void add(Team toAdd) throws DuplicateTeamException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new DuplicateTeamException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Removes the equivalent Team from the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void remove(ReadOnlyTeam toRemove) throws TeamNotFoundException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final boolean TeamFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!TeamFoundAndDeleted) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new TeamNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Clears all Teams in list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Sort all Teams in list by ascending alphabetical order."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void sort(){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Comparator\u003cTeam\u003e CustomTeamCompare \u003d Comparator.comparing(Team::getName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Collections.sort(internalList,CustomTeamCompare);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Iterator\u003cTeam\u003e iterator() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof UniqueTeamList // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.internalList.equals("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                         ((UniqueTeamList) other).internalList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 134
    }
  },
  {
    "path": "src/seedu/addressbook/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the main Logic of the AddressBook."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The list of person shown to the user most recently.  */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "   private List\u003c? extends ReadOnlyPerson\u003e lastPersonShownList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /** The list of match shown to the user most recently.  */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003c? extends ReadOnlyMatch\u003e lastMatchList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003c? extends ReadOnlyTeam\u003e lastTeamShownList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Logic() throws Exception{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(initializeStorage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBook(storage.load());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    Logic(StorageFile storageFile, AddressBook addressBook){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(storageFile);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBook(addressBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setStorage(StorageFile storage){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(AddressBook addressBook){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the StorageFile object based on the user specified path (if any) or the default storage path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageFile.InvalidStorageFilePathException if the target file path is incorrect."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile initializeStorage() throws StorageFile.InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStorageFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getPath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Unmodifiable view of the current last person list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e getLastPersonShownList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Collections.unmodifiableList(lastPersonShownList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Unmodifiable view of the current last match list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cReadOnlyMatch\u003e getLastMatchList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Collections.unmodifiableList(lastMatchList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    protected void setLastMatchList(List\u003c? extends ReadOnlyMatch\u003e newList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        lastMatchList \u003d newList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    protected void setLastPersonShownList(List\u003c? extends ReadOnlyPerson\u003e newList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        lastPersonShownList \u003d newList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Unmodifiable view of the current last shown list(Team)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public List\u003cReadOnlyTeam\u003e getLastTeamShownList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Collections.unmodifiableList(lastTeamShownList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    protected void setLastTeamShownList(List\u003c? extends ReadOnlyTeam\u003e newList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        lastTeamShownList \u003d newList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the user command, executes it, and returns the result."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String userCommandText) throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d new Parser().parseCommand(userCommandText);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d execute(command);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        recordResult(result);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, updates storage, and returns the result."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command user command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return result of the command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult execute(Command command) throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        command.setData(addressBook,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                lastPersonShownList,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                lastTeamShownList,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                lastMatchList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(addressBook);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /** Updates the {@link #lastPersonList} if the result contains a list of Persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *  Updates the {@link #lastMatchList} if the result contains a list of Matches."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */      "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void recordResult(CommandResult result) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e personList \u003d result.getRelevantPersons();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyTeam\u003e\u003e teamList \u003d result.getRelevantTeams();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMatch\u003e\u003e matchList \u003d result.getRelevantMatches();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (personList.isPresent()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            lastPersonShownList \u003d personList.get();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } else if (teamList.isPresent()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            lastTeamShownList \u003d teamList.get();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } else if (matchList.isPresent()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            lastMatchList \u003d matchList.get();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 24,
      "-": 91,
      "E0176106": 24
    }
  },
  {
    "path": "src/seedu/addressbook/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Team.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final Pattern INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e.+)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern KEYWORDS_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003ckeywords\u003e\\\\S+(?:\\\\s+\\\\S+)*)\"); // one or more keywords separated by whitespace"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern PERSON_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisPhonePrivate\u003ep?)p/(?\u003cphone\u003e[^/]+)\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisEmailPrivate\u003ep?)e/(?\u003cemail\u003e[^/]+)\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisAddressPrivate\u003ep?)a/(?\u003caddress\u003e[^/]+)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final Pattern MATCH_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            Pattern.compile(\"(?\u003cdate\u003e[^/]+)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    + \"h/(?\u003chome\u003e[^/]+)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    + \"a/(?\u003caway\u003e[^/]+)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final Pattern TEAM_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"c/(?\u003ccountry\u003e[^/]+)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"s/(?\u003csponsor\u003e[^/]+)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the user input could not be parsed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class ParseException extends Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ParseException(String message) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return prepareAddPerson(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            case AddTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                return AddTeam(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return prepareDeletePerson(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            case DeleteTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                return DelTeam(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            case ClearTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                return new ClearTeam();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return prepareFindPerson(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            case FindTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                return prepareFindTeam(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            case FinanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                return prepareFinance(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            case AddMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return prepareAddMatch(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            case DeleteMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return prepareDeleteMatch(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            case ClearMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return new ClearMatchCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            case FindMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return prepareFindMatch(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            case ListMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return new ListMatchCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            case ListTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                return new ListTeam();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                return new SortCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareView(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            case ViewAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareViewAll(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD: // Fallthrough"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Command AddTeam(String args){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Matcher matcher \u003d TEAM_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new AddTeam("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"country\"),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"sponsor\"),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            );"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the add person command."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareAddPerson(String args){"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d PERSON_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"phone\"),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isPhonePrivate\")),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"email\"),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isEmailPrivate\")),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"address\"),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isAddressPrivate\")),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Parses arguments in the context of the add person command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareAddMatch(String args){"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Matcher matcher \u003d MATCH_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new AddMatchCommand("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    matcher.group(\"date\"),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    matcher.group(\"home\"),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    matcher.group(\"away\"),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            );"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the private prefix of a contact detail in the add command\u0027s arguments string is present."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isPrivatePrefixPresent(String matchedPrefix) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        return matchedPrefix.equals(\"p\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the new person\u0027s tags from the add command\u0027s tag arguments string."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Merges duplicate tag strings."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Set\u003cString\u003e getTagsFromArgs(String tagArguments) throws IllegalValueException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagArguments.isEmpty()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.emptySet();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // replace first delimiter prefix, then split"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        final Collection\u003cString\u003e tagStrings \u003d Arrays.asList(tagArguments.replaceFirst(\" t/\", \"\").split(\" t/\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tagStrings);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the delete person command."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareDeletePerson(String args) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Parses arguments in the context of the delete match command."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareDeleteMatch(String args) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new DeleteMatchCommand(targetIndex);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the delete team command."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Command DelTeam(String args) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new DeleteTeam(targetIndex);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Parses arguments in the context of the finance command."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private Command prepareFinance(String args) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new FinanceCommand(targetIndex);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FinanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the view command."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareView(String args) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewCommand(targetIndex);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the view all command."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareViewAll(String args) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewAllCommand(targetIndex);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args arguments string to parse as index number"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed index number"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if no region of the args string could be found for the index"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NumberFormatException the args string region is not a valid number"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    private int parseArgsAsDisplayedIndex(String args) throws ParseException, NumberFormatException {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Matcher matcher \u003d INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(\"Could not find index number to parse\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the find person command."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareFindPerson(String args) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(keywordSet);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Parses arguments in the context of the find match command."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareFindMatch(String args) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    FindMatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new FindMatchCommand(keywordSet);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the find team command."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Command prepareFindTeam(String args) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    FindTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new FindTeam(keywordSet);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huyidi": 21,
      "yingrong1996": 71,
      "-": 222,
      "E0176106": 86
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted address book data holder class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"AddressBook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdaptedAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003cAdaptedTeam\u003e teams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cAdaptedMatch\u003e matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedAddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given AddressBook into this class for JAXB use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedAddressBook"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedAddressBook(AddressBook source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getAllPersons().forEach(person -\u003e persons.add(new AdaptedPerson(person)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        source.getAllMatches().forEach(match -\u003e matches.add(new AdaptedMatch(match)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        source.getAllTeams().forEach(team -\u003e teams.add(new AdaptedTeam(team)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return persons.stream().anyMatch(AdaptedPerson::isAnyRequiredFieldMissing)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || matches.stream().anyMatch(AdaptedMatch::isAnyRequiredFieldMissing)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || teams.stream().anyMatch(AdaptedTeam::isAnyRequiredFieldMissing);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly {@code AdaptedAddressBook} object into the corresponding(@code AddressBook} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted match"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cTeam\u003e teamList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cMatch\u003e matchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedPerson person : persons) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            personList.add(person.toModelType());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (AdaptedTeam team : teams) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            teamList.add(team.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "      "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedMatch match : matches) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            matchList.add(match.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new AddressBook("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                new UniquePersonList(personList),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new UniqueTeamList(teamList),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new UniqueMatchList(matchList));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 14,
      "-": 60,
      "E0176106": 17
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedMatch.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * JAXB-friendly adapted match data holder class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class AdaptedMatch {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String home;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String away;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AdaptedMatch() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Converts a given Match into this class for JAXB use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedMatch"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AdaptedMatch(ReadOnlyMatch source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        date \u003d source.getDate().fullDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        home \u003d source.getHome().fullHome;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        away \u003d source.getAway().fullAway;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            tagged.add(new AdaptedTag(tag));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            if (tag.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // second call only happens if home/away are all not null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Utils.isAnyNull(date, home, away)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || Utils.isAnyNull(home, away);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Converts this jaxb-friendly adapted match object into the Match object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted match"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Match toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Date date \u003d new Date(this.date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Home home \u003d new Home(this.home);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Away away \u003d new Away(this.away);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new Match(date, home, away, tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 87
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class AdaptedTeam {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private String country;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private String sponsor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003cAdaptedPerson\u003e playerlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003cAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AdaptedTeam() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts a given team into this class for JAXB use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AdaptedTeam(ReadOnlyTeam source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        country \u003d source.getCountry().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        sponsor \u003d source.getSponsor().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        playerlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Person person : source.getPlayers()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            playerlist.add(new AdaptedPerson(person));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            tagged.add(new AdaptedTag(tag));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (tag.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // second call only happens if phone/email/address are all not null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Utils.isAnyNull(name, country)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || Utils.isAnyNull(country);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts this jaxb-friendly adapted team object into the team object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Team toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cPerson\u003e players \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (AdaptedPerson person : playerlist) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            players.add(person.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Country country \u003d new Country(this.country);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Sponsor sponsor \u003d new Sponsor(this.sponsor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new Team(name, country, sponsor, players, tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 89
    }
  },
  {
    "path": "src/seedu/addressbook/ui/Formatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Used for formatting text for display. e.g. for adding text decorations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A decorative prefix added to the beginning of lines printed by AddressBook */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LINE_PREFIX \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Format of indexed list item */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INDEXED_LIST_ITEM \u003d \"\\t%1$d. %2$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given strings for displaying to the user. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String format(String... messages) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String m : messages) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(LINE_PREFIX + m.replace(\"\\n\", LS + LINE_PREFIX) + LS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given list of persons for displaying to the user. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String formatPersonResult(List\u003c? extends ReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cString\u003e formattedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyPerson person : persons) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedPersons.add(person.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return format(asIndexedList(formattedPersons));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /** Formats the given list of teams for displaying to the user. */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String formatTeamResult(List\u003c? extends ReadOnlyTeam\u003e teams) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cString\u003e formattedTeams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (ReadOnlyTeam team : teams) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            formattedTeams.add(team.getAsTextShowAll());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return format(asIndexedList(formattedTeams));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /** Formats the given list of matches for displaying to the user. */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String formatMatchResult(List\u003c? extends ReadOnlyMatch\u003e matches) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cString\u003e formattedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (ReadOnlyMatch match : matches) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            formattedMatches.add(match.getAsTextShowAll());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return format(asIndexedList(formattedMatches));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats a list of strings as an indexed list. */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String asIndexedList(List\u003cString\u003e listItems) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder formatted \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        int displayIndex \u003d DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String listItem : listItems) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            formatted.append(getIndexedListItem(displayIndex, listItem)).append(\"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return formatted.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats a string as an indexed list item."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param visibleIndex index for this listing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getIndexedListItem(int visibleIndex, String listItem) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_INDEXED_LIST_ITEM, visibleIndex, listItem);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 10,
      "-": 64,
      "E0176106": 12
    }
  },
  {
    "path": "src/seedu/addressbook/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Main Window of the GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stoppable mainApp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogic(Logic logic){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setMainApp(Stoppable mainApp){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mainApp \u003d mainApp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea outputConsole;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandInput;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void onCommand(ActionEvent event) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            String userCommandText \u003d commandInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(userCommandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if(isExitCommand(result)){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                exitApp();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            displayResult(result);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            clearCommandInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            display(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void exitApp() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        mainApp.stop();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns true of the result given is the result of an exit command */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isExitCommand(CommandResult result) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return result.feedbackToUser.equals(ExitCommand.MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears the command input box */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void clearCommandInput() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        commandInput.setText(\"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /** Clears the output displayPersonResult area */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearOutputConsole(){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Displays the result of a command execution to the user. */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayResult(CommandResult result) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        clearOutputConsole();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e resultPersons \u003d result.getRelevantPersons();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyTeam\u003e\u003e resultTeams \u003d result.getRelevantTeams();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMatch\u003e\u003e resultMatches \u003d result.getRelevantMatches();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if(resultPersons.isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            displayPersonResult(resultPersons.get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if(resultTeams.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            displayTeamResult(resultTeams.get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if(resultMatches.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            displayMatch(resultMatches.get());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        display(result.feedbackToUser);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayWelcomeMessage(String version, String storageFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String storageFileInfo \u003d String.format(MESSAGE_USING_STORAGE_FILE, storageFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        display(MESSAGE_WELCOME, version, MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE, storageFileInfo);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Displays the list of matches in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private void displayMatch(List\u003c? extends ReadOnlyMatch\u003e matches) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        display(new Formatter().formatMatchResult(matches));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Displays the list of persons in the output displayPersonResult area, formatted as an indexed list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private void displayPersonResult(List\u003c? extends ReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        display(new Formatter().formatPersonResult(persons));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Displays the list of teams in the output displayPersonResult area, formatted as an indexed list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private void displayTeamResult(List\u003c? extends ReadOnlyTeam\u003e teams) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        display(new Formatter().formatTeamResult(teams));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Displays the given messages on the output displayPersonResult area, after formatting appropriately."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private void display(String... messages) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        outputConsole.setText(outputConsole.getText() + new Formatter().format(messages));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 17,
      "-": 97,
      "E0176106": 20
    }
  },
  {
    "path": "test/java/seedu/addressbook/logic/LogicTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * See https://github.com/junit-team/junit4/wiki/rules#temporaryfolder-rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile saveFile;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFile \u003d new StorageFile(saveFolder.newFile(\"testSaveFile.txt\").getPath());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFile.save(addressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new Logic(saveFile, addressBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        //Constructor is called in the setup() method which executes before every test, no need to call it here again."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the last shown list is empty"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastPersonShownList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalid() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"       \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(invalidCommand,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that the result message is correct."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(String, String, AddressBook, boolean, List)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedMessage, AddressBook.empty(),false, Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the storage file content matches data in {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                                      AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                                      boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                                      List\u003c? extends ReadOnlyPerson\u003e lastPersonList) throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(r.getRelevantPersons().isPresent(), isRelevantPersonsExpected);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if(isRelevantPersonsExpected){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            assertEquals(lastPersonList, r.getRelevantPersons().get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, addressBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        assertEquals(lastPersonList, logic.getLastPersonShownList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBook, saveFile.load());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_unknownCommandWord() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String unknownCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(unknownCommand, HelpCommand.MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"help\", HelpCommand.MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"exit\", ExitCommand.MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_clear() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(helper.generatePerson(1, true));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(helper.generatePerson(2, true));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(helper.generatePerson(3, true));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"clear\", ClearCommand.MESSAGE_SUCCESS, AddressBook.empty(), false, Collections.emptyList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add wrong args wrong args\", expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name 12345 e/valid@email.butNoPhonePrefix a/valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 valid@email.butNoPrefix a/valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/valid@email.butNoAddressPrefix valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_invalidPersonData() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add []\\\\[;] p/12345 e/valid@e.mail a/valid, address\", Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/not_numbers e/valid@e.mail a/valid, address\", Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/notAnEmail a/valid, address\", Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/valid@e.mail a/valid, address t/invalid_-[.tag\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_successful() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toBeAdded \u003d helper.adam();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d new AddressBook();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                              String.format(AddCommand.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                              expectedAB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                              false,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                              Collections.emptyList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_addDuplicate_notAllowed() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toBeAdded \u003d helper.adam();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d new AddressBook();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(toBeAdded); // person already in internal address book"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_list_showsAllPersons() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(false, true);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d expectedAB.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, false, true);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"list\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                              Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                              expectedAB,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                              true,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                              expectedList);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view \", expectedMessage);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"view\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * targeting a single person in the last shown list, using visible index."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandWord to test assuming it targets a single person in the last shown list based on visible index."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInvalidIndexBehaviorForCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cPerson\u003e lastPersonList \u003d helper.generatePersonList(false, true);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        logic.setLastPersonShownList(lastPersonList);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        assertCommandBehavior(commandWord + \" -1\", expectedMessage, AddressBook.empty(), false, lastPersonList);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        assertCommandBehavior(commandWord + \" 0\", expectedMessage, AddressBook.empty(), false, lastPersonList);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        assertCommandBehavior(commandWord + \" 3\", expectedMessage, AddressBook.empty(), false, lastPersonList);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_onlyShowsNonPrivate() throws Exception {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cPerson\u003e lastPersonList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(lastPersonList);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        helper.addToAddressBook(addressBook, lastPersonList);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        logic.setLastPersonShownList(lastPersonList);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                              String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getAsTextHidePrivate()),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                              expectedAB,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                              false,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                              lastPersonList);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 2\","
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                              String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getAsTextHidePrivate()),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                              expectedAB,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                              false,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                              lastPersonList);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_tryToViewMissingPerson_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cPerson\u003e lastPersonList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d new AddressBook();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(p2);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(p2);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        logic.setLastPersonShownList(lastPersonList);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                              Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                              expectedAB,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                              false,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                              lastPersonList);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall \", expectedMessage);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"viewall\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_alsoShowsPrivate() throws Exception {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cPerson\u003e lastPersonList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(lastPersonList);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        helper.addToAddressBook(addressBook, lastPersonList);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        logic.setLastPersonShownList(lastPersonList);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 1\","
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                            String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getAsTextShowAll()),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "                            expectedAB,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                            false,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                            lastPersonList);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                            String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getAsTextShowAll()),"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                            expectedAB,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                            false,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                            lastPersonList);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_tryToViewAllPersonMissingInAddressBook_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cPerson\u003e lastPersonList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d new AddressBook();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(p1);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        logic.setLastPersonShownList(lastPersonList);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "                                Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedAB,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "                                false,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                                lastPersonList);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete \", expectedMessage);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"delete\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_removesCorrectPerson() throws Exception {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.removePerson(p2);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        logic.setLastPersonShownList(threePersons);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "                                String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, p2),"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedAB,"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                                false,"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                                threePersons);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_missingInAddressBook() throws Exception {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.removePerson(p2);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(p2);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        logic.setLastPersonShownList(threePersons);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "                                Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedAB,"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "                                false,"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "                                threePersons);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find \", expectedMessage);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_onlyMatchesFullWordsInNames() throws Exception {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"KE Y\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEYKEYKEY sduauo\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "                                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedAB,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "                                true,"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedList);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_isCaseSensitive() throws Exception {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"key key\");"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "                                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedAB,"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "                                true,"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedList);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_matchesIfAnyKeywordPresent() throws Exception {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla rAnDoM bla bceofeia\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"key key\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY rAnDoM\","
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "                                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedAB,"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "                                true,"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedList);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "     * A utility class to generate test data."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "    class TestDataHelper{"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        Person adam() throws Exception {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(\"Adam Brown\");"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone privatePhone \u003d new Phone(\"111111\", true);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d new Email(\"adam@gmail.com\", false);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "            Address privateAddress \u003d new Address(\"111, alpha street\", true);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(tag1, tag2));"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person(name, privatePhone, email, privateAddress, tags);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates a valid person using the given seed."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "         * Running this function with the same parameter values guarantees the returned person will have the same state."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "         * Each unique seed will generate a unique Person object."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param seed used to generate the person data field values"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isAllFieldsPrivate determines if private-able fields (phone, email, address) will be private"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        Person generatePerson(int seed, boolean isAllFieldsPrivate) throws Exception {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Name(\"Person \" + seed),"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Phone(\"\" + Math.abs(seed), isAllFieldsPrivate),"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Email(seed + \"@email\", isAllFieldsPrivate),"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"House of \" + seed, isAllFieldsPrivate),"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag\" + Math.abs(seed)), new Tag(\"tag\" + Math.abs(seed + 1))))"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Generates the correct add command based on the person given */"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "        String generateAddCommand(Person p) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "            StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add(\"add\");"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add(p.getName().toString());"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add((p.getPhone().isPrivate() ? \"pp/\" : \"p/\") + p.getPhone());"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add((p.getEmail().isPrivate() ? \"pe/\" : \"e/\") + p.getEmail());"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add((p.getAddress().isPrivate() ? \"pa/\" : \"a/\") + p.getAddress());"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d p.getTags();"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "            for(Tag t: tags){"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "                cmd.add(\"t/\" + t.tagName);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "            return cmd.toString();"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates an AddressBook with auto-generated persons."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "         *                          private."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook generateAddressBook(Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "            addToAddressBook(addressBook, isPrivateStatuses);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates an AddressBook based on the list of Persons given."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook generateAddressBook(List\u003cPerson\u003e persons) throws Exception{"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "            addToAddressBook(addressBook, persons);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "         * Adds auto-generated Person objects to the given AddressBook"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param addressBook The AddressBook to which the Persons will be added"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isPrivateStatuses flags to indicate if all contact details of generated persons should be set to"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "         *                          private."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        void addToAddressBook(AddressBook addressBook, Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "            addToAddressBook(addressBook, generatePersonList(isPrivateStatuses));"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "         * Adds the given list of Persons to the given AddressBook"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        void addToAddressBook(AddressBook addressBook, List\u003cPerson\u003e personsToAdd) throws Exception{"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "            for(Person p: personsToAdd){"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBook.addPerson(p);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "         * Creates a list of Persons based on the give Person objects."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e generatePersonList(Person... persons) throws Exception{"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "            for(Person p: persons){"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "                personList.add(p);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "            return personList;"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates a list of Persons based on the flags."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "         *                          private."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e generatePersonList(Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "            for(Boolean p: isPrivateStatuses){"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "                persons.add(generatePerson(i++, p));"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates a Person object with given name. Other fields will have some dummy values."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "         Person generatePersonWithName(String name) throws Exception {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Name(name),"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Phone(\"1\", false),"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Email(\"1@email\", false),"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"House of 1\", false),"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "                    Collections.singleton(new Tag(\"tag\"))"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 3,
      "-": 561,
      "E0176106": 26
    }
  }
]
