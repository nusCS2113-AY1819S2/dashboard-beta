[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d LeagueTracker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:imagesDir: docs/images]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "image:https://travis-ci.org/CS2113-AY1819S2-M11-1/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/CS2113-AY1819S2-M11-1/main\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* This is a CLI (Command Line Interface) League Tracker application *written in OOP fashion*. It has a very basic GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* It is a Java application intended for League Operators to manage teams, players, matches records."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "*Useful Links*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "This application is morphed from AddressBook-Level3 project created by SE-EDU initiative https://github.com/se-edu/[here]."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Some parts of this sample application was inspired by the excellent"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by Marco Jakob"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contact Us"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S2-M11-1/main/issues[issue tracker]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "E0176106": 7,
      "-": 21
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "mainClassName \u003d \u0027seedu.addressbook.Main\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027test/java\u0027]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "test {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    archiveName \u003d \u0027AB.jar\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        })"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u0027site-name\u0027: \u0027LeagueTracker\u0027,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2113-ay1819s2-m11-1/main\u0027,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0176106"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027asciidoctor\u0027, \u0027checkstyleMain\u0027, \u0027checkstyleTest\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 95,
      "E0176106": 76
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cproperty name\u003d\"file\" value\u003d\"config/checkstyle/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Required for SuppressionCommentFilter to work --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"FileContentsHolder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    IMPORT CHECKS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      1. STATIC: static imports"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    An import statement is redundant if:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    An import statement is unused if:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    NAMING CHECKS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0176106"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0176106"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        else"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!--"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      else if {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      if (true)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return 1; // Not allowed"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"UpperEll\" /\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0176106"
        },
        "content": "       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    ORDER CHECKS"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "E0176106"
        },
        "content": "         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      3. Constructors"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      4. Methods"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           synchronized, native, strictfp"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    WHITESPACE CHECKS"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           by regular or curly braces."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "E0176106"
        },
        "content": "             e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "E0176106"
        },
        "content": "             e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "E0176106"
        },
        "content": "         a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "E0176106"
        },
        "content": "         a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    JAVADOC CHECKS"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks public methods that have more than 1 line of code."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        Single line of code methods are often due to refactor for readability."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that every non-trivial private method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks private methods that have more than 3 lines of code."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        We define methods that have more than 3 lines of code as non-trivial."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"private\"/\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "E0176106": 423
    }
  },
  {
    "path": "config/checkstyle/suppressions.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c?xml version\u003d\"1.0\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c!DOCTYPE suppressions PUBLIC"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\"-//Puppy Crawl//DTD Suppressions 1.1//EN\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\"http://checkstyle.sourceforge.net/dtds/suppressions_1_1.dtd\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003csuppressions\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003csuppress checks\u003d\"JavadocType\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c/suppressions\u003e"
      }
    ],
    "authorContributionMap": {
      "E0176106": 9
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The LeagueTracker provides football league operator with an efficient method of managing the players, teams and matches in the season. It features many ways to keep track of the teams and players playing in the league. The LeagueTracker will help manager have an easier time in keeping track of the current situation in the football league. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Lee Chong Wei Justin"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::e0176106.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty}[http://github.com/E0176106[github]] [\u003c\u003cE0176106#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Role: Integration, Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Responsibilities: Match Schedule Feature"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Hu Yidi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::huyidi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty}[https://github.com/huyidi[github]] [\u003c\u003chuyidi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Role: Documentation, Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Responsibilities: League Feature"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Wang Jiannan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::warheade.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty}[http://github.com/warheade[github]] [\u003c\u003cwarheade#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Role: Team Lead, Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Responsibilities: Player Feature"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Lee Ying Rong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::yingrong1996.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty}[http://github.com/yingrong1996[github]] [\u003c\u003cyingrong1996#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Role: Testing, Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Responsibilities: Team Feature"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huyidi": 46,
      "E0176106": 5
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S2-M11-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "huyidi": 5,
      "E0176106": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d League Tracker - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "By: `CS2113-AY1819S2-M11-1`      Since: ``      Licence: ``"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "The LeagueTracker is a CLI (Command Line Interface) application written in OOP fashion with a very basic GUI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "This application is adapted from AddressBook3. It is created to provide league managers a football league operator with an efficient method of managing the league in the current season. It features many ways to keep track of the teams and players playing in the league. The LeagueTracker will make useful information of the league managed to be more organized and accessible. +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "This Developer Guide provides you useful information regarding setting, coding and testing of League Tracker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the League Tracker."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Given below is a quick overview of each component. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "*Main* has only one class called `Main`. It is responsible for:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* At app launch: Initializing the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* At shut down: Shutting down the components."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "*Logic* is the command executor."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "*Data* Holds the data of the League Tracker in-memory."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": "*Storage* Reads data from, and writes data to the hard disk."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Logic Component"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": " [to be edited]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Data Component"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": " [to be edited]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Storage Component"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": " [to be edited]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Common Classes"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "Classes used by multiple components (eg.Utils.java) are collated in the `seedu.addressbook.common` package."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "(`main` \u003e `src` \u003e `seedu` \u003e `addressbook` \u003e `common`)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huyidi"
        },
        "content": "To set up this project on our computer: +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Run the `seedu.addressbook.Main` and try a few commands"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huyidi"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huyidi"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "warheade"
        },
        "content": "Following AddressBook3, our League Tracker uses AsciiDoc for writing documentation.We choose AsciiDoc as it provides both a human-readable,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "warheade"
        },
        "content": "plain-text writing format as well as a text processor and toolchain that are able to translate AsciiDoc documents into different formats(called backend),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "warheade"
        },
        "content": "including HTML,DocBook and PDF."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "warheade"
        },
        "content": "In your IntelliJ IDE, open `Main` \u003e `docs` \u003e `templates` and select the documentation file (eg. `DeveloperGuide.adoc`) to open and edit."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "warheade"
        },
        "content": "IntelliJ IDE will notify to download the AsciiDoc Plugin. With the plugin, a preview of the documentation will be shown on the screen when the documentation is being"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "warheade"
        },
        "content": "edited for ease of developers."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "warheade"
        },
        "content": "Auto-publishing of documentations has been enabled in League Tracker using Travis CI. A guide of doing so is provided below."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "warheade"
        },
        "content": "1. Ensure that you have set up Travis CI properly for the project."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "warheade"
        },
        "content": "2. On Github, create a new user account give this account collaborator and admin access to the repo."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "warheade"
        },
        "content": "   Using this account, generate a personal access token using this link: https://github.com/settings/tokens/new"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "warheade"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "warheade"
        },
        "content": "Personal access tokens serve as passwords so they must be kept secret to protect your accounts. Delete and regenerate if it is leaked."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "warheade"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "warheade"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "warheade"
        },
        "content": "    If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "warheade"
        },
        "content": "   * Add a description for the token. (e.g. Travis CI - auto-publishing)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "warheade"
        },
        "content": "   * Check the `public repo` checkbox."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "warheade"
        },
        "content": "   * Click `Generate Token` to grant access for Travis CI to the repo of the project."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Generating personal token for auto-publishing on Github"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::generate_token.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huyidi"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "warheade"
        },
        "content": ".  Use asciidoctor to convert AsciiDoc files in docs to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huyidi"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huyidi"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huyidi"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huyidi"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huyidi"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huyidi"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huyidi"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huyidi"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huyidi"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Football League Operators +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Has a need to manage leagues, team and player profiles +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Has a need to collect and view specific data regarding the league, matches, teams and players information in the league  +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Prefer typing over mouse input +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Prefer desktop apps over other type +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "* Reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0176106"
        },
        "content": "*Value proposition*: "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Manage league/team/player faster than a typical mouse/GUI driven app. +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Easy access to records needed."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huyidi"
        },
        "content": "|`* * *` |League Organiser |add, edit and delete players into the records | add new player when they join,delete old player when they retire"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huyidi"
        },
        "content": "|`* * *` |League Organiser |add, edit and delete teams into current league| add new team that move up major league"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|`* * *` |League Organiser |list all teams and player. | See all current teams and player"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huyidi"
        },
        "content": "|`* * *` |League Organiser |see the performance of players in the league | know player\u0027s goals scored and Penalties."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huyidi"
        },
        "content": "|`* * *` |League Organiser |see the teams ranking in league | know which team is currently leading in points"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huyidi"
        },
        "content": "|`* * *` |League Organiser |keep track on the future match up for the playing teams| see the match scheduling"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huyidi"
        },
        "content": "|`* * *` |League Organiser |add, edit and delete matches in current league | edit the match schedule"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huyidi"
        },
        "content": "|`* * *` |League Organiser |see the real-time balancing of income of each team | know the financial condition of each team"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huyidi"
        },
        "content": "|`* *` |League Organiser |see the statistic of each team | know the percentage of winnings, average of fouls per matches of each team"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Quality requirement: The system should be efficient enough for organiser to quickly updat and keep track of the teams playing in the league."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Performance requirements: The system should be able to present the information in an orgainised format as the data could be confusing."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Project scope: The product is developed solely for the use of league organiser."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "warheade"
        },
        "content": ". Computer Environment: The product should work on any mainstream OS as long as it has Java 8 (revision 1.8.0_201 or higher) installed."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "warheade"
        },
        "content": ". UI Justifiability: A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "warheade"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "warheade"
        },
        "content": "(For all use cases below, the System is the League Tracker and the Actor is the user, unless specified otherwise)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use Case: Add Player"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User requests to add a specific player in the League"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User specify the following detail:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "warheade"
        },
        "content": "  Name, Position Played, Age, Gender, Goals Scored, Goals Assisted, Team, Country,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "warheade"
        },
        "content": "Jersey Number, Appearance,HealthStatus"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System adds the person."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If successful, a message will be shown and a new player is added"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If not successful, a message specifying reason for failure will be shown and command list"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "warheade"
        },
        "content": "  will be printed"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use Case: Delete Player"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "warheade"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) User requests to list all players in the league"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) System shows a list of players"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User requests to delete a specific player in the list"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User specify the following detail:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "warheade"
        },
        "content": "  Name, Team,Jersey Number"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System adds the person."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If successful, a message will be shown and the player is deleted"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If not successful, a message specifying reason for failure will be shown and command list"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "warheade"
        },
        "content": "  will be printed"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use Case: Transfer Player"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "warheade"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) User requests to list all players in the league"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) System shows a list of players"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User requests to transfer a specific player in the list"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User specify the following detail:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "warheade"
        },
        "content": "  Name,Team,Jersey Number,Original Team,Destination Team"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System transfers the player."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If successful, a message will be shown and the player\u0027s details as well as details for teams will"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "warheade"
        },
        "content": "  be updated."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If not successful, a message specifying reason for failure will be shown and command list"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "warheade"
        },
        "content": "  will be printed"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use Case: Edit Player"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "warheade"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) User requests to list all players in the league"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) System shows a list of players"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User requests to edit a specific player in the list"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User first specifies the name, team and Jersey Number of the player"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System returns a message of whether the player exists"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If the player exists, a \"Please enter new details\" Message will be shown by system to ask for"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "warheade"
        },
        "content": "  input. Otherwise, a PlayerNotFound exception Message will be printed followed by the list of commands"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "warheade"
        },
        "content": ". Assume the player exists, user then specifies the following detail to be reflected in the new profile:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "warheade"
        },
        "content": "  Name,Team,Jersey Number,Original Team,Destination Team"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System updates the player."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If successful, a message will be shown and the player\u0027s details will"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "warheade"
        },
        "content": "  be updated."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If not successful, a message specifying reason for failure will be shown and command list"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "warheade"
        },
        "content": "  will be printed"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "warheade"
        },
        "content": "+"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "warheade"
        },
        "content": "*League*: a group of football teams which play each other over a period for a championship."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "warheade"
        },
        "content": "*Transfer*: the action taken whenever a player under contract moves between clubs. It refers to the transferring of a player\u0027s registration from one association football club to another."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::transfer.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "warheade"
        },
        "content": "*Jersey Number*: a number allocated to each player in a team to uniquely identify the player. Jersey Numbers usually range from 1 to 35 and will be printed at the back"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "warheade"
        },
        "content": "                 of players\u0027 jerseys during matches for identification purposes."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "warheade"
        },
        "content": "*Mainstream OS*: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huyidi": 88,
      "warheade": 119,
      "yingrong1996": 109,
      "-": 66,
      "E0176106": 8
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d League Tracker - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Welcome to the League Tracker User Guide! You can choose a topic below to find out how to use our product."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "By: `CS2113-AY1819S2-M11-1`\tSince: `Jan 2019`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The League Tracker is an application that provides you with an efficient method of managing information of a football league. It features easy access and modification of information of teams and players in the league. The League Tracker will help you in keeping track of the current situation in a football league."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "This User Guide provides information on the League Tracker installation process and commands of each feature. To get started, you can go to the Quick Start section."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".  Ensure that you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": ".  Download the latest `LeagueTracker.jar` (coming soon)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your League Tracker System."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": ".  Double-click the file to start the application. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::UiCommandBox.png[]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Viewing Help"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can view the information of all commands in the League Tracker by using the Help command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Help is also shown if you enter an incorrect command e.g. `abcd`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The League Tracker has four main features: player feature, team feature,  match feature and finance feature. These features will help you to manage useful information of your league more conveniently and effectively."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Players"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The players feature in the application helps you to manage information of players in the league. +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Add Player*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huyidi"
        },
        "content": "You can use the Add Player command to add a new player to the League Tracker. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Format ：`AddPlayer NAME POSITION AGE GENDER PENALTY GOALSSCORED GOALSASSISTED TEAM RANKINLEAGUE COUNTRY JERSEYNUMBER APPEARANCE HEALTHSTATUS`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "`AddPlayer Lionel_Messi RW 31 Male 0 20 20 FC_Barcelona 1 Argentina 10 20 Healthy`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Delete Player*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huyidi"
        },
        "content": "You can use the Delete Player command to delete an existing player in the League Tracker. +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Format ：`DeletePlayer NAME TEAM`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huyidi"
        },
        "content": "`DeletePlayer Lionel_Messi FC_Barcelona`+"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Display Player Profile*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Display Player Profile command to display the whole profile of a selected player. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format ：`DisplayProfile NAME TEAM`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "`DisplayProfile Lionel_Messi FC_Barcelona`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Edit Player*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huyidi"
        },
        "content": "You can use the Edit Player command to edit information of an existing player in the League Tracker. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Format ：`EditPlayer OLDNAME OLDTEAM POSITION AGE GENDER PENALTY GOALSSCORED GOALSASSISTED TEAM RANKINLEAGUE COUNTRY JERSEYNUMBER APPEARANCE HEALTHSTATUS`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "`EditPlayer Lionel_Messi Real_Madrid RW 31 Male 0 20 20 FC_Barcelona 1 Argentina 10 20 Healthy`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *List All Players*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the List All Player command to see the list of all players in the league. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format ：`ListAllPlayer`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *List Player*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the List Player command to see the list of players in a selected team. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format ：`ListPlayer NameOfTeam` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "`ListPlayer Liverpool`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Teams"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The teams feature in the application helps you to manage information of football teams in the league. "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Add Team*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Add Team command to add a new team to the League Tracker. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `AddTeam NAME c/COUNTRY g/GOAL SCORED p/POINTS`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huyidi"
        },
        "content": " `AddTeam Liverpool c/United Kingdom g/64 p/70` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Adds a new team with the specified details."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Delete Team*"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Delete Team command to delete an existing team from League Tracker. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `DelTeam INDEX`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `ListTeam` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `DelTeam 1` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Deletes the 1st team in the team list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Edit Team*"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Edit Team command to edit information of a team in League Tracker. +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `EditTeam INDEX [c/COUNTRY] [g/GOAL SCORED] [p/POINTS]`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `ListTeam` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `EditTeam 1 c/Singapore` +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Edits the country of the 1st team in the team list to Singapore."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *List Team*"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the list Team command to see the list of all current teams in the league. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `ListTeam`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Matches"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The Match Schedule Feature in the application helps you to manage information of matches in the league. "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Add Matches*"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Add Matches command to add a new match to the League Tracker. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `AddMatch dd/mm/yyyy h/hometeam a/awayteam`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0176106"
        },
        "content": " `AddMatch 28/02/2019 h/Fulham a/Chelsea` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huyidi"
        },
        "content": " "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Adds a new match with the specified details."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Delete Matches*"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Delete Matches command to delete an existing match from League Tracker. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `DeleteMatch INDEX`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `ListMatches` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `DeleteMatch 1` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Deletes the 1st match in the match list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *List Matches*"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the List Matches command to see the list of all matches in the current league. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `ListMatches`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Finance"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The Finance Feature in the application helps you to manage and keep track of financial conditions in the league."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Get League Finance*"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Get League Finance command to view the total financial income in USD of the league. +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `GetLeagueFinance`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0176106"
        },
        "content": "`GetLeagueFinance`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Get Team Finance*"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Get Team Finance command to view the financial condition in USD of a selected team in League Tracker. +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `GetTeamFinance INDEX`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `ListTeam` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `GetTeamFinance 1`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *List Team Finance*"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the List Team Finance command to view the list of financial condition in USD of all Teams in the league. +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `ListTeamFinance`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "E0176106"
        },
        "content": "`ListTeamFinance` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Exiting the program"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Exit command to exit the program. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0176106"
        },
        "content": "League tracker data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huyidi"
        },
        "content": "You do not need to save data manually. League tracker data are saved in a file called `leaguetracker.txt` in the project root folder."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0176106"
        },
        "content": "*Q: How do I transfer my data to another Computer?* +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "E0176106"
        },
        "content": "A: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous LeagueTracker folder."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Players"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Add a Player to League : `AddPlayer` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Delete a Player from League : `DeletePlayer` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Display a Player\u0027s Profile : `DisplayProfile` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Edit a Player\u0027s Profile : `EditPlayer` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "E0176106"
        },
        "content": "List all Players in the league : `ListAllPlayer` +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "E0176106"
        },
        "content": "List Players in a Team : `ListPlayer`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Teams"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Add Team to League : `AddTeam` +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Delete Team from League : `DelTeam` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Edit Team\u0027s Profile : `EditTeam` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "E0176106"
        },
        "content": "List Team in League : `ListTeam`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Match Schedule"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Add Match to League : `AddMatch` +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Delete Match from League : `DeleteMatch` +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "E0176106"
        },
        "content": "List Matches in League : `ListMatches`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Finance"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Get League Finance : `GetLeagueFinance` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Get Team Finance : `GetTeamFinance` +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "E0176106"
        },
        "content": "List Team Finance : `ListTeamFinance`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huyidi": 21,
      "E0176106": 184,
      "-": 81
    }
  },
  {
    "path": "src/seedu/addressbook/Main.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.ui.Gui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.ui.Stoppable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Main entry point to the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application implements Stoppable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Version info of the program. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String VERSION \u003d \"League Tracker - Version 1.2\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Gui gui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        gui \u003d new Gui(new Logic(), VERSION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        gui.start(primaryStage, this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super.stop();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 2,
      "-": 37
    }
  },
  {
    "path": "src/seedu/addressbook/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Adds a player to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a player to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Contact details can be marked private by prepending \u0027p\u0027 to the prefix.\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: NAME [p]p/PHONE [p]e/EMAIL [p]a/ADDRESS  [t/TAG]...\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" John Doe p/98765432 e/johnd@gmail.com a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New player added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This player already exists in the address book\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(String name,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                      String phone, boolean isPhonePrivate,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                      String email, boolean isEmailPrivate,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                      String address, boolean isAddressPrivate,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                      Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toAdd \u003d new Person("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                new Name(name),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(phone, isPhonePrivate),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(email, isEmailPrivate),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(address, isAddressPrivate),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                tagSet"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person toAdd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyPerson getPerson() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (UniquePersonList.DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 11,
      "-": 64
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Clears the player list in address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clear persons in address book permanently.\\n\\t\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Person list has been cleared!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        addressBook.clearPerson();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 1,
      "-": 15,
      "E0176106": 3
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import static seedu.addressbook.ui.Gui.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook addressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    protected List\u003c? extends ReadOnlyMatch\u003e relevantMatches;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    protected List\u003c? extends ReadOnlyTeam\u003e relevantTeams;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    protected List\u003c? extends ReadOnlyFinance\u003e relevantFinances;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @param targetIndex last visible listing index of the target player"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command(int targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setTargetIndex(targetIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of persons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param personsDisplayed used to generate summary"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return summary message for persons displayed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getMessageForPersonListShownSummary(List\u003c? extends ReadOnlyPerson\u003e personsDisplayed) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, personsDisplayed.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of Matches."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static String getMessageForMatchListShownSummary(List\u003c? extends ReadOnlyMatch\u003e matchesDisplayed) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return String.format(Messages.MESSAGE_MATCHES_LISTED_OVERVIEW, matchesDisplayed.size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of Teams."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static String getMessageForTeamListShownSummary(List\u003c? extends ReadOnlyTeam\u003e teamsDisplayed) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return String.format(Messages.MESSAGE_TEAMS_LISTED_OVERVIEW, teamsDisplayed.size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static String getMessageForFinanceListShownSummary(List\u003c? extends ReadOnlyFinance\u003e financesDisplayed) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return String.format(Messages.MESSAGE_FINANCES_LISTED_OVERVIEW, financesDisplayed.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new UnsupportedOperationException(\"This method should be implement in child classes\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    //Note: it is better to make the execute() method abstract, by replacing the above method with the line below:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //public abstract CommandResult execute();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Supplies the data the command will operate on."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setData(AddressBook addressBook,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                        List\u003c? extends ReadOnlyPerson\u003e relevantPersons,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                        List\u003c? extends ReadOnlyTeam\u003e relevantTeams,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                        List\u003c? extends ReadOnlyMatch\u003e relevantMatches,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                        List\u003c? extends ReadOnlyFinance\u003e relevantFinances) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.relevantTeams \u003d relevantTeams;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.relevantMatches \u003d relevantMatches;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.relevantFinances \u003d relevantFinances;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Extracts the the target player in the last shown list from the given arguments."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    protected ReadOnlyPerson getTargetPerson() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return relevantPersons.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    protected ReadOnlyMatch getTargetMatch() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return relevantMatches.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    protected ReadOnlyTeam getTargetTeam() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return relevantTeams.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    protected ReadOnlyFinance getTargetFinance() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return relevantFinances.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTargetIndex(int targetIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 13,
      "yingrong1996": 20,
      "-": 68,
      "E0176106": 17
    }
  },
  {
    "path": "src/seedu/addressbook/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The feedback message to be shown to the user. Contains a description of the execution result */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The list of persons that was produced by the command */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /** The list of teams that was produced by the command */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final List\u003c? extends ReadOnlyTeam\u003e relevantTeams;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /** The list of matches that was produced by the command */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final List\u003c? extends ReadOnlyMatch\u003e relevantMatches;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /** The list of finances that was produced by the command */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private final List\u003c? extends ReadOnlyFinance\u003e relevantFinances;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /** Constructor for result which do not return any list*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        relevantPersons \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        relevantTeams \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        relevantMatches \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        relevantFinances \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult(String feedbackToUser,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                         List\u003c? extends ReadOnlyPerson\u003e relevantPersons,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                         List\u003c? extends ReadOnlyTeam\u003e relevantTeams,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                         List\u003c? extends ReadOnlyMatch\u003e relevantMatches,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                         List\u003c? extends ReadOnlyFinance\u003e relevantFinances) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.relevantTeams \u003d relevantTeams;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.relevantMatches \u003d relevantMatches;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.relevantFinances \u003d relevantFinances;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns list of persons relevant to the command command result, if any."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e getRelevantPersons() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.ofNullable(relevantPersons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns list of matches relevant to the command command result, if any."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyMatch\u003e\u003e getRelevantMatches() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Optional.ofNullable(relevantMatches);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns list of teams relevant to the command command result, if any."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyTeam\u003e\u003e getRelevantTeams() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Optional.ofNullable(relevantTeams);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Returns list of finances relevant to the command command result, if any."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyFinance\u003e\u003e getRelevantFinances() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return Optional.ofNullable(relevantFinances);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 15,
      "yingrong1996": 19,
      "-": 34,
      "E0176106": 13
    }
  },
  {
    "path": "src/seedu/addressbook/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Deletes a player identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Deletes the player identified by the index number used in the last player listing.\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetPerson();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.removePerson(target);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, target));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 4,
      "-": 38
    }
  },
  {
    "path": "src/seedu/addressbook/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e personsFound \u003d getPersonsWithNameContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(personsFound), personsFound, null, null, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieve all persons in the address book whose names contain some of the specified keywords."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of persons found"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cReadOnlyPerson\u003e getPersonsWithNameContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e matchedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(person.getName().getWordsInName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                matchedPersons.add(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return matchedPersons;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 1,
      "yingrong1996": 6,
      "-": 53
    }
  },
  {
    "path": "src/seedu/addressbook/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.FinanceCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.ListFinanceCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.AddMatchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.ClearMatchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.DeleteMatchCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.FindMatchCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.ListMatchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.AddTeam;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.ClearTeam;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.DeleteTeam;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.EditTeam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.FindTeam;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.ListTeam;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows program usage instructions.\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ALL_USAGES \u003d AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + SortCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + AddTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + EditTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + DeleteTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + ClearTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + FindTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + ListTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ViewCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ViewAllCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"\\n\" + FinanceCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"\\n\" + ListFinanceCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + AddMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + DeleteMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + ClearMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + FindMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + ListMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ExitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 4,
      "yingrong1996": 18,
      "-": 28,
      "E0176106": 5
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Displays all persons in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyPerson\u003e allPersons \u003d addressBook.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(allPersons), allPersons, null, null, null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 1,
      "yingrong1996": 1,
      "-": 22
    }
  },
  {
    "path": "src/seedu/addressbook/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Sorts all persons in the address book to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Sorts all persons in the address book in ascending alphabetical order.\\n\\t\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been sorted!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        addressBook.sort();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 23
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ViewAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Shows all details of the player identified using the last displayed index."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Private contact details are shown."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewAllCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewall\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows all details of the player \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"identified by the index number in the last shown player listing.\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_VIEW_PERSON_DETAILS \u003d \"Viewing player: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewAllCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetPerson();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBook.containsPerson(target)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_PERSON_DETAILS, target.getAsTextShowAll()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 5,
      "-": 35
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ViewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Shows details of the player identified using the last displayed index."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Private contact details are not shown."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows the non-private details of the player \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"identified by the index number in the last shown player listing.\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_VIEW_PERSON_DETAILS \u003d \"Viewing player: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetPerson();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBook.containsPerson(target)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_PERSON_DETAILS, target.getAsTextHidePrivate()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 5,
      "-": 36
    }
  },
  {
    "path": "src/seedu/addressbook/commands/finance/FinanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.commands.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.Finance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * check the financial profit in USD of a team identified using it\u0027s last displayed index from the League."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class FinanceCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"finance\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Checks the financial condition of a team identified using its last displayed index from the League.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Finance of the team selected:\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public FinanceCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            final ReadOnlyTeam target \u003d getTargetTeam();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            Finance finance \u003d new Finance(target);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            double money \u003d finance.getFinance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            String histogramString \u003d finance.getHistogramString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + \" \" + money + \":\\n\" + histogramString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 44
    }
  },
  {
    "path": "src/seedu/addressbook/commands/finance/ListFinanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.commands.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.UniqueFinanceList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * Lists all finances."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class ListFinanceCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listFinance\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Displays all Finances in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_FINANCE_REFRESH_PROBLEM \u003d \"invalid command due to finance refresh problem\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            addressBook.refreshFinance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } catch (UniqueFinanceList.DuplicateFinanceException dfe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new CommandResult(MESSAGE_FINANCE_REFRESH_PROBLEM);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        List\u003cReadOnlyFinance\u003e allFinances \u003d addressBook.getAllFinances().immutableListView();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(getMessageForFinanceListShownSummary(allFinances), null, null, null, allFinances);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 35
    }
  },
  {
    "path": "src/seedu/addressbook/commands/match/AddMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.Away;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.Home;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.TicketSales;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Adds a match to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class AddMatchCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addmatch\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a match to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Parameters: DATE h/HOMETEAM a/AWAYTEAM [t/TAG]...\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \" 17 MAR 2019 h/West Ham a/Huddersfield\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New match added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MATCH \u003d \"This match already exists in the address book\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final Match toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AddMatchCommand(String date,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                      String home,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                      String away) throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.toAdd \u003d new Match("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new Date(date),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new Home(home),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new Away(away),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new TicketSales(\"\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new TicketSales(\"\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new HashSet\u003c\u003e(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AddMatchCommand(Match toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public ReadOnlyMatch getMatch() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            addressBook.addMatch(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (UniqueMatchList.DuplicateMatchException dme) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MATCH);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 11,
      "E0176106": 59
    }
  },
  {
    "path": "src/seedu/addressbook/commands/match/ClearMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Clears the match list in address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class ClearMatchCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearmatch\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clear matches in address book permanently.\\n\\t\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"match list has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        addressBook.clearMatch();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 5,
      "E0176106": 17
    }
  },
  {
    "path": "src/seedu/addressbook/commands/match/DeleteMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList.MatchNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Deletes a match identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class DeleteMatchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletematch\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Deletes the match identified by the index number used in the last match listing.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_DELETE_MATCH_SUCCESS \u003d \"Deleted match: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public DeleteMatchCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            final ReadOnlyMatch target \u003d getTargetMatch();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            addressBook.removeMatch(target);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_MATCH_SUCCESS, target));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_MATCH_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (MatchNotFoundException mnfe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_MATCH_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 4,
      "E0176106": 40
    }
  },
  {
    "path": "src/seedu/addressbook/commands/match/FindMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Finds and lists all matches in address book with date that contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class FindMatchCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findmatch\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Finds all matches with date that contains any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" MAR APR JUN\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public FindMatchCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cReadOnlyMatch\u003e matchesFound \u003d getMatchesWithDateContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(getMessageForMatchListShownSummary(matchesFound), null, null, matchesFound, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Retrieve all matches in the address book with date containing some of the specified keywords."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return list of matches found"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cReadOnlyMatch\u003e getMatchesWithDateContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cReadOnlyMatch\u003e matchedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (ReadOnlyMatch match : addressBook.getAllMatches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            final Set\u003cString\u003e wordsInDate \u003d new HashSet\u003c\u003e(match.getDate().getWordsInDate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            if (!Collections.disjoint(wordsInDate, keywords)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                matchedMatches.add(match);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return matchedMatches;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 1,
      "yingrong1996": 11,
      "E0176106": 51
    }
  },
  {
    "path": "src/seedu/addressbook/commands/match/ListMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Lists all matches in the league tracker to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class ListMatchCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listmatch\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Displays all matches in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cReadOnlyMatch\u003e allMatches \u003d addressBook.getAllMatches().immutableListView();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(getMessageForMatchListShownSummary(allMatches), null, null, allMatches, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 1,
      "yingrong1996": 5,
      "E0176106": 20
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/AddTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Country;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Sponsor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Adds a team to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class AddTeam extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTeam\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a team to the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Parameters: NAME c/COUNTRY s/SPONSORSHIP BALANCE [t/TAG]...\\n\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \" Singapore United c/Singapore s/5487 t/Lousy\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New team added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TEAM \u003d \"This team already exists in the address book\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final Team toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AddTeam(String name,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                   String country,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                   String sponsor,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                   Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.toAdd \u003d new Team("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                new Name(name),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                new Country(country),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                new Sponsor(sponsor),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                new HashSet\u003c\u003e(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                tagSet"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AddTeam(Team toAdd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public ReadOnlyTeam getTeam() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            addressBook.addTeam(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (UniqueTeamList.DuplicateTeamException dpe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_TEAM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 74
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/ClearTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Clears the team List."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class ClearTeam extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearTeam\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clears team List permanently.\\n\\t\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"team List has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        addressBook.clearTeam();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 21
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/DeleteTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Deletes a team identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class DeleteTeam extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delTeam\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Deletes the team identified by the index number used in the last team listing.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_DELETE_TEAM_SUCCESS \u003d \"Deleted team: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public DeleteTeam(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final ReadOnlyTeam target \u003d getTargetTeam();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            addressBook.removeTeam(target);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_TEAM_SUCCESS, target));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (UniqueTeamList.TeamNotFoundException tnfe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_TEAM_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 43
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/EditTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Country;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.EditTeamDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Sponsor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Edits a team to the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class EditTeam extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editTeam\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Edits the details of the team identified by the index number used in the displayed team list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"(listTeam must be used before this command to retrieve index for team to be deleted)\\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"[n/NAME]\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"[c/COUNTRY] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"[s/SPONSOR] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"[t/TAGS]\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"c/\" + Country.EXAMPLE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_EDIT_TEAM_SUCCESS \u003d \"Edited team: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_NOARGS \u003d \"At least one field to edit must be provided.\\n%1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final EditTeamDescriptor editTeamDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public EditTeam(int targetVisibleIndex,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    String name,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    String country,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    String sponsor,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.editTeamDescriptor \u003d new EditTeamDescriptor(name, country, sponsor, tagSet);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final ReadOnlyTeam teamToEdit \u003d getTargetTeam();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Team editedTeam \u003d createEditedTeam(teamToEdit, editTeamDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            addressBook.editTeam(teamToEdit, editedTeam);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_TEAM_SUCCESS, editedTeam));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (UniqueTeamList.TeamNotFoundException tnfe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_TEAM_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Creates and returns a team with the details of teamToEdit edited with editTeamDescriptor."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private static Team createEditedTeam(ReadOnlyTeam teamToEdit,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                                         EditTeamDescriptor editTeamDescriptor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Name updatedName \u003d checkName(editTeamDescriptor.getName(), teamToEdit.getName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Country updatedCountry \u003d checkCountry(editTeamDescriptor.getCountry(), teamToEdit.getCountry());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Sponsor updatedSponsor \u003d checkSponsor(editTeamDescriptor.getSponsor(), teamToEdit.getSponsor());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Set\u003cTag\u003e updatedTagset \u003d checkTagset(editTeamDescriptor.getTags(), teamToEdit.getTags());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new Team(updatedName, updatedCountry, updatedSponsor, teamToEdit.getPlayers(), updatedTagset);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Check for new name value."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private static Name checkName(Name newEdit, Name oldInfo) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (newEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return oldInfo;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return newEdit;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Check for new Country value."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private static Country checkCountry(Country newEdit, Country oldInfo) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (newEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return oldInfo;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return newEdit;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Check for new Sponsor value."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private static Sponsor checkSponsor(Sponsor newEdit, Sponsor oldInfo) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (newEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return oldInfo;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return newEdit;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Check for new address value."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private static Set\u003cTag\u003e checkTagset(Set\u003cTag\u003e newEdit, Set\u003cTag\u003e oldInfo) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (newEdit.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return oldInfo;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return newEdit;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 132
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/FindTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Finds and lists all teams in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class FindTeam extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findTeam\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Finds all teams whose names contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" United\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public FindTeam(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cReadOnlyTeam\u003e teamsFound \u003d getTeamsWithNameContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(getMessageForTeamListShownSummary(teamsFound), null, teamsFound, null, null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Retrieve all teams in the address book whose names contain some of the specified keywords."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003cReadOnlyTeam\u003e getTeamsWithNameContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cReadOnlyTeam\u003e matchedTeams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (ReadOnlyTeam team : addressBook.getAllTeams()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(team.getName().getWordsInName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                matchedTeams.add(team);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return matchedTeams;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 1,
      "yingrong1996": 60
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/ListTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * List all teams"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class ListTeam extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listTeam\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Displays all Teams in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cReadOnlyTeam\u003e allTeams \u003d addressBook.getAllTeams().immutableListView();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(getMessageForTeamListShownSummary(allTeams), null, allTeams, null, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 1,
      "yingrong1996": 25
    }
  },
  {
    "path": "src/seedu/addressbook/common/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The player index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_IN_ADDRESSBOOK \u003d \"Person could not be found in address book\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_INVALID_MATCH_DISPLAYED_INDEX \u003d \"The match index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_MATCH_NOT_IN_ADDRESSBOOK \u003d \"match could not be found in address book\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_MATCHES_LISTED_OVERVIEW \u003d \"%1$d matches listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_INVALID_TEAM_DISPLAYED_INDEX \u003d \"The team index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_TEAM_NOT_IN_ADDRESSBOOK \u003d \"team could not be found in address book\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_TEAMS_LISTED_OVERVIEW \u003d \"%1$d teams listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_FINANCES_LISTED_OVERVIEW \u003d \"%1$d finances listed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE \u003d \"Launch command format: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"java seedu.addressbook.Main [STORAGE_FILE_PATH]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Welcome to your League Tracker!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USING_STORAGE_FILE \u003d \"Using storage file : %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 1,
      "yingrong1996": 8,
      "-": 12,
      "E0176106": 2
    }
  },
  {
    "path": "src/seedu/addressbook/data/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.Finance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.UniqueFinanceList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList.DuplicateMatchException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList.MatchNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.UniquePersonList.DuplicatePersonException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the entire address book. Contains the data of the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList allPersons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final UniqueTeamList allTeams;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final UniqueMatchList allMatches;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private final UniqueFinanceList allFinances;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allMatches \u003d new UniqueMatchList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allTeams \u003d new UniqueTeamList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        allFinances \u003d new UniqueFinanceList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an address book with the given data."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons external changes to this will not affect this address book"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param matches external changes to this will not affect this address book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AddressBook(UniquePersonList persons,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                       UniqueTeamList teams,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                       UniqueMatchList matches,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                       UniqueFinanceList finances) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allPersons \u003d new UniquePersonList(persons);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.allTeams \u003d new UniqueTeamList(teams);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.allMatches \u003d new UniqueMatchList(matches);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.allFinances \u003d new UniqueFinanceList(finances);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static AddressBook empty() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Adds a player to the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent player already exists."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.add(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Adds a team to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void addTeam(Team toAdd) throws UniqueTeamList.DuplicateTeamException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allTeams.add(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Adds a match to the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws DuplicateMatchException if an equivalent match already exists."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void addMatch(Match toAdd) throws DuplicateMatchException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allMatches.add(toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if an equivalent player exists in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsPerson(ReadOnlyPerson key) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.contains(key);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if an equivalent team exists in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean containsTeam(ReadOnlyTeam key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return allTeams.contains(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Checks if an equivalent match exists in the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean containsMatch(ReadOnlyMatch key) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return allMatches.contains(key);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Removes the equivalent player from the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such Person could be found."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.remove(toRemove);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Removes the equivalent match from the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @throws MatchNotFoundException if no such match could be found."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void removeMatch(ReadOnlyMatch toRemove) throws MatchNotFoundException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allMatches.remove(toRemove);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Clears all matches from the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void clearMatch() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allMatches.clear();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Removes the equivalent team from the address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void removeTeam(ReadOnlyTeam toRemove) throws UniqueTeamList.TeamNotFoundException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allTeams.remove(toRemove);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Sorts all persons from the address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allPersons.sort();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons from the address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void clearPerson() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.clear();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Clears all teams from the address book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void clearTeam() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allTeams.clear();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Edits the equivalent player from League Tracker"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void editTeam(ReadOnlyTeam toRemove, Team toReplace) throws UniqueTeamList.TeamNotFoundException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allTeams.edit(toRemove, toReplace);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Defensively copied UniquePersonList of all persons in the address book at the time of the call."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList getAllPersons() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniquePersonList(allPersons);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Defensively copied UniqueMatchList of all matches in the address book at the time of the call."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList getAllMatches() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new UniqueMatchList(allMatches);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Defensively copied UniqueTeamList of all matches in the address book at the time of the call."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList getAllTeams() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new UniqueTeamList(allTeams);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Defensively copied UniqueFinanceList of all finances in the address book at the time of the call."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public UniqueFinanceList getAllFinances() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new UniqueFinanceList(allFinances);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Refresh all finances to match all existing teams in the address book at the time of the call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void refreshFinance() throws UniqueFinanceList.DuplicateFinanceException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        allFinances.clear();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (ReadOnlyTeam aTeam : allTeams.immutableListView()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            allFinances.add(new Finance(aTeam));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.allPersons.equals(((AddressBook) other).allPersons));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.hashCode();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 24,
      "yingrong1996": 66,
      "-": 78,
      "E0176106": 47
    }
  },
  {
    "path": "src/seedu/addressbook/data/finance/Finance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.data.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.team.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.team.Sponsor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents Financial condition for a team in the League."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class Finance implements ReadOnlyFinance {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final int NUMBER_OF_QUARTER \u003d 4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private String teamName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double sponsorMoney \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double venueCost \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    //private double playerSalary \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double ticketIncome \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double quarterOne \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double quarterTwo \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double quarterThree \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double quarterFour \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private Histogram histogram;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public Finance(ReadOnlyTeam team) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Name name \u003d team.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.teamName \u003d name.fullName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Sponsor sponsor \u003d team.getSponsor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        String sponsorString \u003d sponsor.value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.sponsorMoney \u003d Double.valueOf(sponsorString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.histogram \u003d new Histogram(NUMBER_OF_QUARTER, quarterOne, quarterTwo, quarterThree, quarterFour);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * Retrieve all matches in the address book whose homes is the target team\u0027s home."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        //String homeString \u003d teamName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        //final List\u003cReadOnlyMatch\u003e matchesFound \u003d getMatchesWithHome(homeString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * Retrieve ticket price and turnout rate from all matches found."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (ReadOnlyMatch match : matchesOfTeam) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            double price \u003d 1;//match.getPrice();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            double turnout \u003d 2;//match.getTurnout();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            double ticketBox \u003d price * turnout;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            ticketIncome +\u003d ticketBox;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * wait for variables from other class"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         *Sponsor sponsorSponsor \u003d team.getSponsor();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "          *String venueCostString \u003d sponsorSponsor.value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         *this.venueCost \u003d Double.valueOf(venueCostString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Sponsor sponsorSponsor \u003d team.getSponsor();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * String playerSalaryString \u003d sponsorSponsor.value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * this.playerSalary \u003d Double.valueOf(playerSalaryString);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getFinance() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double money;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        money \u003d sponsorMoney - venueCost + ticketIncome;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return money;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public String getTeamName() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return teamName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getSponsor() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return sponsorMoney;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getVenueCost() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return venueCost;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getTicketIncome() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return ticketIncome;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                || (other instanceof ReadOnlyFinance // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyFinance) other));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public String getHistogramString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return histogram.getHistogramString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 105,
      "yingrong1996": 11
    }
  },
  {
    "path": "src/seedu/addressbook/data/finance/Histogram.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.data.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * build histogram of finance value."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class Histogram {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final int LENGTH \u003d 10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final int WIDTH \u003d 10;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private int numberOfColumn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double heightOne;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double heightTwo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double heightThree;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double heightFour;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public Histogram (int numberOfColumn, double heightOne, double heightTwo, double heightThree, double heightFour) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.numberOfColumn \u003d numberOfColumn;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.heightOne \u003d heightOne;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.heightTwo \u003d heightTwo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.heightThree \u003d heightThree;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.heightFour \u003d heightFour;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public String getHistogramString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        //final String HORIZONTAL_LINE \u003d \"____\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        //final String VERTICAL_LINE \u003d \"|\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        //final String EMPTY_SPACE \u003d \"    \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        //final int LENGTH \u003d 10;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        //final int WIDTH \u003d 10;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        int x \u003d numberOfColumn;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double yOne \u003d heightOne;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double yTwo \u003d heightTwo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double yThree \u003d heightThree;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double yFour \u003d heightFour;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        String resultString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        String[][] twoDString \u003d new String[LENGTH][WIDTH];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (int i \u003d 0; i \u003c LENGTH; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            for (int j \u003d 0; j \u003c WIDTH; j++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                if (j \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d \"|\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else if (j \u003d\u003d 9) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else if (i \u003d\u003d 9) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d \"____\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d \"    \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (String[] s1 : twoDString) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            for (String s2 : s1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                sb.append(s2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        resultString \u003d sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return resultString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 66
    }
  },
  {
    "path": "src/seedu/addressbook/data/finance/ReadOnlyFinance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.data.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * A read-only immutable interface for a finance in the league."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public interface ReadOnlyFinance {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    String getTeamName();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    double getSponsor();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    double getVenueCost();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    double getTicketIncome();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    double getFinance();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    String getHistogramString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyFinance other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                \u0026\u0026 other.getTeamName().equals(this.getTeamName()) // state checks here onwards"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                \u0026\u0026 other.getSponsor() \u003d\u003d this.getSponsor()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                \u0026\u0026 other.getVenueCost() \u003d\u003d this.getVenueCost()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                \u0026\u0026 other.getTicketIncome() \u003d\u003d this.getTicketIncome()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                \u0026\u0026 other.getFinance() \u003d\u003d this.getFinance());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        builder.append(getTeamName().trim())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                .append(\" | Finance: USD\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        builder.append(getFinance());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 39
    }
  },
  {
    "path": "src/seedu/addressbook/data/finance/UniqueFinanceList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.data.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * A list of matches. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class UniqueFinanceList implements Iterable\u003cFinance\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static class DuplicateFinanceException extends DuplicateDataException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        protected DuplicateFinanceException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            super(\"Operation would result in duplicate Finance\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Signals that an operation targeting a specified finance in the list would fail because"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * there is no such matching finance in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static class FinanceNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private final List\u003cFinance\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Constructs empty finance list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public UniqueFinanceList() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Constructs a finance list with the given Finances."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public UniqueFinanceList(Finance...finances) throws UniqueFinanceList.DuplicateFinanceException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final List\u003cFinance\u003e initialTags \u003d Arrays.asList(finances);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            throw new UniqueFinanceList.DuplicateFinanceException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public UniqueFinanceList(Collection\u003cFinance\u003e finances) throws UniqueFinanceList.DuplicateFinanceException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        if (!Utils.elementsAreUnique(finances)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            throw new UniqueFinanceList.DuplicateFinanceException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        internalList.addAll(finances);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public UniqueFinanceList(UniqueFinanceList source) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public List\u003cReadOnlyFinance\u003e immutableListView() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Checks if the list contains an equivalent finance as the given argument."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public boolean contains(ReadOnlyFinance toCheck) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Adds a finance to the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void add(Finance toAdd) throws UniqueFinanceList.DuplicateFinanceException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            throw new UniqueFinanceList.DuplicateFinanceException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Removes the equivalent finance from the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void remove(ReadOnlyFinance toRemove) throws UniqueFinanceList.FinanceNotFoundException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final boolean financeFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        if (!financeFoundAndDeleted) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            throw new UniqueFinanceList.FinanceNotFoundException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Clears all Finances in list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Sort all Finances in list by (to be edited)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Comparator\u003cFinance\u003e customTeamCompare \u003d Comparator.comparing(Team::getName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Collections.sort(internalList, customTeamCompare);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Removes the equivalent finance from the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void edit(ReadOnlyFinance toRemove, Finance toReplace) throws UniqueFinanceList.FinanceNotFoundException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final boolean financeFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        if (!financeFoundAndDeleted) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            throw new UniqueFinanceList.FinanceNotFoundException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        internalList.add(toReplace);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public Iterator\u003cFinance\u003e iterator() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                || (other instanceof UniqueFinanceList // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueFinanceList) other).internalList));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 150
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/Away.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a match away team in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAway(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class Away {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String EXAMPLE \u003d \"Huddersfield\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_AWAY_CONSTRAINTS \u003d \"match away teams\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String AWAY_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public final String fullAway;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Validates given away team."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if given away team string is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Away(String away) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        away \u003d away.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!isValidAway(away)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new IllegalValueException(MESSAGE_AWAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.fullAway \u003d away;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns true if a given string is a valid match away team."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static boolean isValidAway(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return test.matches(AWAY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Retrieves a listing of every word in the away team, in order."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cString\u003e getWordsInAway() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Arrays.asList(fullAway.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullAway;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof Away // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.fullAway.equals(((Away) other).fullAway)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullAway.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 5,
      "E0176106": 59
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a match date in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String EXAMPLE \u003d \"17 MAR 2019\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"match dates should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public final String fullDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Validates given date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if given date string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Date(String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        date \u003d date.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!isValidDate(date)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new IllegalValueException(MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.fullDate \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns true if a given string is a valid match date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return test.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Retrieves a listing of every word in the date, in order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cString\u003e getWordsInDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Arrays.asList(fullDate.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.fullDate.equals(((Date) other).fullDate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullDate.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 4,
      "E0176106": 60
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/Home.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a match home team in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHome(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class Home {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String EXAMPLE \u003d \"West Ham\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_HOME_CONSTRAINTS \u003d \"match home teams\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String HOME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public final String fullHome;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Validates given home team."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if given home team string is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Home(String home) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        home \u003d home.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!isValidHome(home)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new IllegalValueException(MESSAGE_HOME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.fullHome \u003d home;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns true if a given string is a valid match home team."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static boolean isValidHome(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return test.matches(HOME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Retrieves a listing of every word in the home team, in order."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cString\u003e getWordsInHome() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Arrays.asList(fullHome.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullHome;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof Home // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.fullHome.equals(((Home) other).fullHome)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullHome.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 5,
      "E0176106": 60
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/Match.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.player.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a match in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class Match implements ReadOnlyMatch {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Home home;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Away away;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private TicketSales homeSales;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private TicketSales awaySales;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final Set\u003cPerson\u003e goalScorers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final Set\u003cPerson\u003e ownGoalScorers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Match(Date date, Home home, Away away, TicketSales homeSales, TicketSales awaySales,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                 Set\u003cPerson\u003e goalScorers, Set\u003cPerson\u003e ownGoalScorers) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.home \u003d home;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.away \u003d away;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.homeSales \u003d homeSales;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.awaySales \u003d awaySales;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.goalScorers.addAll(goalScorers);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.ownGoalScorers.addAll(ownGoalScorers);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Match(ReadOnlyMatch source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this(source.getDate(), source.getHome(), source.getAway(), source.getHomeSales(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                source.getAwaySales(), source.getGoalScorers(), source.getOwnGoalScorers());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Home getHome() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return home;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Away getAway() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return away;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public TicketSales getHomeSales() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return homeSales;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public TicketSales getAwaySales() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return awaySales;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Set\u003cPerson\u003e getGoalScorers() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new HashSet\u003c\u003e(goalScorers);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Set\u003cPerson\u003e getOwnGoalScorers() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new HashSet\u003c\u003e(ownGoalScorers);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Replaces this match\u0027s goalScorers with the goalScorers in {@code replacement}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void setGoalScorers(Set\u003cPerson\u003e replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        goalScorers.clear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        goalScorers.addAll(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void setOwnGoalScorers(Set\u003cPerson\u003e replacement) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        ownGoalScorers.clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        ownGoalScorers.addAll(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof ReadOnlyMatch // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyMatch) other));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Objects.hash(date, home, away, homeSales, awaySales,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                goalScorers, ownGoalScorers);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 1,
      "E0176106": 111
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/ReadOnlyMatch.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.player.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * A read-only immutable interface for a match in the addressbook."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public interface ReadOnlyMatch {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    Date getDate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    Home getHome();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    Away getAway();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    TicketSales getHomeSales();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    TicketSales getAwaySales();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * The returned {@code Set} is a deep copy of the internal {@code Set},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * changes on the returned list will not affect the match\u0027s internal tags."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    Set\u003cPerson\u003e getGoalScorers();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    Set\u003cPerson\u003e getOwnGoalScorers();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyMatch other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 other.getDate().equals(this.getDate()) // state checks here onwards"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 other.getHome().equals(this.getHome())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 other.getAway().equals(this.getAway())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 other.getHomeSales().equals(this.getHomeSales())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 other.getAwaySales().equals(this.getAwaySales()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Formats the match as text, showing all match details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        builder.append(getDate())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                .append(\" Home: \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        builder.append(getHome())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                .append(\" Away: \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        builder.append(getAway());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!getHomeSales().value.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            builder.append(\" Home Sales: \")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    .append(getHomeSales());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            builder.append(\" Away Sales: \")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    .append(getAwaySales());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            builder.append(\" Goal Scorers: \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            if (getGoalScorers().isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                builder.append(\"none\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            for (Person goalScorer : getGoalScorers()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                builder.append(goalScorer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            builder.append(\" Own Goals: \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            if (getOwnGoalScorers().isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                builder.append(\"none\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            for (Person ownGoalScorer : getOwnGoalScorers()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                builder.append(ownGoalScorer);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 3,
      "E0176106": 74
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/TicketSales.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Represents a team\u0027s ticket sales of a match in USD in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class TicketSales {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String EXAMPLE \u003d \"500\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_TICKETSALES_CONSTRAINTS \u003d \"Team\u0027s ticket sales in USD\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String TICKETSALES_VALIDATION_REGEX \u003d \"\\\\d*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Validates given ticket sales amount."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public TicketSales(String ticketSales) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        ticketSales \u003d ticketSales.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!isValidTicketSales(ticketSales)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TICKETSALES_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.value \u003d ticketSales;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Checks if a given string is a valid ticket sales amount."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static boolean isValidTicketSales(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return test.matches(TICKETSALES_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof TicketSales // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.value.equals(((TicketSales) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 51
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/UniqueMatchList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * A list of matches. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class UniqueMatchList implements Iterable\u003cMatch\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static class DuplicateMatchException extends DuplicateDataException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        protected DuplicateMatchException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            super(\"Operation would result in duplicate matches\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Signals that an operation targeting a specified match in the list would fail because"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * there is no such matching match in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static class MatchNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final List\u003cMatch\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs empty match list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs a match list with the given matches."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList(Match... matches) throws DuplicateMatchException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cMatch\u003e initialTags \u003d Arrays.asList(matches);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new DuplicateMatchException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param matches a collection of matches"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws DuplicateMatchException if the {@code matches} contains duplicate matches"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList(Collection\u003cMatch\u003e matches) throws DuplicateMatchException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!Utils.elementsAreUnique(matches)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new DuplicateMatchException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.addAll(matches);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList(UniqueMatchList source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyMatch}s."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cReadOnlyMatch\u003e immutableListView() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Checks if the list contains an equivalent match as the given argument."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean contains(ReadOnlyMatch toCheck) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Adds a match to the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws DuplicateMatchException if the match to add is a duplicate of an existing match in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void add(Match toAdd) throws DuplicateMatchException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new DuplicateMatchException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Removes the equivalent match from the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws MatchNotFoundException if no such match could be found in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void remove(ReadOnlyMatch toRemove) throws MatchNotFoundException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final boolean matchFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!matchFoundAndDeleted) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new MatchNotFoundException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Clears all matches in list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Iterator\u003cMatch\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof UniqueMatchList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueMatchList) other).internalList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 10,
      "E0176106": 124
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"123, some street\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d \"Person addresses can be in any format\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \".+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given address."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given address string is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address, boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidAddress(address)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if a given string is a valid player email."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 2,
      "-": 56
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Age.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Represents a player\u0027s age in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(int)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final int EXAMPLE \u003d 20;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_AGE_CONSTRAINTS \u003d \"Age of a player must be an integer\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final int fullAge;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given age."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given age integer is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Age (int age) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidAge(age)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullAge \u003d age;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid age."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidAge(int test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return (test \u003e 0 \u0026\u0026 test \u003c 100);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 35,
      "yingrong1996": 1
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Appearance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents number of appearances a player made in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Appearance {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final int EXAMPLE \u003d 30;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_APPEARANCE_CONSTRAINTS \u003d \"No. of appearance of a player must be an integer\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final int fullAppearance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given appearance number."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given Number of Appearance integer is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Appearance (int appearance) throws IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidApp(appearance)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_APPEARANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.fullAppearance \u003d appearance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given integer is a valid jersey number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidApp(int test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return (test \u003e 0 \u0026\u0026 test \u003c 35);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 26,
      "yingrong1996": 9
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Country.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents country of a player made in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Country {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 5,
      "yingrong1996": 4
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"valid@e.mail\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d \"[\\\\w\\\\.]+@[\\\\w\\\\.]+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given email."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given email address string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email, boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d email.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidEmail(email)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if a given string is a valid player email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 2,
      "-": 59
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents gender of a player made in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"Male\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_GENDER_CONSTRAINTS \u003d \"Player\u0027s Gender\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String fullGender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given gender."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given gender string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Gender (String gender) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        gender \u003d gender.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidGender(gender)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullGender \u003d gender;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid gender."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Retrieves a listing of every word in the Gender, in order."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return Arrays.asList(fullGender.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullGender;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.fullGender.equals(((Gender) other).fullGender)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullGender.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 56,
      "yingrong1996": 7
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/GoalsAssisted.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents goals assisted by a player made in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class GoalsAssisted {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final int EXAMPLE \u003d 10;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_GA_CONSTRAINTS \u003d \"No.of assists for a player must be an integer\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final int fullGa;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given No. of assists."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given assist number integer is invalid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public GoalsAssisted (int ga) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidGa(ga)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_GA_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.fullGa \u003d ga;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given integer is a valid goals assisted number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidGa(int test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return (test \u003e\u003d 0 \u0026\u0026 test \u003c 100);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 26,
      "yingrong1996": 9
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/GoalsScored.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents goals scored by a player made in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class GoalsScored {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final int EXAMPLE \u003d 10;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_GS_CONSTRAINTS \u003d \"No.of goals scored for a player must be an integer\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final int fullGs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given goals scored."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given goals scored integer is invalid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public GoalsScored (int gs) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidGs(gs)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_GS_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.fullGs \u003d gs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given integer is a valid goals scored number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidGs(int test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return (test \u003e\u003d 0 \u0026\u0026 test \u003c 100);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 25,
      "yingrong1996": 9
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/HealthStatus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a player\u0027s health status in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class HealthStatus {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"Healthy\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_HEALTHSTATUS_CONSTRAINTS \u003d \"Player\u0027s Health\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Status should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String HEALTHSTATUS_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final String fullHs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given Health Status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given Health Status string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public HealthStatus (String hs) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        hs \u003d hs.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidHs(hs)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_HEALTHSTATUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.fullHs \u003d hs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid Health Strategy."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidHs(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return test.matches(HEALTHSTATUS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Retrieves a listing of every word in Health Status, in order."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public List\u003cString\u003e getWordsInTeam() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Arrays.asList(fullHs.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return fullHs;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof HealthStatus // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.fullHs.equals(((HealthStatus) other).fullHs)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return fullHs.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 46,
      "yingrong1996": 17
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/JerseyNumber.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a player\u0027s jersey number on the field."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class JerseyNumber {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final int EXAMPLE \u003d 10;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_JN_CONSTRAINTS \u003d \"Jersey Number of a player must be an integer\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final int fullJn;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given jersey number."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given Jersey Number integer is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public JerseyNumber (int jn) throws IllegalValueException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidJn(jn)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_JN_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.fullJn \u003d jn;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given integer is a valid jersey number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidJn(int test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return (test \u003e 0 \u0026\u0026 test \u003c 35);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 26,
      "yingrong1996": 9
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a player\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"John Doe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Person names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidName(name)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if a given string is a valid player name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.asList(fullName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int compareTo(Name name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return this.fullName.compareToIgnoreCase(name.fullName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 10,
      "-": 58
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person implements ReadOnlyPerson {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Replaces this player\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.addAll(replacement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ReadOnlyPerson // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 2,
      "-": 88
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"123456789\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d \"Person phone numbers should only contain numbers\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given phone number."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given phone string is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone, boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d phone.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidPhone(phone)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if a given string is a valid player phone number."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 2,
      "-": 57
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/PositionPlayed.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Represents a player\u0027s Position on the field."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPosition(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class PositionPlayed {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String EXAMPLE \u003d \"Midfielder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_POSITIONPLAYED_CONSTRAINTS \u003d \"Position of a player\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"must be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String POSITIONPLAYED_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String fullPosition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given position."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given position string is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public PositionPlayed (String position, boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidPosition(position)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_POSITIONPLAYED_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullPosition \u003d position;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid position."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidPosition(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return test.matches(POSITIONPLAYED_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "warheade": 39,
      "yingrong1996": 5
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/ReadOnlyPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A read-only immutable interface for a Person in the addressbook."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyPerson {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Phone getPhone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Email getEmail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Address getAddress();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * The returned {@code Set} is a deep copy of the internal {@code Set},"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * changes on the returned list will not affect the player\u0027s internal tags."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyPerson other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getAddress().equals(this.getAddress()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Formats the player as text, showing all contact details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final String detailIsPrivate \u003d \"(private) \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (getPhone().isPrivate()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(detailIsPrivate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getPhone())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (getEmail().isPrivate()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(detailIsPrivate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getEmail())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (getAddress().isPrivate()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(detailIsPrivate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getAddress())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Formats a player as text, showing only non-private contact details."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    default String getAsTextHidePrivate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getPhone().isPrivate()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\" Phone: \").append(getPhone());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getEmail().isPrivate()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\" Email: \").append(getEmail());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getAddress().isPrivate()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\" Address: \").append(getAddress());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 6,
      "-": 81
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Team.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a player\u0027s team in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Team {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"FC Barcelona\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_TEAM_CONSTRAINTS \u003d \"Player\u0027s team names\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String TEAM_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String fullTeam;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Validates given team name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given team name string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Team(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidTeam(name)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TEAM_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullTeam \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid team name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidTeam(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return test.matches(TEAM_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Retrieves a listing of every word in the team name, in order."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public List\u003cString\u003e getWordsInTeam() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return Arrays.asList(fullTeam.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullTeam;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof Team // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.fullTeam.equals(((Team) other).fullTeam)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullTeam.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 55,
      "yingrong1996": 8
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#equals(Object)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class DuplicatePersonException extends DuplicateDataException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        protected DuplicatePersonException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Signals that an operation targeting a specified player in the list would fail because"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * there is no such matching player in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class PersonNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cPerson\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs empty player list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList() {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs a player list with the given persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(Person... persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cPerson\u003e initialTags \u003d Arrays.asList(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons a collection of persons"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the {@code persons} contains duplicate persons"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(Collection\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Utils.elementsAreUnique(persons)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(persons);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(UniquePersonList source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyPerson}s."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e immutableListView() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if the list contains an equivalent player as the given argument."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(ReadOnlyPerson toCheck) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Adds a player to the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @throws DuplicatePersonException if the player to add is a duplicate of an existing player in the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Removes the equivalent player from the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @throws PersonNotFoundException if no such player could be found in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personFoundAndDeleted) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons in list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Sort all persons in list by ascending alphabetical order."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Comparator\u003cPerson\u003e customPersonCompare \u003d Comparator.comparing(Person::getName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Collections.sort(internalList, customPersonCompare);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 26,
      "-": 120
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/Country.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a team\u0027s country in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Country {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String EXAMPLE \u003d \"Singapore\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_COUNTRY_CONSTRAINTS \u003d \"Country names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COUNTRY_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Validates given country names."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Country(String country) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        country \u003d country.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidCountry(country)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new IllegalValueException(MESSAGE_COUNTRY_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.value \u003d country;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if a given string is a valid country names."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidCountry(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return test.matches(COUNTRY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof Country // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.value.equals(((Country) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 51
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/EditTeamDescriptor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Stores the details to edit the team with."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Each non-empty field value will replace the corresponding field value of the team."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class EditTeamDescriptor {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Country country;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Sponsor sponsor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Set\u003cTag\u003e tagset;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public EditTeamDescriptor() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public EditTeamDescriptor(String name,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                              String country,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                              String sponsor,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                              Set\u003cTag\u003e tagset) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.name \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (country \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.country \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.country \u003d new Country(country);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (sponsor \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.sponsor \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.sponsor \u003d new Sponsor(sponsor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (tagset.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.tagset \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.tagset \u003d tagset;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public EditTeamDescriptor(EditTeamDescriptor toCopy) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        setCountry(toCopy.country);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        setSponsor(toCopy.sponsor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        setTags(toCopy.tagset);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setCountry(Country country) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return country;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setSponsor(Sponsor sponsor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.sponsor \u003d sponsor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Sponsor getSponsor() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return sponsor;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tagset) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.tagset \u003d tagset;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return tagset;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!(other instanceof EditTeamDescriptor)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        EditTeamDescriptor e \u003d (EditTeamDescriptor) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return getName().equals(e.getTags())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 getCountry().equals(e.getCountry())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 getSponsor().equals(e.getSponsor())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 114
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a team\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String EXAMPLE \u003d \"Singapore United\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"team names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Name(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidName(name)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.fullName \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if a given string is a valid team name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Arrays.asList(fullName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int compareTo(Name name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return this.fullName.compareToIgnoreCase(name.fullName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 67
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/ReadOnlyTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * A read-only immutable interface for a team in the league tracker."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public interface ReadOnlyTeam {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Country getCountry();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Sponsor getSponsor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Set\u003cPerson\u003e getPlayers();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * changes on the returned list will not affect the team\u0027s internal tags."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyTeam other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 other.getCountry().equals(this.getCountry())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 other.getSponsor().equals(this.getSponsor()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getName().fullName.trim())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Country: \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getCountry().toString().trim())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Sponsorship: USD \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getSponsor().toString().trim())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Tags: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 50
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/Sponsor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a team\u0027s balance of sponsorship in USD in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Sponsor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String EXAMPLE \u003d \"500\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_SPONSOR_CONSTRAINTS \u003d \"team\u0027s Sponsorship in USD\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String SPONSOR_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Validates given sponsorship amount."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Sponsor(String sponsor) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        sponsor \u003d sponsor.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidSponsor(sponsor)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new IllegalValueException(MESSAGE_SPONSOR_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.value \u003d sponsor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if a given string is a valid sponsorship amount."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidSponsor(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return test.matches(SPONSOR_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof Sponsor // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.value.equals(((Sponsor) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 51
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/Team.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a team in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Team implements ReadOnlyTeam {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Country country;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Sponsor sponsor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final Set\u003cPerson\u003e playerlist \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Team(Name name, Country country, Sponsor sponsor, Set\u003cPerson\u003e playerlist, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.sponsor \u003d sponsor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.playerlist.addAll(playerlist);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Team(ReadOnlyTeam source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this(source.getName(), source.getCountry(), source.getSponsor(), source.getPlayers(), source.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Set\u003cPerson\u003e getPlayers() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new HashSet\u003c\u003e(playerlist);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Sponsor getSponsor() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return sponsor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return country;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Replaces this team\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        tags.addAll(replacement);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setPlayers(Set\u003cPerson\u003e replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        playerlist.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        playerlist.addAll(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof ReadOnlyTeam // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyTeam) other));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Objects.hash(name, country, sponsor, playerlist, tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 97
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/UniqueTeamList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * A list of Teams. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class UniqueTeamList implements Iterable\u003cTeam\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static class DuplicateTeamException extends DuplicateDataException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        protected DuplicateTeamException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            super(\"Operation would result in duplicate Teams\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Signals that an operation targeting a specified team in the list would fail because"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * there is no such matching team in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static class TeamNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final List\u003cTeam\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs empty team list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs a team list with the given Teams."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList(Team...teams) throws DuplicateTeamException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cTeam\u003e initialTags \u003d Arrays.asList(teams);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new DuplicateTeamException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList(Collection\u003cTeam\u003e teams) throws DuplicateTeamException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!Utils.elementsAreUnique(teams)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new DuplicateTeamException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.addAll(teams);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList(UniqueTeamList source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public List\u003cReadOnlyTeam\u003e immutableListView() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if the list contains an equivalent team as the given argument."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean contains(ReadOnlyTeam toCheck) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Adds a team to the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void add(Team toAdd) throws DuplicateTeamException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new DuplicateTeamException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Removes the equivalent team from the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void remove(ReadOnlyTeam toRemove) throws TeamNotFoundException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final boolean teamFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!teamFoundAndDeleted) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new TeamNotFoundException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Clears all Teams in list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Sort all Teams in list by ascending alphabetical order."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Comparator\u003cTeam\u003e customTeamCompare \u003d Comparator.comparing(Team::getName);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Collections.sort(internalList, customTeamCompare);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Removes the equivalent team from the list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void edit(ReadOnlyTeam toRemove, Team toReplace) throws TeamNotFoundException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final boolean teamFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!teamFoundAndDeleted) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new TeamNotFoundException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.add(toReplace);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Iterator\u003cTeam\u003e iterator() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof UniqueTeamList // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueTeamList) other).internalList));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 143
    }
  },
  {
    "path": "src/seedu/addressbook/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the main Logic of the AddressBook."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * The list of player shown to the user most recently."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003c? extends ReadOnlyPerson\u003e lastPersonShownList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list of match shown to the user most recently."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003c? extends ReadOnlyMatch\u003e lastMatchList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * The list of team shown to the user most recently."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003c? extends ReadOnlyTeam\u003e lastTeamShownList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * The list of team shown to the user most recently."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private List\u003c? extends ReadOnlyFinance\u003e lastFinanceShownList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Logic() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(initializeStorage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBook(storage.load());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    Logic(StorageFile storageFile, AddressBook addressBook) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(storageFile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBook(addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setStorage(StorageFile storage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(AddressBook addressBook) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the StorageFile object based on the user specified path (if any) or the default storage path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageFile.InvalidStorageFilePathException if the target file path is incorrect."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile initializeStorage() throws StorageFile.InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStorageFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getPath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Unmodifiable view of the current last player list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e getLastPersonShownList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Collections.unmodifiableList(lastPersonShownList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Unmodifiable view of the current last match list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cReadOnlyMatch\u003e getLastMatchList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Collections.unmodifiableList(lastMatchList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    protected void setLastMatchList(List\u003c? extends ReadOnlyMatch\u003e newList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        lastMatchList \u003d newList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    protected void setLastPersonShownList(List\u003c? extends ReadOnlyPerson\u003e newList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        lastPersonShownList \u003d newList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Unmodifiable view of the current last shown list(team)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public List\u003cReadOnlyTeam\u003e getLastTeamShownList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Collections.unmodifiableList(lastTeamShownList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    protected void setLastTeamShownList(List\u003c? extends ReadOnlyTeam\u003e newList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        lastTeamShownList \u003d newList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the user command, executes it, and returns the result."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String userCommandText) throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d new Parser().parseCommand(userCommandText);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d execute(command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        recordResult(result);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, updates storage, and returns the result."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command user command"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return result of the command"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult execute(Command command) throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        command.setData(addressBook,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                lastPersonShownList,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                lastTeamShownList,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                lastMatchList,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                lastFinanceShownList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(addressBook);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Updates the {@link #lastPersonShownList} if the result contains a list of Persons."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Updates the {@link #lastMatchList} if the result contains a list of Matches."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void recordResult(CommandResult result) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e personList \u003d result.getRelevantPersons();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyTeam\u003e\u003e teamList \u003d result.getRelevantTeams();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMatch\u003e\u003e matchList \u003d result.getRelevantMatches();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyFinance\u003e\u003e financeList \u003d result.getRelevantFinances();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (personList.isPresent()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            lastPersonShownList \u003d personList.get();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } else if (teamList.isPresent()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            lastTeamShownList \u003d teamList.get();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } else if (matchList.isPresent()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            lastMatchList \u003d matchList.get();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } else if (financeList.isPresent()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            lastFinanceShownList \u003d financeList.get();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 10,
      "yingrong1996": 39,
      "-": 91,
      "E0176106": 16
    }
  },
  {
    "path": "src/seedu/addressbook/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.SortCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ViewCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.FinanceCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.ListFinanceCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.AddMatchCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.ClearMatchCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.DeleteMatchCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.FindMatchCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.ListMatchCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.AddTeam;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.ClearTeam;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.DeleteTeam;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.EditTeam;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.FindTeam;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.ListTeam;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final Pattern INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e.+)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern KEYWORDS_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003ckeywords\u003e\\\\S+(?:\\\\s+\\\\S+)*)\"); // one or more keywords separated by whitespace"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern PERSON_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisPhonePrivate\u003ep?)p/(?\u003cphone\u003e[^/]+)\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisEmailPrivate\u003ep?)e/(?\u003cemail\u003e[^/]+)\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisAddressPrivate\u003ep?)a/(?\u003caddress\u003e[^/]+)\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final Pattern MATCH_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            Pattern.compile(\"(?\u003cdate\u003e[^/]+)\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    + \"h/(?\u003chome\u003e[^/]+)\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    + \"a/(?\u003caway\u003e[^/]+)\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final Pattern TEAM_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"c/(?\u003ccountry\u003e[^/]+)\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"s/(?\u003csponsor\u003e[^/]+)\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final Pattern TEAM_EDIT_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Pattern.compile(\"(?\u003ctargetIndex\u003e\\\\d+)\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"(( n/(?\u003cname\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"(( c/(?\u003ccountry\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"(( s/(?\u003csponsor\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final Pattern TEAM_EDIT_DATA_NOARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Pattern.compile(\"(?\u003ctargetIndex\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the user input could not be parsed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class ParseException extends Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ParseException(String message) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return prepareAddPerson(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case AddTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return addTeam(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return prepareDeletePerson(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case DeleteTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return delTeam(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case ClearTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new ClearTeam();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return prepareFindPerson(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case FindTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return prepareFindTeam(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        case FinanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return prepareFinance(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        case AddMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return prepareAddMatch(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        case DeleteMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return prepareDeleteMatch(arguments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        case ClearMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new ClearMatchCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        case FindMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return prepareFindMatch(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        case ListMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new ListMatchCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case ListTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new ListTeam();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        case ListFinanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new ListFinanceCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case EditTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return prepareEditTeam(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return prepareView(arguments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        case ViewAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return prepareViewAll(arguments);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD: // Fallthrough"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the add team command."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Command addTeam(String args) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Matcher matcher \u003d TEAM_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new AddTeam("
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"country\"),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"sponsor\"),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            );"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the add player command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareAddPerson(String args) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d PERSON_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand("
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"phone\"),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isPhonePrivate\")),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"email\"),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isEmailPrivate\")),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"address\"),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isAddressPrivate\")),"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the add player command."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareAddMatch(String args) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Matcher matcher \u003d MATCH_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new AddMatchCommand("
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    matcher.group(\"date\"),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    matcher.group(\"home\"),"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    matcher.group(\"away\")"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            );"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the private prefix of a contact detail in the add command\u0027s arguments string is present."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isPrivatePrefixPresent(String matchedPrefix) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        return matchedPrefix.equals(\"p\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Extracts the new player\u0027s tags from the add command\u0027s tag arguments string."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Extracts the new team\u0027s tags from the addTeam command\u0027s tag arguments string."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Merges duplicate tag strings."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Set\u003cString\u003e getTagsFromArgs(String tagArguments) throws IllegalValueException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagArguments.isEmpty()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.emptySet();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        // replace first delimiter prefix, then split"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        final Collection\u003cString\u003e tagStrings \u003d Arrays.asList(tagArguments.replaceFirst(\" t/\", \"\").split(\" t/\"));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tagStrings);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the delete player command."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareDeletePerson(String args) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Parses arguments in the context of the delete match command."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareDeleteMatch(String args) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new DeleteMatchCommand(targetIndex);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    DeleteMatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the delete team command."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Command delTeam(String args) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new DeleteTeam(targetIndex);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Parses arguments in the context of the finance command."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private Command prepareFinance(String args) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new FinanceCommand(targetIndex);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FinanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the Edit command."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Command prepareEditTeam(String args) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Matcher checkForArgs \u003d TEAM_EDIT_DATA_NOARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (checkForArgs.matches()) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format("
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    EditTeam.MESSAGE_NOARGS,"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    EditTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Matcher matcher \u003d TEAM_EDIT_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format("
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    EditTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new EditTeam("
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    targetIndex,"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"country\"),"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"sponsor\"),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            );"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format("
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    EditTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the view command."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareView(String args) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewCommand(targetIndex);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the view all command."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareViewAll(String args) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewAllCommand(targetIndex);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args arguments string to parse as index number"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed index number"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException        if no region of the args string could be found for the index"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NumberFormatException the args string region is not a valid number"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    private int parseArgsAsDisplayedIndex(String args) throws ParseException, NumberFormatException {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Matcher matcher \u003d INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(\"Could not find index number to parse\");"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the find player command."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareFindPerson(String args) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(keywordSet);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Parses arguments in the context of the find match command."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareFindMatch(String args) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    FindMatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new FindMatchCommand(keywordSet);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the find team command."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Command prepareFindTeam(String args) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    FindTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new FindTeam(keywordSet);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 25,
      "yingrong1996": 153,
      "-": 225,
      "E0176106": 77
    }
  },
  {
    "path": "src/seedu/addressbook/storage/StorageFile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.storage.jaxb.AdaptedAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the file used to store address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageFile {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Default file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"addressbook.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Note: Note the use of nested classes below."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * More info https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the given file path does not fulfill the storage filepath constraints."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class InvalidStorageFilePathException extends IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        public InvalidStorageFilePathException(String message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that some error has occured while trying to convert and read/write data between the application"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the storage file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class StorageOperationException extends Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final JAXBContext jaxbContext;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the default path is invalid"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageFile() throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the given file path is invalid"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageFile(String filePath) throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            jaxbContext \u003d JAXBContext.newInstance(AdaptedAddressBook.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(\"jaxb initialisation error\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Storage file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given path is acceptable as a storage file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The file path is considered acceptable if it ends with \u0027.txt\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves all data to this storage file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save(AddressBook addressBook) throws StorageOperationException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: Note the \u0027try with resource\u0027 statement below."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * More info: https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try (final Writer fileWriter \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                     new BufferedWriter(new FileWriter(path.toFile()))) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            final AdaptedAddressBook toSave \u003d new AdaptedAddressBook(addressBook);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            final Marshaller marshaller \u003d jaxbContext.createMarshaller();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            marshaller.marshal(toSave, fileWriter);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path + \" error: \" + ioe.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error converting address book into storage format\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads data from this storage file."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook load() throws StorageOperationException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try (final Reader fileReader \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                     new BufferedReader(new FileReader(path.toFile()))) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            final Unmarshaller unmarshaller \u003d jaxbContext.createUnmarshaller();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            final AdaptedAddressBook loaded \u003d (AdaptedAddressBook) unmarshaller.unmarshal(fileReader);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            // manual check for missing elements"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            if (loaded.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new StorageOperationException(\"File data missing some elements\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return loaded.toModelType();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: Here, we are using an exception to create the file if it is missing. However, we should minimize"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * using exceptions to facilitate normal paths of execution. If we consider the missing file as a \u0027normal\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * situation (i.e. not truly exceptional) we should not use an exception to handle it."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // create empty file if not found"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            final AddressBook empty \u003d new AddressBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            save(empty);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return empty;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // other errors"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error parsing file data format\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"File contains illegal data values; data type constraints not met\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 16,
      "-": 142
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.Finance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.UniqueFinanceList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.UniquePersonList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted address book data holder class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"AddressBook\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdaptedAddressBook {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003cAdaptedTeam\u003e teams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cAdaptedMatch\u003e matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedAddressBook() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given AddressBook into this class for JAXB use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedAddressBook"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedAddressBook(AddressBook source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getAllPersons().forEach(person -\u003e persons.add(new AdaptedPerson(person)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        source.getAllMatches().forEach(match -\u003e matches.add(new AdaptedMatch(match)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        source.getAllTeams().forEach(team -\u003e teams.add(new AdaptedTeam(team)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return persons.stream().anyMatch(AdaptedPerson::isAnyRequiredFieldMissing)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || matches.stream().anyMatch(AdaptedMatch::isAnyRequiredFieldMissing)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                || teams.stream().anyMatch(AdaptedTeam::isAnyRequiredFieldMissing);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly {@code AdaptedAddressBook} object into the corresponding(@code AddressBook} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted player"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted match"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cTeam\u003e teamList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cMatch\u003e matchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final List\u003cFinance\u003e financeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedPerson person : persons) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            personList.add(person.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (AdaptedTeam team : teams) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            teamList.add(team.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedMatch match : matches) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            matchList.add(match.toModelType());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new AddressBook("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                new UniquePersonList(personList),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new UniqueTeamList(teamList),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                new UniqueMatchList(matchList),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                new UniqueFinanceList(financeList));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 12,
      "yingrong1996": 21,
      "-": 56,
      "E0176106": 15
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedMatch.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.Away;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.Home;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.TicketSales;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.player.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * JAXB-friendly adapted match data holder class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class AdaptedMatch {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String home;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String away;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String homeSales;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String awaySales;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cAdaptedPerson\u003e goalScored \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cAdaptedPerson\u003e ownGoalScored \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AdaptedMatch() {}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts a given match into this class for JAXB use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedMatch"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AdaptedMatch(ReadOnlyMatch source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        date \u003d source.getDate().fullDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        home \u003d source.getHome().fullHome;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        away \u003d source.getAway().fullAway;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        homeSales \u003d source.getHomeSales().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        awaySales \u003d source.getAwaySales().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        goalScored \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (Person person : source.getGoalScorers()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            goalScored.add(new AdaptedPerson(person));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        ownGoalScored \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (Person person : source.getOwnGoalScorers()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            ownGoalScored.add(new AdaptedPerson(person));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedPerson person : goalScored) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            if (person.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedPerson person : ownGoalScored) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            if (person.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // second call only happens if home/away are all not null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Utils.isAnyNull(date, home, away, homeSales, awaySales);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts this jaxb-friendly adapted match object into the match object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted match"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Match toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Set\u003cPerson\u003e goalScorers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedPerson person : goalScored) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            goalScorers.add(person.toModelType());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Set\u003cPerson\u003e ownGoalScorers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedPerson person : ownGoalScored) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            ownGoalScorers.add(person.toModelType());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Date date \u003d new Date(this.date);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Home home \u003d new Home(this.home);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Away away \u003d new Away(this.away);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final TicketSales homeSales \u003d new TicketSales(this.homeSales);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final TicketSales awaySales \u003d new TicketSales(this.awaySales);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new Match(date, home, away, homeSales, awaySales, goalScorers, ownGoalScorers);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 12,
      "E0176106": 106
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * JAXB-friendly adapted player data holder class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * JAXB-friendly place holder for information."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AdaptedContactDetail {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        @XmlValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        private String value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @XmlAttribute(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        private boolean isPrivate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private AdaptedContactDetail phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private AdaptedContactDetail email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AdaptedContactDetail address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedPerson() {}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedPerson"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedPerson(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.isPrivate \u003d source.getPhone().isPrivate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.value \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        email.isPrivate \u003d source.getEmail().isPrivate();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        email.value \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        address.isPrivate \u003d source.getAddress().isPrivate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        address.value \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.add(new AdaptedTag(tag));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tag.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // second call only happens if phone/email/address are all not null"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return Utils.isAnyNull(name, phone, email, address)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                || Utils.isAnyNull(phone.value, email.value, address.value);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts this jaxb-friendly adapted player object into the Person object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted player"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone.value, this.phone.isPrivate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email email \u003d new Email(this.email.value, this.email.isPrivate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address address \u003d new Address(this.address.value, this.address.isPrivate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 22,
      "-": 94
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted tag data holder class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedTag"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Utils.isAnyNull(tagName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the Tag object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted player"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 4,
      "-": 47
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Country;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Sponsor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * JAXB-friendly adapted team data holder class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class AdaptedTeam {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private String country;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private String sponsor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003cAdaptedPerson\u003e playerlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003cAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AdaptedTeam() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts a given team into this class for JAXB use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AdaptedTeam(ReadOnlyTeam source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        country \u003d source.getCountry().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        sponsor \u003d source.getSponsor().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        playerlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Person person : source.getPlayers()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            playerlist.add(new AdaptedPerson(person));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            tagged.add(new AdaptedTag(tag));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (tag.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Utils.isAnyNull(name, country);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts this jaxb-friendly adapted team object into the team object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Team toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cPerson\u003e players \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (AdaptedPerson person : playerlist) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            players.add(person.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Country country \u003d new Country(this.country);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Sponsor sponsor \u003d new Sponsor(this.sponsor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new Team(name, country, sponsor, players, tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 94,
      "E0176106": 1
    }
  },
  {
    "path": "src/seedu/addressbook/ui/Formatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Used for formatting text for display. e.g. for adding text decorations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A decorative prefix added to the beginning of lines printed by AddressBook */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LINE_PREFIX \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Format of indexed list item */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INDEXED_LIST_ITEM \u003d \"\\t%1$d. %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given strings for displaying to the user. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String format(String... messages) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String m : messages) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(LINE_PREFIX + m.replace(\"\\n\", LS + LINE_PREFIX) + LS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given list of persons for displaying to the user. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String formatPersonResult(List\u003c? extends ReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cString\u003e formattedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyPerson person : persons) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedPersons.add(person.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return format(asIndexedList(formattedPersons));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /** Formats the given list of teams for displaying to the user. */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String formatTeamResult(List\u003c? extends ReadOnlyTeam\u003e teams) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cString\u003e formattedTeams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (ReadOnlyTeam team : teams) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            formattedTeams.add(team.getAsTextShowAll());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return format(asIndexedList(formattedTeams));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /** Formats the given list of matches for displaying to the user. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String formatMatchResult(List\u003c? extends ReadOnlyMatch\u003e matches) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cString\u003e formattedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (ReadOnlyMatch match : matches) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            formattedMatches.add(match.getAsTextShowAll());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return format(asIndexedList(formattedMatches));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /** Formats the given list of finances for displaying to the user. */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public String formatFinanceResult(List\u003c? extends ReadOnlyFinance\u003e finances) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final List\u003cString\u003e formattedFinances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (ReadOnlyFinance finance : finances) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            formattedFinances.add(finance.getAsTextShowAll());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return format(asIndexedList(formattedFinances));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats a list of strings as an indexed list. */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String asIndexedList(List\u003cString\u003e listItems) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder formatted \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        int displayIndex \u003d DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String listItem : listItems) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            formatted.append(getIndexedListItem(displayIndex, listItem)).append(\"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return formatted.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats a string as an indexed list item."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param visibleIndex index for this listing"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getIndexedListItem(int visibleIndex, String listItem) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_INDEXED_LIST_ITEM, visibleIndex, listItem);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 9,
      "yingrong1996": 10,
      "-": 63,
      "E0176106": 12
    }
  },
  {
    "path": "src/seedu/addressbook/ui/Gui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.Main;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The GUI of the App"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Gui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int INITIAL_WINDOW_WIDTH \u003d 800;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int INITIAL_WINDOW_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String version;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Gui(Logic logic, String version) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.version \u003d version;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Create the main window and display the welcome message on it"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage, Stoppable mainApp) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow \u003d createMainWindow(stage, mainApp);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.displayWelcomeMessage(version, logic.getStorageFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Create the main window of the league tracker using javaFX"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow createMainWindow(Stage stage, Stoppable mainApp) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: When calling getResource(), use \u0027/\u0027, instead of File.separator or \u0027\\\\\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * More info: http://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html#res_name_context"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        loader.setLocation(Main.class.getResource(\"ui/mainwindow.fxml\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setTitle(version);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(new Scene(loader.load(), INITIAL_WINDOW_WIDTH, INITIAL_WINDOW_HEIGHT));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        MainWindow mainWindow \u003d loader.getController();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.setLogic(logic);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.setMainApp(mainApp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindow;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 10,
      "-": 50
    }
  },
  {
    "path": "src/seedu/addressbook/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_USING_STORAGE_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_WELCOME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Main Window of the GUI."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stoppable mainApp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private TextArea outputConsole;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private TextField commandInput;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogic(Logic logic) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setMainApp(Stoppable mainApp) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mainApp \u003d mainApp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Handle thw text interface command line"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Exits the program if exit is given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void onCommand(ActionEvent event) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            String userCommandText \u003d commandInput.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(userCommandText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isExitCommand(result)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                exitApp();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            displayResult(result);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            clearCommandInput();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            display(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void exitApp() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        mainApp.stop();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns true of the result given is the result of an exit command */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isExitCommand(CommandResult result) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return result.feedbackToUser.equals(ExitCommand.MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears the command input box */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void clearCommandInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandInput.setText(\"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /** Clears the output displayPersonResult area */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearOutputConsole() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Displays the result of a command execution to the user. */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayResult(CommandResult result) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        clearOutputConsole();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e resultPersons \u003d result.getRelevantPersons();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyTeam\u003e\u003e resultTeams \u003d result.getRelevantTeams();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMatch\u003e\u003e resultMatches \u003d result.getRelevantMatches();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyFinance\u003e\u003e resultFinances \u003d result.getRelevantFinances();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (resultPersons.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            displayPersonResult(resultPersons.get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (resultTeams.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            displayTeamResult(resultTeams.get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (resultMatches.isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            displayMatch(resultMatches.get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        if (resultFinances.isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            displayFinanceResult(resultFinances.get());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        display(result.feedbackToUser);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Displays welcome message with current version , file name generated and file path."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayWelcomeMessage(String version, String storageFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String storageFileInfo \u003d String.format(MESSAGE_USING_STORAGE_FILE, storageFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        display(MESSAGE_WELCOME, version, MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE, storageFileInfo);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Displays the list of matches in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private void displayMatch(List\u003c? extends ReadOnlyMatch\u003e matches) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        display(new Formatter().formatMatchResult(matches));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Displays the list of persons in the output displayPersonResult area, formatted as an indexed list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private void displayPersonResult(List\u003c? extends ReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        display(new Formatter().formatPersonResult(persons));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Displays the list of teams in the output displayPersonResult area, formatted as an indexed list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private void displayTeamResult(List\u003c? extends ReadOnlyTeam\u003e teams) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        display(new Formatter().formatTeamResult(teams));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Displays the list of finances in the output displayFinanceResult area, formatted as an indexed list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Private details are hidden."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private void displayFinanceResult(List\u003c? extends ReadOnlyFinance\u003e finances) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        display(new Formatter().formatFinanceResult(finances));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Displays the given messages on the output displayPersonResult area, after formatting appropriately."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void display(String... messages) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.setText(outputConsole.getText() + new Formatter().format(messages));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 12,
      "yingrong1996": 38,
      "-": 95,
      "E0176106": 11
    }
  },
  {
    "path": "test/java/seedu/addressbook/logic/LogicTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ViewCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * See https://github.com/junit-team/junit4/wiki/rules#temporaryfolder-rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile saveFile;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFile \u003d new StorageFile(saveFolder.newFile(\"testSaveFile.txt\").getPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFile.save(addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new Logic(saveFile, addressBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        //Constructor is called in the setup() method which executes before every test, no need to call it here again."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the last shown list is empty"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastPersonShownList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalid() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"       \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(invalidCommand,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that the result message is correct."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(String, String, AddressBook, boolean, List)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedMessage, AddressBook.empty(), false, Collections.emptyList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the storage file content matches data in {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                                      AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                                      boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                                      List\u003c? extends ReadOnlyPerson\u003e lastPersonList) throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(r.getRelevantPersons().isPresent(), isRelevantPersonsExpected);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isRelevantPersonsExpected) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            assertEquals(lastPersonList, r.getRelevantPersons().get());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, addressBook);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        assertEquals(lastPersonList, logic.getLastPersonShownList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBook, saveFile.load());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_unknownCommandWord() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String unknownCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(unknownCommand, HelpCommand.MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"help\", HelpCommand.MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"exit\", ExitCommand.MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_clear() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(helper.generatePerson(1, true));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(helper.generatePerson(2, true));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(helper.generatePerson(3, true));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertCommandBehavior(\"clear\", ClearCommand.MESSAGE_SUCCESS, AddressBook.empty(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                false, Collections.emptyList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add wrong args wrong args\", expectedMessage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name 12345 e/valid@email.butNoPhonePrefix a/valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 valid@email.butNoPrefix a/valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/valid@email.butNoAddressPrefix valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_invalidPersonData() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add []\\\\[;] p/12345 e/valid@e.mail a/valid, address\", Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/not_numbers e/valid@e.mail a/valid, address\", Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/notAnEmail a/valid, address\", Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/valid@e.mail a/valid, address t/invalid_-[.tag\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_successful() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toBeAdded \u003d helper.adam();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        expectedAb.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                              String.format(AddCommand.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                              expectedAb,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                              false,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                              Collections.emptyList());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_addDuplicate_notAllowed() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toBeAdded \u003d helper.adam();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        expectedAb.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        addressBook.addPerson(toBeAdded); // player already in internal address book"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_list_showsAllPersons() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(false, true);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d expectedAb.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, false, true);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"list\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                              Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                              expectedAb,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                              true,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                              expectedList);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view \", expectedMessage);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"view\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * targeting a single player in the last shown list, using visible index."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @param commandWord to test assuming it targets a single player in the last shown list based on visible index."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInvalidIndexBehaviorForCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cPerson\u003e lastPersonList \u003d helper.generatePersonList(false, true);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        logic.setLastPersonShownList(lastPersonList);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        assertCommandBehavior(commandWord + \" -1\", expectedMessage, AddressBook.empty(), false, lastPersonList);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        assertCommandBehavior(commandWord + \" 0\", expectedMessage, AddressBook.empty(), false, lastPersonList);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        assertCommandBehavior(commandWord + \" 3\", expectedMessage, AddressBook.empty(), false, lastPersonList);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_onlyShowsNonPrivate() throws Exception {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cPerson\u003e lastPersonList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(lastPersonList);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        helper.addToAddressBook(addressBook, lastPersonList);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        logic.setLastPersonShownList(lastPersonList);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                              String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getAsTextHidePrivate()),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                              expectedAb,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                              false,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                              lastPersonList);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 2\","
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                              String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getAsTextHidePrivate()),"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                              expectedAb,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                              false,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                              lastPersonList);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_tryToViewMissingPerson_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cPerson\u003e lastPersonList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        expectedAb.addPerson(p2);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(p2);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        logic.setLastPersonShownList(lastPersonList);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                              Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                              expectedAb,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                              false,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                              lastPersonList);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall \", expectedMessage);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"viewall\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_alsoShowsPrivate() throws Exception {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cPerson\u003e lastPersonList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(lastPersonList);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        helper.addToAddressBook(addressBook, lastPersonList);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        logic.setLastPersonShownList(lastPersonList);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 1\","
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                            String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getAsTextShowAll()),"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                            expectedAb,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                            false,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                            lastPersonList);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "                            String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getAsTextShowAll()),"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                            expectedAb,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                            false,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                            lastPersonList);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_tryToViewAllPersonMissingInAddressBook_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cPerson\u003e lastPersonList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        expectedAb.addPerson(p1);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        logic.setLastPersonShownList(lastPersonList);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "                                Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                                expectedAb,"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "                                false,"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                                lastPersonList);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete \", expectedMessage);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"delete\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_removesCorrectPerson() throws Exception {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        expectedAb.removePerson(p2);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        logic.setLastPersonShownList(threePersons);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "                                String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, p2),"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                                expectedAb,"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "                                false,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "                                threePersons);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_missingInAddressBook() throws Exception {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        expectedAb.removePerson(p2);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(p2);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        logic.setLastPersonShownList(threePersons);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "                                Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                                expectedAb,"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "                                false,"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "                                threePersons);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find \", expectedMessage);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_onlyMatchesFullWordsInNames() throws Exception {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"KE Y\");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEYKEYKEY sduauo\");"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "                                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                                expectedAb,"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "                                true,"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedList);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_isCaseSensitive() throws Exception {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"key key\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "                                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                                expectedAb,"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "                                true,"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedList);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_matchesIfAnyKeywordPresent() throws Exception {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla rAnDoM bla bceofeia\");"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"key key\");"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY rAnDoM\","
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "                                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                                expectedAb,"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "                                true,"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedList);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "     * A utility class to generate test data."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    class TestDataHelper {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * generate a person with the stated parameters"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         */"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        Person adam() throws Exception {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(\"Adam Brown\");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone privatePhone \u003d new Phone(\"111111\", true);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d new Email(\"adam@gmail.com\", false);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "            Address privateAddress \u003d new Address(\"111, alpha street\", true);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(tag1, tag2));"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person(name, privatePhone, email, privateAddress, tags);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Generates a valid player using the given seed."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Running this function with the same parameter values guarantees the returned player will have the same state."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "         * Each unique seed will generate a unique Person object."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * @param seed used to generate the player data field values"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isAllFieldsPrivate determines if private-able fields (phone, email, address) will be private"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "        Person generatePerson(int seed, boolean isAllFieldsPrivate) throws Exception {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Name(\"Person \" + seed),"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Phone(\"\" + Math.abs(seed), isAllFieldsPrivate),"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Email(seed + \"@email\", isAllFieldsPrivate),"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"House of \" + seed, isAllFieldsPrivate),"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag\" + Math.abs(seed)), new Tag(\"tag\" + Math.abs(seed + 1))))"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /** Generates the correct add command based on the player given */"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        String generateAddCommand(Person p) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "            StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add(\"add\");"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add(p.getName().toString());"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add((p.getPhone().isPrivate() ? \"pp/\" : \"p/\") + p.getPhone());"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add((p.getEmail().isPrivate() ? \"pe/\" : \"e/\") + p.getEmail());"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add((p.getAddress().isPrivate() ? \"pa/\" : \"a/\") + p.getAddress());"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d p.getTags();"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Tag t: tags) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "                cmd.add(\"t/\" + t.tagName);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "            return cmd.toString();"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates an AddressBook with auto-generated persons."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "         *                          private."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook generateAddressBook(Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "            addToAddressBook(addressBook, isPrivateStatuses);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates an AddressBook based on the list of Persons given."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook generateAddressBook(List\u003cPerson\u003e persons) throws Exception {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "            addToAddressBook(addressBook, persons);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "         * Adds auto-generated Person objects to the given AddressBook"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param addressBook The AddressBook to which the Persons will be added"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isPrivateStatuses flags to indicate if all contact details of generated persons should be set to"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "         *                          private."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "        void addToAddressBook(AddressBook addressBook, Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "            addToAddressBook(addressBook, generatePersonList(isPrivateStatuses));"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "         * Adds the given list of Persons to the given AddressBook"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        void addToAddressBook(AddressBook addressBook, List\u003cPerson\u003e personsToAdd) throws Exception {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Person p: personsToAdd) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBook.addPerson(p);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "         * Creates a list of Persons based on the give Person objects."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e generatePersonList(Person... persons) throws Exception {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Person p: persons) {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "                personList.add(p);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "            return personList;"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates a list of Persons based on the flags."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "         *                          private."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e generatePersonList(Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Boolean p: isPrivateStatuses) {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "                persons.add(generatePerson(i++, p));"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates a Person object with given name. Other fields will have some dummy values."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        Person generatePersonWithName(String name) throws Exception {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Name(name),"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Phone(\"1\", false),"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Email(\"1@email\", false),"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"House of 1\", false),"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "                    Collections.singleton(new Tag(\"tag\"))"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 74,
      "-": 512,
      "E0176106": 24
    }
  },
  {
    "path": "test/java/seedu/addressbook/parser/ParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ViewCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPerson;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyInput_returnsIncorrect() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] emptyInputs \u003d { \"\", \"  \", \"\\n  \\n\" };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, emptyInputs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void unknownCommandWord_returnsHelp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"unknowncommandword arguments arguments\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test 0-argument commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"clear\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ClearCommand.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void listCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"list\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ListCommand.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void exitCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"exit\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test ingle index argument commands"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_noArgs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"delete\", \"delete \" };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"delete notAnumber \", \"delete 8*wh12\", \"delete 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String resultMessage;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"delete \" + testIndex;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final DeleteCommand result \u003d parseAndAssertCommandType(input, DeleteCommand.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_noArgs() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"view\", \"view \" };"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"view notAnumber \", \"view 8*wh12\", \"view 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 2;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"view \" + testIndex;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final ViewCommand result \u003d parseAndAssertCommandType(input, ViewCommand.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_noArgs() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"viewall\", \"viewall \" };"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"viewall notAnumber \", \"viewall 8*wh12\", \"viewall 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 3;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"viewall \" + testIndex;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final ViewAllCommand result \u003d parseAndAssertCommandType(input, ViewAllCommand.class);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test find persons by keyword in name command"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_invalidArgs() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            \"find\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            \"find \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_validArgs_parsedCorrectly() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"find \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_duplicateKeys_parsedCorrectly() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // duplicate every keyword"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"find \" + String.join(\" \", keySet) + \" \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Test add player command"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_invalidArgs() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            \"add\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            \"add \","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            \"add wrong args format\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                // no phone prefix"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(\"add $s $s e/$s a/$s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                // no email prefix"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(\"add $s p/$s $s a/$s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                // no address prefix"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(\"add $s p/$s e/$s $s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_invalidPersonDataInArgs() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidName \u003d \"[]\\\\[;]\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validName \u003d Name.EXAMPLE;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidPhoneArg \u003d \"p/not__numbers\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validPhoneArg \u003d \"p/\" + Phone.EXAMPLE;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidEmailArg \u003d \"e/notAnEmail123\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validEmailArg \u003d \"e/\" + Email.EXAMPLE;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidTagArg \u003d \"t/invalid_-[.tag\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // address can be any string, so no invalid address"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        final String addCommandFormatString \u003d \"add $s $s $s a/\" + Address.EXAMPLE;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // test each incorrect player data field argument individually"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid name"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, invalidName, validPhoneArg, validEmailArg),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid phone"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, invalidPhoneArg, validEmailArg),"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid email"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, invalidEmailArg),"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid tag"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, validEmailArg) + \" \" + invalidTagArg"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_validPersonData_parsedCorrectly() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        final Person testPerson \u003d generateTestPerson();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d convertPersonToAddCommandString(testPerson);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        final AddCommand result \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getPerson(), testPerson);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_duplicateTags_merged() throws IllegalValueException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        final Person testPerson \u003d generateTestPerson();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d convertPersonToAddCommandString(testPerson);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : testPerson.getTags()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            // create duplicates by doubling each tag"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            input +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        final AddCommand result \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getPerson(), testPerson);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * generates a test person"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person generateTestPerson() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                new Name(Name.EXAMPLE),"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(Phone.EXAMPLE, true),"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(Email.EXAMPLE, false),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(Address.EXAMPLE, true),"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag1\"), new Tag(\"tag2\"), new Tag(\"tag3\")))"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new RuntimeException(\"test player data should be valid by definition\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts person to add command string"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String convertPersonToAddCommandString(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d \"add \""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                + person.getName().fullName"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                + (person.getPhone().isPrivate() ? \" pp/\" : \" p/\") + person.getPhone().value"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                + (person.getEmail().isPrivate() ? \" pe/\" : \" e/\") + person.getEmail().value"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                + (person.getAddress().isPrivate() ? \" pa/\" : \" a/\") + person.getAddress().value;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : person.getTags()) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            addCommand +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Utility methods"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that parsing the given inputs will return IncorrectCommand with the given feedback message."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    private void parseAndAssertIncorrectWithMessage(String feedbackMessage, String... inputs) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            final IncorrectCommand result \u003d parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(result.feedbackToUser, feedbackMessage);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * Utility method for parsing input and asserting the class/type of the returned command object."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input to be parsed"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed command object"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT extends Command\u003e T parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        final Command result \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        return (T) result;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 36,
      "-": 284
    }
  },
  {
    "path": "test/java/seedu/addressbook/storage/StorageFileTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import static seedu.addressbook.util.TestUtil.assertTextFilesEqual;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageFileTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d \"test/data/StorageFileTest\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        new StorageFile(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_noTxtExtension_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        new StorageFile(TEST_DATA_FOLDER + \"/\" + \"InvalidfileName\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_invalidFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // The file contains valid xml data, but does not match the AddressBook class"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getStorage(\"InvalidData.txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.load();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_validFormat() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook actualAb \u003d getStorage(\"ValidData.txt\").load();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensure loaded AddressBook is properly constructed with test data"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: overwrite equals method in AddressBook class and replace with equals method below"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(actualAb.getAllPersons(), expectedAb.getAllPersons());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullAddressBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_validAddressBook() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidData.txt\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    // getPath() method in StorageFile class is trivial so it is not tested"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the contents of two storage files are the same."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStorageFilesEqual(StorageFile sf1, StorageFile sf2) throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTextFilesEqual(Paths.get(sf1.getPath()), Paths.get(sf2.getPath()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile getStorage(String fileName) throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile(TEST_DATA_FOLDER + \"/\" + fileName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile getTempStorage() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile(testFolder.getRoot().getPath() + \"/\" + \"temp.txt\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook getTestAddressBook() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ab.addPerson(new Person(new Name(\"John Doe\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Phone(\"98765432\", false),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Email(\"johnd@gmail.com\", false),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Address(\"John street, block 123, #01-01\", false),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                                Collections.emptySet()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ab.addPerson(new Person(new Name(\"Betsy Crowe\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Phone(\"1234567\", true),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Email(\"betsycrowe@gmail.com\", false),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Address(\"Newgate Prison\", true),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"friend\"), new Tag(\"criminal\")))));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 10,
      "-": 102
    }
  },
  {
    "path": "test/java/seedu/addressbook/util/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "  * TestUtil"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "  **/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts whether the text in the two given files are the same. Ignores any"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * differences in line endings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertTextFilesEqual(Path path1, Path path2) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list1 \u003d Files.readAllLines(path1, Charset.defaultCharset());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list2 \u003d Files.readAllLines(path2, Charset.defaultCharset());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.join(\"\\n\", list1), String.join(\"\\n\", list2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 5,
      "-": 20
    }
  }
]
