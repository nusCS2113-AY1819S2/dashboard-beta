[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d LeagueTracker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:imagesDir: docs/images]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S2-M11-1/main[image:https://travis-ci.org/CS2113-AY1819S2-M11-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "https://coveralls.io/github//CS2113-AY1819S2-M11-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S2-M11-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* This is a CLI (Command Line Interface) League Tracker application *written in OOP fashion*. It has a very basic GUI."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* It is a Java application intended for League Operators to manage teams, players, matches records."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "*Useful Links*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "This application is morphed from AddressBook-Level3 project created by SE-EDU initiative https://github.com/se-edu/[here]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Some parts of this sample application was inspired by the excellent"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by Marco Jakob"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contact Us"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S2-M11-1/main/issues[issue tracker]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 1,
      "E0176106": 8,
      "-": 21
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": "  \"formats\": [\"adoc\", \"cs\", \"css\", \"fxml\", \"gradle\", \"html\", \"java\", \"js\", \"json\", \"jsp\", \"md\", \"py\", \"tag\", \"txt\", \"xml\"],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "  ["
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "    {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "      \"githubId\": \"E0176106\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "      \"displayName\": \"Justin Lee\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "      \"authorNames\": [\"E0176106\", \"[E0176106]\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "    },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "      \"githubId\": \"huyidi\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "      \"displayName\": \"Hu Yidi\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "      \"authorNames\": [\"huyidi\",\"[huyidi]\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "    },"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "      \"githubId\": \"yingrong1996\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "      \"displayName\": \"Ying Rong\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "      \"authorNames\": [\"yingrong1996\",\"[yingrong1996]\",\"[Ying Rong]\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "      \"githubId\": \"warheade\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "      \"displayName\": \"Wang Jiannan\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "      \"authorNames\": [\"warheade\",\"[warheade]\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 26
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "mainClassName \u003d \u0027seedu.addressbook.Main\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027test/java\u0027]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "test {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "    compile group:\u0027org.apache.poi\u0027, name: \u0027poi\u0027, version: \u00274.0.1\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    archiveName \u003d \u0027AB.jar\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        })"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u0027site-name\u0027: \u0027LeagueTracker\u0027,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2113-ay1819s2-m11-1/main\u0027,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0176106"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027asciidoctor\u0027, \u0027checkstyleMain\u0027, \u0027checkstyleTest\u0027"
      }
    ],
    "authorContributionMap": {
      "warheade": 2,
      "-": 95,
      "E0176106": 76
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cproperty name\u003d\"file\" value\u003d\"config/checkstyle/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Required for SuppressionCommentFilter to work --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"FileContentsHolder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    IMPORT CHECKS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      1. STATIC: static imports"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    An import statement is redundant if:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    An import statement is unused if:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    NAMING CHECKS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0176106"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0176106"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        else"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!--"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      else if {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      if (true)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return 1; // Not allowed"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"UpperEll\" /\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0176106"
        },
        "content": "       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    ORDER CHECKS"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "E0176106"
        },
        "content": "         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      3. Constructors"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      4. Methods"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           synchronized, native, strictfp"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    WHITESPACE CHECKS"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           by regular or curly braces."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "E0176106"
        },
        "content": "             e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "E0176106"
        },
        "content": "             e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "E0176106"
        },
        "content": "         a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "E0176106"
        },
        "content": "         a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "E0176106"
        },
        "content": "           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    JAVADOC CHECKS"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks public methods that have more than 1 line of code."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        Single line of code methods are often due to refactor for readability."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c!-- Checks that every non-trivial private method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003c!-- Checks private methods that have more than 3 lines of code."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        We define methods that have more than 3 lines of code as non-trivial."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"private\"/\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "E0176106"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "E0176106": 423
    }
  },
  {
    "path": "config/checkstyle/suppressions.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c?xml version\u003d\"1.0\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c!DOCTYPE suppressions PUBLIC"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\"-//Puppy Crawl//DTD Suppressions 1.1//EN\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\"http://checkstyle.sourceforge.net/dtds/suppressions_1_1.dtd\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003csuppressions\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "  \u003csuppress checks\u003d\"JavadocType\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003c/suppressions\u003e"
      }
    ],
    "authorContributionMap": {
      "E0176106": 9
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": ":relfileprefix: teamName/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The LeagueTracker provides football league operator with an efficient method of managing the players, teams and matches in the season. It features many ways to keep track of the teams and players playing in the league. The LeagueTracker will help manager have an easier time in keeping track of the current situation in the football league. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "We are a teamName based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Lee Chong Wei Justin"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::e0176106.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty}[http://github.com/E0176106[github]] [\u003c\u003cE0176106#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Role: Integration, Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Responsibilities: Match Schedule Feature"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Hu Yidi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::huyidi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty}[https://github.com/huyidi[github]] [\u003c\u003chuyidi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Role: Documentation, Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Responsibilities: League Feature"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Wang Jiannan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::warheade.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty}[http://github.com/warheade[github]] [\u003c\u003cwarheade#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Role: Team Lead, Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Responsibilities: Player Feature"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Lee Ying Rong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::yingrong1996.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "{empty}[http://github.com/yingrong1996[github]] [\u003c\u003cyingrong1996#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Role: Testing, Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Responsibilities: Team Feature"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huyidi": 44,
      "warheade": 2,
      "E0176106": 5
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S2-M11-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "huyidi": 5,
      "E0176106": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d League Tracker - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "By: `CS2113-AY1819S2-M11-1`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "The LeagueTracker is a CLI (Command Line Interface) application written in OOP fashion with a very basic GUI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "This application is adapted from AddressBook3. It is created to provide league managers a football league operator with an efficient method of managing the league in the current season. It features many ways to keep track of the teams and players playing in the league. The LeagueTracker will make useful information of the league managed to be more organized and accessible. +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "This Developer Guide provides you useful information regarding setting, coding and testing of League Tracker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "To set up this project on our computer: +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Run the `seedu.addressbook.Main` and try a few commands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huyidi"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huyidi"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your teamName fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": "Coverage reporting could be useful for a teamName repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the League Tracker."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": "Given below is a quick overview of each component. +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": "*Main* has only one class called `Main`. It is responsible for:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": "* At app launch: Initializing the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "* At shut down: Shutting down the components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "*Logic* is the command executor."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": "*Data* Holds the data of the League Tracker in-memory."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": "*Storage* Reads data from, and writes data to the hard disk."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Main Component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Class Disgram showcasing the structure of Main Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::Uicomponent.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "warheade"
        },
        "content": "The Main Component consists of a UI package and a `Main` class. Inside the UI package, there are various classes such"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "warheade"
        },
        "content": "as `MainWindow`, `Formatter` and `Gui` as shown in figure 2. A `Stoppable` interface is also included which"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "warheade"
        },
        "content": "the `main` class implements."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": "The UI package uses JavaFX UI framework. Layout of `MainWindow` is defined in `mainwindow.fxml` which can be found"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": "under the same package."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "warheade"
        },
        "content": "The Main Component:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": "* Displays the CLI Gui"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "warheade"
        },
        "content": "* Accepts input from users"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "warheade"
        },
        "content": "* Executes user commands using the `Logic` Component"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "warheade"
        },
        "content": "* Listens for changes to `Data`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Class Disgram showcasing the structure of Logic Component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::Logiccomponent.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "warheade"
        },
        "content": "The Logic Component has a `Logic` package with a `Logic` class and a `Parser` package with a `Parser` class."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "warheade"
        },
        "content": "1. `Logic` uses `Parser` class in the `Parser` package to parse the user command"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "warheade"
        },
        "content": "2. This produces a `Command` object which is executed by `Logic`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "warheade"
        },
        "content": "3. The command execution can affect `Data`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "warheade"
        },
        "content": "4. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to Ui."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "warheade"
        },
        "content": "5. This `CommandResult` object can also invoke actions at Ui such as displaying a message or a summary."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Data Component"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "warheade"
        },
        "content": " [to be edited]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Storage Component"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".Storage Diagram"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "image::Storage.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "The storage component stores League Tracker data in an XML format and is able to convert it back into a human-readable format in League Tracker."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Common Classes"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "warheade"
        },
        "content": "Classes used by multiple components (eg.Utils.java) are collated in the `seedu.addressbook.common` package."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "warheade"
        },
        "content": "(`main` \u003e `src` \u003e `seedu` \u003e `addressbook` \u003e `common`)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "warheade"
        },
        "content": " [to be edited]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "warheade"
        },
        "content": "In this section, the detailed implementations of classes and features will be shown."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "warheade"
        },
        "content": "Following AddressBook3, our League Tracker uses AsciiDoc for writing documentation.We choose AsciiDoc as it provides both a human-readable,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "warheade"
        },
        "content": "plain-text writing format as well as a text processor and toolchain that are able to translate AsciiDoc documents into different formats(called backend),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "warheade"
        },
        "content": "including HTML,DocBook and PDF."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "warheade"
        },
        "content": "In your IntelliJ IDE, open `Main` \u003e `docs` \u003e `templates` and select the documentation file (eg. `DeveloperGuide.adoc`) to open and edit."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "warheade"
        },
        "content": "IntelliJ IDE will notify to download the AsciiDoc Plugin. With the plugin, a preview of the documentation will be shown on the screen when the documentation is being"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "warheade"
        },
        "content": "edited for ease of developers."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "warheade"
        },
        "content": "Auto-publishing of documentations has been enabled in League Tracker using Travis CI. A guide of doing so is provided below."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "warheade"
        },
        "content": "1. Ensure that you have set up Travis CI properly for the project."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "warheade"
        },
        "content": "2. On Github, create a new user account give this account collaborator and admin access to the repo."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "warheade"
        },
        "content": "   Using this account, generate a personal access token using this link: https://github.com/settings/tokens/new"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "warheade"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "warheade"
        },
        "content": "Personal access tokens serve as passwords so they must be kept secret to protect your accounts. Delete and regenerate if it is leaked."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "warheade"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "warheade"
        },
        "content": "We use a new user account to generate the token for teamName projects to prevent teamName members from gaining access to other teamName members\u0027 repos."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "warheade"
        },
        "content": "    If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "warheade"
        },
        "content": "   * Add a description for the token. (e.g. Travis CI - auto-publishing)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "warheade"
        },
        "content": "   * Check the `public repo` checkbox."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "warheade"
        },
        "content": "   * Click `Generate Token` to grant access for Travis CI to the repo of the project."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Generating personal token for auto-publishing on Github"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::generate_token.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huyidi"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "warheade"
        },
        "content": ".  Use asciidoctor to convert AsciiDoc files in docs to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huyidi"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huyidi"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huyidi"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huyidi"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huyidi"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huyidi"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huyidi"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huyidi"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huyidi"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Football League Operators +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "warheade"
        },
        "content": "* Has a need to manage profiles of teams and players in a league +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "warheade"
        },
        "content": "* Has a need to collect and view specific data regarding the league (matches\u0027, teams\u0027 and players\u0027 information in the league)  +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "warheade"
        },
        "content": "* Comfortable with typing +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* Prefer desktop apps over other type +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "* Reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0176106"
        },
        "content": "*Value proposition*: "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "warheade"
        },
        "content": "* Manage league/teamName/player faster than a typical mouse/GUI driven app. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "warheade"
        },
        "content": "* Easy access to records needed. +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "warheade"
        },
        "content": "* Provide crucial analysis of records in the league"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huyidi"
        },
        "content": "|`* * *` |League Organiser |add, edit and delete players into the records | add new player when they join,delete old player when they retire"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "warheade"
        },
        "content": "|`* * *` |League Organiser |add, edit and delete teams into current league| add new teamName that move up major league"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|`* * *` |League Organiser |list all teams and player. | See all current teams and player"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "huyidi"
        },
        "content": "|`* * *` |League Organiser |see the performance of players in the league | know player\u0027s goals scored and Penalties."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "warheade"
        },
        "content": "|`* * *` |League Organiser |see the teams ranking in league | know which teamName is currently leading in points"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huyidi"
        },
        "content": "|`* * *` |League Organiser |keep track on the future match up for the playing teams| see the match scheduling"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huyidi"
        },
        "content": "|`* * *` |League Organiser |add, edit and delete matches in current league | edit the match schedule"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "warheade"
        },
        "content": "|`* * *` |League Organiser |see the real-time balancing of income of each teamName | know the financial condition of each teamName"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "warheade"
        },
        "content": "|`* *` |League Organiser |see the statistic of each teamName | know the percentage of winnings, average of fouls per matches of each teamName"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Quality requirement: The system should be efficient enough for organiser to quickly updat and keep track of the teams playing in the league."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Performance requirements: The system should be able to present the information in an orgainised format as the data could be confusing."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ". Project scope: The product is developed solely for the use of league organiser."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "warheade"
        },
        "content": ". Computer Environment: The product should work on any mainstream OS as long as it has Java 8 (revision 1.8.0_201 or higher) installed."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "warheade"
        },
        "content": ". UI Justifiability: A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "warheade"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "warheade"
        },
        "content": "(For all use cases below, the System is the League Tracker and the Actor is the user, unless specified otherwise)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use Case: Add Player"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User requests to add a specific player in the League"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User specify the following detail:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "warheade"
        },
        "content": "  Name, Position Played, Age, Salary, Goals Scored, Goals Assisted, Team Name, Nationality,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "warheade"
        },
        "content": "Jersey Number, Appearance,HealthStatus, Tags(optional)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System adds the person."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If successful, a message will be shown and a new player is added"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If not successful, a message specifying reason for failure will be shown and command list"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "warheade"
        },
        "content": "  will be printed"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use Case: Delete Player"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "warheade"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) User requests to list all players in the league"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) System shows a list of players"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User requests to delete a specific player in the list"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User specify the following detail:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "warheade"
        },
        "content": "  Name, Team,Jersey Number"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System adds the person."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If successful, a message will be shown and the player is deleted"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If not successful, a message specifying reason for failure will be shown and command list"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "warheade"
        },
        "content": "  will be printed"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use Case: Transfer Player (coming in v1.4)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "warheade"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) User requests to list all players in the league"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) System shows a list of players"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User requests to transfer a specific player in the list"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User specify the following detail:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "warheade"
        },
        "content": "  Name,Team,Jersey Number,Original Team,Destination Team"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System transfers the player."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If successful, a message will be shown and the player\u0027s details as well as details for teams will"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "warheade"
        },
        "content": "  be updated."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If not successful, a message specifying reason for failure will be shown and command list"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "warheade"
        },
        "content": "  will be printed"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use Case: Edit Player"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "warheade"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) User requests to list all players in the league"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "warheade"
        },
        "content": ". (Optional) System shows a list of players"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User requests to edit a specific player in the list"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "warheade"
        },
        "content": ". User first specifies the name, teamName and Jersey Number of the player"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System returns a message of whether the player exists"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If the player exists, a \"Please enter new details\" Message will be shown by system to ask for"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "warheade"
        },
        "content": "  input. Otherwise, a PlayerNotFound exception Message will be printed followed by the list of commands"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "warheade"
        },
        "content": ". Assume the player exists, user then specifies the following detail to be reflected in the new profile:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "warheade"
        },
        "content": "  Name,Team,Jersey Number,Original Team,Destination Team"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "warheade"
        },
        "content": ". System updates the player."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If successful, a message will be shown and the player\u0027s details will"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "warheade"
        },
        "content": "  be updated."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If not successful, a message specifying reason for failure will be shown and command list"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "warheade"
        },
        "content": "  will be printed"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "warheade"
        },
        "content": "+"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "warheade"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "warheade"
        },
        "content": "*League*: a group of football teams which play each other over a period for a championship."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "warheade"
        },
        "content": "*Transfer*: the action taken whenever a player under contract moves between clubs. It refers to the transferring of a player\u0027s registration from one association football club to another."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::transfer.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "warheade"
        },
        "content": "*Jersey Number*: a number allocated to each player in a teamName to uniquely identify the player. Jersey Numbers usually range from 1 to 35 and will be printed at the back"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "warheade"
        },
        "content": "                 of players\u0027 jerseys during matches for identification purposes."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "warheade"
        },
        "content": "*Mainstream OS*: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huyidi": 59,
      "warheade": 187,
      "yingrong1996": 110,
      "-": 68,
      "E0176106": 4
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d League Tracker - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Welcome to the League Tracker User Guide! You can choose a topic below to find out how to use our product."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "By: `CS2113-AY1819S2-M11-1`\tSince: `Jan 2019` Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "The League Tracker is an application that provides you with an efficient method of managing information of a football league."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "It features easy access and modification of information of teams and players in the league. The League Tracker will help"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "you in keeping track of the current situation in a football league."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "This User Guide provides information on the League Tracker installation process and commands of each feature. To get started, you can go to the Quick Start section."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".  Ensure that you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ".  Download the latest `LeagueTracker.jar`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your League Tracker System."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": ".  Double-click the file to start the application. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Welcome page of the GUI"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Location of Command Box in GUI"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::UiCommandBox.png[]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Viewing Help"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can view the information of all commands in the League Tracker by using the Help command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "Help is also shown if you enter an incorrect command e.g. `awihda`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "The League Tracker has five main features: *player* feature, *team* feature,  *match* feature, *finance* feature and *export*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "feature. These features will help you to manage useful information of your league more conveniently and effectively."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Players"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": "The players feature in the application helps you to manage information of players in the league."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Add Player*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "You can use the `addPlayer` command to add a new player to the League Tracker. +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "Format ："
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `addPlayer NAME p/POSITION a/AGE sal/SALARY gs/GOALSSCORED ga/GOALSASSISTED tm/TEAM ctry/COUNTRY jn/JERSEY_NUMBER"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "app/APPEARANCE hs/HEALTHSTATUS t/TAGS`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `addPlayer Lionel Messi p/RW a/31 sal/20 gs/20 ga/20 tm/FC Barcelona ctry/Argentina jn/10 app/54 hs/Healthy`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": "If the player has been successfully added, a success message will be displayed to the user with all attributes"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "listed(see figure 3)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "IMPORTANT: In League Tracker, a player could only be added if he/she belongs to an existing team in League"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": "Tracker. Therefore, if the `Team` entered does not match any existing team in Leauge Tracker, player"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "addition will not be successfully executed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": "NOTE: Player names should be *spaces or alphanumeric characters*; +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": "      Positions should be *spaces or alphanumeric characters*; +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": "      Ages should be *integers between 0 and 100*; +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": "      Salaries should be *positive numbers in million USD*; +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": "      Goals Scored should be *a non-negative integer*; +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": "      Goals Assisted should be *a non-negative integer*; +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": "      Nationality should be a *string*; +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "      Jersey Number should be *an integer from 0 to 35*; +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "      Numbers of appearance should be *a non-negative integer*; +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "      Health Status should be a *string*;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Success Message displayed after adding a player"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::addSuccess.png[]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d *Quick-add Player*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": "As a full-detail `addPlayer` Command requires numerous attribute inputs from users,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "warheade"
        },
        "content": "League Tracker provides an alternative command to *add player faster* with less attribute input"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "warheade"
        },
        "content": "needed from the user. You can use the `addFast` command to add a new player to the League Tracker."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "warheade"
        },
        "content": "Only `NAME`, `POSITION`, `AGE`, `SALARY`, `TEAM`, `NATIONALITY`, `JERSEYNUMBER` and `TAGS (optional)`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": " are needed as input.`GOALSSCORED`,`GOALSASSISTED`,`APPEARANCE` and `HEALTHSTATUS` are set to default values (0,0,0 and Healthy)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "warheade"
        },
        "content": "Format ："
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `addFast NAME p/POSITION a/AGE sal/SALARY tm/TEAM ctry/NATIONALITY jn/JERSEYNUMBER t/TAGS`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "warheade"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `addFast Lionel Messi p/RW a/31 sal/20 tm/FC Barcelona ctry/Argentina jn/10`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "warheade"
        },
        "content": "If the player has been successfully added, a success message will be displayed to the user with all attributes listed"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "warheade"
        },
        "content": "(including those that assume default values)(See figure 4)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Success Message displayed after using addFast Command to add a player"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::addFastSuccess.png[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d *Delete Player By Index*"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "warheade"
        },
        "content": "You can use the `deletePlayer` command to delete an existing player in the League Tracker."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "warheade"
        },
        "content": "First do a `listPlayer` command to obtain the index of player in the league record. Then perform `deletePlayer` command using this"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "warheade"
        },
        "content": "index."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "warheade"
        },
        "content": "Format ："
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `deletePlayer Index`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "warheade"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "warheade"
        },
        "content": ". Do a `listPlayer` command to obtain the index of all players in the league record.(See figure 5)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Information of all players in the league record after executing the `listPlayer` command"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::delete_PlayerListed.png[]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0176106"
        },
        "content": ". Assume that the user wants to delete the player named \"Cristiano Ronaldo\" with index 2, the user just needs to input"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "warheade"
        },
        "content": "`deletePlayer 2` as the delete command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "warheade"
        },
        "content": ". If successfully deleted, a message will be shown to the user. (See figure 6)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Success Message displayed after using delete Command to delete a player"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::deleteSuccess.png[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "warheade"
        },
        "content": "WARNING: For current versions of League Tracker, deletion of players are permanent"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d *Delete Player By Name and Team Name(coming in v1.4)*"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "warheade"
        },
        "content": "You can use the `deletePlayer` command to delete an existing player in the League Tracker. +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "warheade"
        },
        "content": "Format ："
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `deletePlayer NAME TEAM`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "warheade"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `deletePlayer Lionel Messi tm/FC Barcelona`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d *Delete All Players in League Tracker*"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "warheade"
        },
        "content": "You can use the `clearPlayer` command to delete all existing players in the League Tracker. +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "warheade"
        },
        "content": "Format :"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `clearPlayer`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "warheade"
        },
        "content": "All players in League Tracker will be deleted and a successful message will be displayed to"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "warheade"
        },
        "content": "user (see figure 7)."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Success Message displayed to user after deleting all existing players in League Tracker"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::clearPlayerSuccess.png[]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "warheade"
        },
        "content": "WARNING: For current versions of League Tracker, deletion of players are permanent"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d *Display Player Profile By Index*"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "warheade"
        },
        "content": "You can use the `displayProfile` command to display the whole profile of a selected player. +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "warheade"
        },
        "content": "First, you should do a `listPlayer` Command to obtain the index of the target player."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "warheade"
        },
        "content": "Then, you can use this `displayProfile` Command for the full player profile for the player."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Format ："
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `listPlayer` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `displayProfile Index`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `listPlayer` +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `displayProfile 1`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "warheade"
        },
        "content": "If the player with the index exists, a success message will be displayed to the user containing all information"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "warheade"
        },
        "content": "regarding the player"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Success Message displayed to user with a viewAll Command by index"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::viewAllSuccess.png[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huyidi"
        },
        "content": "\u003d\u003d\u003d\u003d *Edit Player Profile*"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huyidi"
        },
        "content": "You can use this `editPlayer` command to edit information of an existing player\u0027s profile in the League Tracker. +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "warheade"
        },
        "content": "First, you need to do a `listPlayer` command to obtain the index number of the target player in league tracker\u0027s record."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "warheade"
        },
        "content": "This step is *necessary*."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Then, you can use this command to key in the attribute information you want to edit. Consequently the profile of"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huyidi"
        },
        "content": "the target player will be edited accordingly with the information provided."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huyidi"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Our `editPlayer` command allows the user to make changes to one or more attributes in the player profile."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Simply follow the format and key in only the attribute information that you want to update."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Please note that you need to key in at least one attribute to make the `editPlayer` command meaningful."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "warheade"
        },
        "content": "Old values will be overwritten by new inputs (including tags)."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "warheade"
        },
        "content": "NOTE: You will not be allowed to change player\u0027s `team` using the `editPlayer` command. +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "warheade"
        },
        "content": "      It should be done using the `transfer` Command."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Format ："
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "warheade"
        },
        "content": "* `listPlayer` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "warheade"
        },
        "content": "* `editPlayer INDEX_NUMBER [n/NAME] [p/POSITIONPLAYED] [a/AGE] [sal/SALARY] [gs/GOALSSCORED] [ga/GOALSASSISTED]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "warheade"
        },
        "content": " [ctry/NATIONALITY] [jn/JERSEYNUMBER] [app/APPEARANCE] [hs/HEALTHSTATUS] [t/TAGS]`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huyidi"
        },
        "content": "(\u0027[]\u0027 means that this entry is optional, If it is not typed in the input, the original information for this particular"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huyidi"
        },
        "content": "attribute will be kept unchanged)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "warheade"
        },
        "content": "let\u0027s say you want to edit the player profile of a player with name \"Lionel Messi\""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Specifically, you want to change the salary information to be \u00272000\u0027 in the league tracker."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "warheade"
        },
        "content": "* `listPlayer` +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Information displayed after `listPlayer` command"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::edit_list.png[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "warheade"
        },
        "content": "From the `listPlayer` command (See figure 9), you find out that the index number of player \u0027Lionel Messi\u0027 is 1."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "warheade"
        },
        "content": "* `editPlayer 1 sal/2000`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "huyidi"
        },
        "content": "If the edition is executed successfully, a success message will be displayed to the user containing the player"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "warheade"
        },
        "content": "profile after edition(See figure 10)."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "huyidi"
        },
        "content": ".Success Message after edition"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "huyidi"
        },
        "content": "image::edit_success.png[]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d *Search for Players using keywords*"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "warheade"
        },
        "content": "You can use the `findPlayer` command to search for players in League Tracker using certain keywords."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "warheade"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `findPlayer KEYWORD`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "warheade"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `findPlayer Messi`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "warheade"
        },
        "content": "If one or more players with such keyword in his/her name exist in the league tracker, his/her/their profile details"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "warheade"
        },
        "content": "will be displayed.(See figure 11)."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Successful search displaying the profile of a player \"Lionel Messi\" whose name matches the keyword \"Messi\""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::findPlayer.png[]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d *List All Players in League Tracker*"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "warheade"
        },
        "content": "You can use the `listPlayer` command to check the list of all players with their details in League Tracker. +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "warheade"
        },
        "content": "Format ："
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `listPlayer`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "warheade"
        },
        "content": "A list of all players\u0027 information will be displayed following the command.(See figure 12)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Successful `listPlayer` Command displaying all player profiles in League Tracker"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::listSuccess.png[]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d *Sort Players in League Tracker*"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "warheade"
        },
        "content": "You can use the `sortPlayer` command to sort the player list by alphabetical order."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "warheade"
        },
        "content": "Format :"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `sortPlayer`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "warheade"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "warheade"
        },
        "content": "* `listPlayer`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "warheade"
        },
        "content": "Figure 13 shows a player list before sorting."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "warheade"
        },
        "content": ".A player list in League Tracker before sorting obtained by executing a `listPlayer` Command"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::sort_beforesorting.png[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "warheade"
        },
        "content": "* `sortPlayer`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "warheade"
        },
        "content": "If the sortPlayer command is executed successfully, a success message will be displayed to user. (see figure 14)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Success Message after executing a `sortPlayer` command"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::sort_success.png[]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "warheade"
        },
        "content": "* `listPlayer`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "warheade"
        },
        "content": "Now do another `listPlayer` command, you can see that the player list has been alphabetically sorted.(See figure 15)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "warheade"
        },
        "content": ".The player list after executing a `sortPlayer` command"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::sort_aftersorting.png[]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d Transfer Player"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "warheade"
        },
        "content": "You can use the `transfer` command to transfer a player to another existing team in League Tracker."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "warheade"
        },
        "content": "Format :"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `transfer PLAYERNAME tm/DESTINATIONTEAM jn/NEWJERSEYNUMBER`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "warheade"
        },
        "content": "NOTE: The player must already exist in League Tracker. +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "warheade"
        },
        "content": "      The destination team must already exist in League Tracker +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "warheade"
        },
        "content": "      The destination team shall not be the same as the player\u0027s current team +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "warheade"
        },
        "content": "      The Jersey Number must be available in the destination team"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "warheade"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "warheade"
        },
        "content": "Let\u0027s say you want to transfer the player \"Lionel Messi\" who is currently in team \"FC Barcelona\" to team \"Juventus\","
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "warheade"
        },
        "content": "his jersey number will be 10 in Juventus."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "warheade"
        },
        "content": "(Here in example, assume that the conditions stated above are all met)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "warheade"
        },
        "content": "* `transfer Lionel Messi tm/Juventus jn/10`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "warheade"
        },
        "content": "If the transfer is successfully executed, a success message will be shown to the user with player\u0027s name, his team before"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "warheade"
        },
        "content": "transfer, his team after transfer and his new jersey number.(See figure 16)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Example of a success message displayed after a successful transfer"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::transfer_success.png[]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d Display Player Profile using player\u0027s index number"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "warheade"
        },
        "content": "You can use the `displayProfile` command to display the profile of a specific player identified by his index number"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "warheade"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "warheade"
        },
        "content": "*  `displayProfile INDEXNUMBER`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "warheade"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "warheade"
        },
        "content": "* `displayProfile 1`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "warheade"
        },
        "content": "If the index number correctly identifies a player, the player\u0027s profile will be displayed to user.(See figure 17)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "warheade"
        },
        "content": ".Displaying player\u0027s profile with index number 1"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "warheade"
        },
        "content": "image::display_index_success.png[]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Teams"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The teams feature in the application helps you to manage information of football teams in the league. "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Add Team*"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Add Team command to add a new team to the League Tracker. +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `addteam NAME c/COUNTRY s/SPONSORSHIP [t/TAGS]`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "E0176106"
        },
        "content": " `addteam Liverpool c/United Kingdom s/2000000 t/red` +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Adds a new Team with the specified details."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".After Adding"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "image::addteam.png[]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Delete Team*"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Delete Team command to delete an existing Team from League Tracker. +"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `delteam INDEX`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `listteam` +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".After listing"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "image::listteam.png[]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `delteam 1` +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Deletes the 1st Team in the Team list."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".After deleting"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "image::delteam.png[]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Edit Team*"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Edit Team command to edit information of a Team in League Tracker. +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `editteam INDEX [c/COUNTRY] [s/SPONSORSHIP] [t/TAGS]`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `listteam` +"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".After Listing"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "image::listteam2.png[]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "* `editteam 1 n/United Malaysia` +"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".After Editing"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "image::editteam.png[]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Edits the name of the 1st Team in the Team list to United Malaysia."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *List Team*"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "You can use the List Team command to see the list of all current teams in the league. +"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `listteam`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".After Listing"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "image::listteam.png[]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "\u003d\u003d\u003d\u003d *View Team*"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "You can use the View Team command to see the deatils of a Team from the league tracker. +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "warheade"
        },
        "content": "NOTE: Running this command will display all players in the team, thus you can use this if you want to know who are in"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "warheade"
        },
        "content": "the team."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Format : `viewteam INDEX`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "* `listteam` +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".After Listing"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "image::listteam3.png[]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "* `viewteam 1` +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ".After Viewing"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "image::viewteam.png[]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Display the 1st team\u0027s details."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Matches"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The Match Schedule Feature in the application helps you to manage information of matches in the league. "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Add Matches*"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Add Matches command to add a new match to the League Tracker. +"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `addmatch dd mmm yyyy h/hometeam a/awayteam`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "E0176106"
        },
        "content": " `addmatch 28 Feb 2019 h/Fulham a/Chelsea` +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "huyidi"
        },
        "content": " "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Adds a new match with the specified details."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Delete Matches*"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Delete Matches command to delete an existing match from League Tracker. +"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `deletematch INDEX`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `listmatch` +"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `deletematch 1` +"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Deletes the 1st match in the match list."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *List Matches*"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the List Matches command to see the list of all matches in the current league. +"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `listmatch`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Update Matches*"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Update Matches command to update the outcome of an existing match in League Tracker. +"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Format : `updatematch INDEX h/homerevenue a/awayrevenue g/goalscorer o/owngoalscorer`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `listmatch` +"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `updatematch 1 h/200 a/100 g/Gonzalo Higuain g/Calum Chambers o/Tim Ream` +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Updates the 1st match in the match list with specified match results."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Finance"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "E0176106"
        },
        "content": "The Finance Feature in the application helps you to manage and keep track of financial conditions in the league."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Get League Finance*"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Get League Finance command to view the total financial income in USD of the league. +"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Format : `getLeagueFinance`"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "huyidi"
        },
        "content": "`getLeagueFinance`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *Get Team Finance*"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Get Team Finance command to view the financial condition in USD of a selected Team in League Tracker. +"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Format : `finance INDEX`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "E0176106"
        },
        "content": "* `ListTeam` +"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "huyidi"
        },
        "content": "* `finance 1`"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "E0176106"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d\u003d *List Team Finance*"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the List Team Finance command to view the list of financial condition in USD of all Teams in the league. +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "huyidi"
        },
        "content": "Format : `listFinance`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "huyidi"
        },
        "content": "`listFinance` +"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d Export"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "warheade"
        },
        "content": "The Export Feature in League Tracker allows user to export data stored in League Tracker to Excel files to facilitate"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "warheade"
        },
        "content": "data transfer, storage and further processing."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d *Export Player Profiles to an Excel File*"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d *Export Team Profiles to an Excel File*"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d *Export Finance Records to an Excel File*"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "warheade"
        },
        "content": "\u003d\u003d\u003d\u003d *Export Match Information to an Excel File*"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "warheade"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Exiting the program"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "E0176106"
        },
        "content": "You can use the Exit command to exit the program. +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "E0176106"
        },
        "content": "League tracker data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "huyidi"
        },
        "content": "You do not need to save data manually. League tracker data are saved in a file called `leaguetracker.txt` in the project root folder."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "E0176106"
        },
        "content": "*Q: How do I transfer my data to another Computer?* +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "E0176106"
        },
        "content": "A: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous LeagueTracker folder."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Players"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "warheade"
        },
        "content": "Add a Player to League Tracker: `addPlayer` +"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "warheade"
        },
        "content": "Add a Player to League Tracker faster : `addFast` +"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "warheade"
        },
        "content": "Delete a Player from League Tracker: `deletePlayer` +"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "warheade"
        },
        "content": "Delete all Players from League Tracker : `clearPlayer` +"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "warheade"
        },
        "content": "Edit a Player\u0027s Profile : `editPlayer` +"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "warheade"
        },
        "content": "Export all player profiles to an Excel file : `exportPlayer` +"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "warheade"
        },
        "content": "Search for players using keywords : `findPlayer` +"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "warheade"
        },
        "content": "List all Players in the league : `listPlayer` +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "warheade"
        },
        "content": "Sort League Tracker player list : `sortPlayer` +"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "warheade"
        },
        "content": "Transfer a player to another team : `transfer` +"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "warheade"
        },
        "content": "Display a Player\u0027s Profile : `displayProfile`"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Teams"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Add Team to League : `addteam` +"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Delete Team from League : `delteam` +"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "Edit Team\u0027s Profile : `editteam` +"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "List Team in League : `listteam` +"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "warheade"
        },
        "content": "View Team in League : `viewteam` +"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "warheade"
        },
        "content": "Export all Team profiles to an Excel file : `exportTeam`"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Match Schedule"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Add Match to League : `AddMatch` +"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Delete Match from League : `DeleteMatch` +"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "warheade"
        },
        "content": "List Matches in League : `ListMatches` +"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "warheade"
        },
        "content": "Export all match information to an Excel file : `exportMatch`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "E0176106"
        },
        "content": "\u003d\u003d\u003d Finance"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Get League Finance : `GetLeagueFinance` +"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "E0176106"
        },
        "content": "Get Team Finance : `GetTeamFinance` +"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "warheade"
        },
        "content": "List Team Finance : `ListTeamFinance` +"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "warheade"
        },
        "content": "Export all Finance records to an Excel file : `exportFinance`"
      }
    ],
    "authorContributionMap": {
      "huyidi": 73,
      "warheade": 394,
      "yingrong1996": 48,
      "E0176106": 159,
      "-": 72
    }
  },
  {
    "path": "src/seedu/addressbook/Main.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.ui.Gui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.ui.Stoppable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Main entry point to the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application implements Stoppable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Version info of the program. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String VERSION \u003d \"League Tracker - Version 1.4\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Gui gui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        gui \u003d new Gui(new Logic(), VERSION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        gui.start(primaryStage, this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super.stop();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "warheade": 1,
      "yingrong1996": 1,
      "-": 37
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static seedu.addressbook.ui.Gui.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook addressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "    protected List\u003c? extends ReadOnlyPlayer\u003e relevantPlayers;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    protected List\u003c? extends ReadOnlyMatch\u003e relevantMatches;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    protected List\u003c? extends ReadOnlyTeam\u003e relevantTeams;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    protected List\u003c? extends ReadOnlyFinance\u003e relevantFinances;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @param targetIndex last visible listing index of the target player"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command(int targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setTargetIndex(targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of players."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param playersDisplayed used to generate summary"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return summary message for persons displayed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static String getMessageForPlayerListShownSummary(List\u003c? extends ReadOnlyPlayer\u003e playersDisplayed) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return String.format(Messages.MESSAGE_PLAYERS_LISTED_OVERVIEW, playersDisplayed.size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of Matches."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static String getMessageForMatchListShownSummary(List\u003c? extends ReadOnlyMatch\u003e matchesDisplayed) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return String.format(Messages.MESSAGE_MATCHES_LISTED_OVERVIEW, matchesDisplayed.size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of Teams."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static String getMessageForTeamListShownSummary(List\u003c? extends ReadOnlyTeam\u003e teamsDisplayed) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return String.format(Messages.MESSAGE_TEAMS_LISTED_OVERVIEW, teamsDisplayed.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static String getMessageForFinanceListShownSummary(List\u003c? extends ReadOnlyFinance\u003e financesDisplayed) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return String.format(Messages.MESSAGE_FINANCES_LISTED_OVERVIEW, financesDisplayed.size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new UnsupportedOperationException(\"This method should be implement in child classes\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //Note: it is better to make the execute() method abstract, by replacing the above method with the line below:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    //public abstract CommandResult execute();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Supplies the data the command will operate on."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setData(AddressBook addressBook,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        List\u003c? extends ReadOnlyPlayer\u003e relevantPlayers,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                        List\u003c? extends ReadOnlyTeam\u003e relevantTeams,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                        List\u003c? extends ReadOnlyMatch\u003e relevantMatches,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                        List\u003c? extends ReadOnlyFinance\u003e relevantFinances) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.relevantPlayers \u003d relevantPlayers;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.relevantTeams \u003d relevantTeams;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.relevantMatches \u003d relevantMatches;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.relevantFinances \u003d relevantFinances;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Extracts the the target player in the last shown list from the given arguments."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": "    protected ReadOnlyPlayer getTargetPlayer() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return relevantPlayers.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    protected ReadOnlyMatch getTargetMatch() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return relevantMatches.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    protected ReadOnlyTeam getTargetTeam() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return relevantTeams.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    protected ReadOnlyFinance getTargetFinance() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return relevantFinances.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTargetIndex(int targetIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 9,
      "warheade": 12,
      "yingrong1996": 17,
      "-": 65,
      "E0176106": 17
    }
  },
  {
    "path": "src/seedu/addressbook/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The feedback message to be shown to the user. Contains a description of the execution result */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /** The list of players that was produced by the command */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final List\u003c? extends ReadOnlyPlayer\u003e relevantPlayers;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /** The list of teams that was produced by the command */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final List\u003c? extends ReadOnlyTeam\u003e relevantTeams;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /** The list of matches that was produced by the command */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final List\u003c? extends ReadOnlyMatch\u003e relevantMatches;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /** The list of finances that was produced by the command */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private final List\u003c? extends ReadOnlyFinance\u003e relevantFinances;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /** Constructor for result which do not return any list*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "        relevantPlayers \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        relevantTeams \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        relevantMatches \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        relevantFinances \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult(String feedbackToUser,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "                         List\u003c? extends ReadOnlyPlayer\u003e relevantPlayers,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                         List\u003c? extends ReadOnlyTeam\u003e relevantTeams,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                         List\u003c? extends ReadOnlyMatch\u003e relevantMatches,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                         List\u003c? extends ReadOnlyFinance\u003e relevantFinances) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.relevantPlayers \u003d relevantPlayers;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.relevantTeams \u003d relevantTeams;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.relevantMatches \u003d relevantMatches;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.relevantFinances \u003d relevantFinances;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns list of persons relevant to the command command result, if any."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyPlayer\u003e\u003e getRelevantPlayers() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return Optional.ofNullable(relevantPlayers);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns list of matches relevant to the command command result, if any."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyMatch\u003e\u003e getRelevantMatches() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Optional.ofNullable(relevantMatches);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns list of teams relevant to the command command result, if any."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyTeam\u003e\u003e getRelevantTeams() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Optional.ofNullable(relevantTeams);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Returns list of finances relevant to the command command result, if any."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyFinance\u003e\u003e getRelevantFinances() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return Optional.ofNullable(relevantFinances);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 12,
      "warheade": 8,
      "yingrong1996": 18,
      "-": 30,
      "E0176106": 13
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Exits the program.\\n\\t\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWEDGEMENT \u003d \"Exiting League Tracker as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 2,
      "-": 17
    }
  },
  {
    "path": "src/seedu/addressbook/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.finance.ExportFinanceCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.GetFinanceCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.GetLeagueFinanceCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.ListFinanceCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.RankFinanceCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.ViewFinanceCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.AddMatchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.ClearMatchCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.DeleteMatchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.match.ExportMatchCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.FindMatchCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.match.ListMatchCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.AddFastCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.EditPlayerCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.ExportPlayerCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.SortCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.ViewAllCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.AddTeam;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.ClearTeam;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.DeleteTeam;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.EditTeam;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.FindTeam;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.ListTeam;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.ViewTeam;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows program usage instructions.\\n\\t\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_ALL_USAGES \u003d \"Below is a help sheet for commands available in League Tracker.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \\n\" + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"1. Commands on Players in League Tracker \\n\" + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"1.1 Add a player to League Tracker \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"---------------------------------------------------------\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"--------------------------------------------- \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"1.2 Add a player to League Tracker faster\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\\n\" + AddFastCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"---------------------------------------------------------\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"--------------------------------------------- \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"1.3 Edit a player profile in League Tracker\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\\n\" + EditPlayerCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"---------------------------------------------------------\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"--------------------------------------------- \\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"1.4 Delete an existing player in League Tracker\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"---------------------------------------------------------\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"--------------------------------------------- \\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"1.5 Delete all player profiles in League Tracker (CAREFUL)\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"----------------------------------------------------------\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-------------------------------------------- \\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"1.6 Use keywords to search for players in the League Tracker\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"----------------------------------------------------------\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-------------------------------------------- \\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"1.7 List all players in League Tracker\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"---------------------------------------------------------\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"--------------------------------------------- \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"1.8 Sort players in League Tracker alphabetically\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + SortCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"----------------------------------------------------------\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-------------------------------------------- \\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"1.9 Export player profile in League Tracker to an Excel file\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\\n\" + ExportPlayerCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"----------------------------------------------------------\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-------------------------------------------- \\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"1.10 View the player profile by index\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ViewAllCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \\n\" + \"\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"2. Commands on Teams in League Tracker \\n\" + \"\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"2.1 Add a team to League Tracker\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + AddTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-----------------------------------------------------------\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"------------------------------------------- \\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"2.2 Edit a team profile in League Tracker\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + EditTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"------------------------------------------------------------\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"------------------------------------------ \\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"2.3 Delete an existing team in League Tracker\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + DeleteTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-----------------------------------------------------------\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"------------------------------------------- \\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"2.4 Delete all teams in League Tracker (CAREFUL)\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + ClearTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"----------------------------------------------------------\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-------------------------------------------- \\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"2.5 Use keywords to search for teams in the League Tracker\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + FindTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"----------------------------------------------------------\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-------------------------------------------- \\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"2.6 List all teams existing in League Tracker\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"\\n\" + ListTeam.MESSAGE_USAGE"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"---------------------------------------------------------\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"--------------------------------------------- \\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"2.7 View full profile of a team in League Tracker \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\\n\" + ViewTeam.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \\n\" + \"\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"3. Commands on Finance in League Tracker \\n\" + \"\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"3.1 Obtain the financial records of team by index\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"\\n\" + GetFinanceCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-------------------------------------------------------\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"----------------------------------------------- \\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"3.2 Obtain the financial records of the whole league\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"\\n\" + GetLeagueFinanceCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"------------------------------------------------------\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"------------------------------------------------ \\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"3.3 Rank the teams based on their financial conditions\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"\\n\" + RankFinanceCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-----------------------------------------------------\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"------------------------------------------------- \\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"3.4 List all financial records of teams in the League Tracker\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\\n\" + ListFinanceCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-----------------------------------------------------\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"------------------------------------------------- \\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"3.5 Show all details of the finance of the team\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\\n\" + ViewFinanceCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-----------------------------------------------------\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"------------------------------------------------- \\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"3.6 Export all finance records into an Excel File\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\\n\" + ExportFinanceCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \\n\" + \"\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"4. Commands on Finance in League Tracker \\n\" + \"\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"4.1 Add a match to League Tracker\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + AddMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-----------------------------------------------------\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"------------------------------------------------- \\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"4.2 Delete an existing match from League Tracker\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + DeleteMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-----------------------------------------------------\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"------------------------------------------------- \\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"4.3 Delete all matches in League Tracker (CAREFUL)\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + ClearMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"----------------------------------------------------\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-------------------------------------------------- \\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"4.4 Use keywords to search for matches in League Tracker\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"\\n\" + FindMatchCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"----------------------------------------------------\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-------------------------------------------------- \\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"4.5 List all matches in League Tracker\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\\n\" + ListMatchCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-----------------------------------------------------\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"------------------------------------------------- \\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"4.6 Export all match information in League Tracker to an Excel File\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\\n\" + ExportMatchCommand.MESSAGE_USAGE + \"\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \\n\" + \"\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"5. General commands in League Tracker \\n\" + \"\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"5.1 Display a help sheet\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"----------------------------------------------------\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"-------------------------------------------------- \\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"5.2 Exit from League Tracker\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\n\" + ExitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 8,
      "warheade": 119,
      "yingrong1996": 19,
      "-": 27,
      "E0176106": 4
    }
  },
  {
    "path": "src/seedu/addressbook/commands/finance/ExportFinanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.finance.UniqueFinanceList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.export.FinanceApachePoiWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": " * This Command allows user to export finance details in the league tracker to an Excel file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class ExportFinanceCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exportFinance\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"This Command will export all finance details in the league tracker to an Excel sheet \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"For now, the output path has been hard-coded to be \u0027exported_finance_record.xls\u0027. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Every exportFinance Command will overwrite the excel file if it already exists \\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Finance records are successfully exported\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_NPE \u003d \"Please check your parameters... Object does not exist\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_DFE \u003d \"Duplicated finance records created...\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public ExportFinanceCommand () {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "            addressBook.refreshFinance();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "            List\u003cReadOnlyFinance\u003e allFinances \u003d addressBook.getAllFinances().immutableListView();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "            FinanceApachePoiWriter writer \u003d new FinanceApachePoiWriter(allFinances);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "            writer.write();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (UniqueFinanceList.DuplicateFinanceException dfe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(MESSAGE_DFE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(MESSAGE_NPE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 45
    }
  },
  {
    "path": "src/seedu/addressbook/commands/finance/GetFinanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.commands.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.Finance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * check the financial profit in USD of a team identified using it\u0027s last displayed index from the League."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class GetFinanceCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"getfinance\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Checks the financial condition of a team identified using its last displayed index from the League.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ONE \u003d \"Team selected: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_TWO \u003d \"Finance of the team selected: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_THREE \u003d \"1st quarter finance: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FOUR \u003d \"2nd quarter finance: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FIVE \u003d \"3rd quarter finance: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_SIX \u003d \"4th quarter finance: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_SEVEN \u003d \"Histogram of four quarters: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public GetFinanceCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            final ReadOnlyTeam target \u003d getTargetTeam();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            Finance finance \u003d new Finance(target);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            String teamName \u003d finance.getTeamName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            String histogramString \u003d finance.getHistogramString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ONE + teamName + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    + MESSAGE_SUCCESS_TWO + finance.getFinance() + \"\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    + MESSAGE_SUCCESS_THREE + finance.getQuarterOne() + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    + MESSAGE_SUCCESS_FOUR + finance.getQuarterTwo() + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    + MESSAGE_SUCCESS_FIVE + finance.getQuarterThree() + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    + MESSAGE_SUCCESS_SIX + finance.getQuarterFour() + \"\\n\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    + MESSAGE_SUCCESS_SEVEN + \"\\n\" + histogramString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 55,
      "warheade": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/finance/GetLeagueFinanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.commands.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.Histogram;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.UniqueFinanceList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * Give total finance of the league."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class GetLeagueFinanceCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"getlf\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Get total Finance of the league.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_FINANCE_REFRESH_PROBLEM \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            \"invalid command due to finance refresh problem: duplicated team\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final int INT_OF_QUARTER_ONE \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final int INT_OF_QUARTER_TWO \u003d 2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final int INT_OF_QUARTER_THREE \u003d 3;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final int INT_OF_QUARTER_FOUR \u003d 4;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Finance of the league: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ONE \u003d \"1st quarter finance: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_TWO \u003d \"2nd quarter finance: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_THREE \u003d \"3rd quarter finance: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FOUR \u003d \"4th quarter finance: \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FIVE \u003d \"Histogram of four quarters: \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            addressBook.refreshFinance();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } catch (UniqueFinanceList.DuplicateFinanceException dfe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new CommandResult(MESSAGE_FINANCE_REFRESH_PROBLEM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        List\u003cReadOnlyFinance\u003e allFinances \u003d addressBook.getAllFinances().immutableListView();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double totalFinance \u003d getFinanceSum(allFinances);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double totalFinanceQuarterOne \u003d getFinancesWithCertainQuarter(allFinances, INT_OF_QUARTER_ONE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double totalFinanceQuarterTwo \u003d getFinancesWithCertainQuarter(allFinances, INT_OF_QUARTER_TWO);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double totalFinanceQuarterThree \u003d getFinancesWithCertainQuarter(allFinances, INT_OF_QUARTER_THREE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double totalFinanceQuarterFour \u003d getFinancesWithCertainQuarter(allFinances, INT_OF_QUARTER_FOUR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Histogram leagueHistogram \u003d new Histogram(4,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                totalFinanceQuarterOne, totalFinanceQuarterTwo, totalFinanceQuarterThree, totalFinanceQuarterFour);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        String histogramString \u003d leagueHistogram.getHistogramString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + totalFinance + \"\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                + MESSAGE_SUCCESS_ONE + totalFinanceQuarterOne + \"\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                + MESSAGE_SUCCESS_TWO + totalFinanceQuarterTwo + \"\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                + MESSAGE_SUCCESS_THREE + totalFinanceQuarterThree + \"\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                + MESSAGE_SUCCESS_FOUR + totalFinanceQuarterFour + \"\\n\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                + MESSAGE_SUCCESS_FIVE + \"\\n\" + histogramString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * returns value of finance with a finance list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * @param allFinances"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * @return sum of finance of allFinances"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double getFinanceSum(List\u003cReadOnlyFinance\u003e allFinances) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double sumOfAllFinances \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (ReadOnlyFinance finance : allFinances) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            sumOfAllFinances +\u003d finance.getFinance();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return sumOfAllFinances;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * returns value of finance related to a certain time period."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * @param whichQuarter (relevant quarter of the year) for searching"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * @return value of finance within this quarter"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double getFinancesWithCertainQuarter(List\u003cReadOnlyFinance\u003e relatedFinances, int whichQuarter) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double certainQuarterFinance \u003d 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (ReadOnlyFinance finance : relatedFinances) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            if (whichQuarter \u003d\u003d INT_OF_QUARTER_ONE) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                certainQuarterFinance +\u003d finance.getQuarterOne();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            } else if (whichQuarter \u003d\u003d 2) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                certainQuarterFinance +\u003d finance.getQuarterTwo();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            } else if (whichQuarter \u003d\u003d 3) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                certainQuarterFinance +\u003d finance.getQuarterThree();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            } else if (whichQuarter \u003d\u003d 4) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                certainQuarterFinance +\u003d finance.getQuarterFour();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return certainQuarterFinance;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 97,
      "warheade": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/finance/ListFinanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.commands.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.UniqueFinanceList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * Lists all finances."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class ListFinanceCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listfinance\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Displays all Finances in the league tracker as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_FINANCE_REFRESH_PROBLEM \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            \"invalid command due to finance refresh problem: duplicated team\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            addressBook.refreshFinance();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } catch (UniqueFinanceList.DuplicateFinanceException dfe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new CommandResult(MESSAGE_FINANCE_REFRESH_PROBLEM);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        List\u003cReadOnlyFinance\u003e allFinances \u003d addressBook.getAllFinances().immutableListView();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(getMessageForFinanceListShownSummary(allFinances), null, null, null, allFinances);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 35,
      "warheade": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/finance/RankFinanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.commands.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.UniqueFinanceList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * Gives a ranked list of all finances."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class RankFinanceCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rankfinance\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Displays a ranked list of all Finances in the league tracker with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_FINANCE_REFRESH_PROBLEM \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            \"invalid command due to finance refresh problem: duplicated team\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            addressBook.refreshFinance();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            addressBook.sortFinance();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } catch (UniqueFinanceList.DuplicateFinanceException dfe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new CommandResult(MESSAGE_FINANCE_REFRESH_PROBLEM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        List\u003cReadOnlyFinance\u003e allFinances \u003d addressBook.getAllFinances().immutableListView();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(getMessageForFinanceListShownSummary(allFinances), null, null, null, allFinances);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 37,
      "warheade": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/finance/ViewFinanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.commands.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * Shows all details of the finance identified using the last displayed index from the finance list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class ViewFinanceCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewfinance\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows all details of the finance \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"identified by the index number in the last shown finance listing.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_VIEW_FINANCE_DETAILS \u003d \"Viewing Finance of Team: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public ViewFinanceCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            final ReadOnlyFinance target \u003d getTargetFinance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            if (!addressBook.containsFinance(target)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_FINANCE_NOT_IN_LEAGUE_TRACKER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_FINANCE_DETAILS, target.getAsTextShowAll()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_FINANCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 40,
      "warheade": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/match/AddMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.MatchDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.Score;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.TicketSales;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.team.TeamName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Adds a match to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class AddMatchCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addmatch\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a match to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Parameters: DATE h/HOMETEAM a/AWAYTEAM\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \" 17 MAR 2019 h/West Ham a/Huddersfield \\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New match added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MATCH \u003d \"This match already exists in the address book\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final Match toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AddMatchCommand(String date,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                      String home,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                      String away) throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.toAdd \u003d new Match("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new MatchDate(date),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new TeamName(home),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new TeamName(away),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new TicketSales(\"\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new TicketSales(\"\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new Score(\"\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AddMatchCommand(Match toAdd) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public ReadOnlyMatch getMatch() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            addressBook.addMatch(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (UniqueMatchList.DuplicateMatchException dme) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MATCH);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 1,
      "yingrong1996": 8,
      "E0176106": 63
    }
  },
  {
    "path": "src/seedu/addressbook/commands/match/ClearMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Clears the match list in address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class ClearMatchCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearmatch\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clear matches in address book permanently.\\n\\t\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"match list has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        addressBook.clearMatch();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 1,
      "yingrong1996": 5,
      "E0176106": 16
    }
  },
  {
    "path": "src/seedu/addressbook/commands/match/DeleteMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList.MatchNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Deletes a match identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class DeleteMatchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletematch\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Deletes the match identified by the index number used in the last match listing.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_DELETE_MATCH_SUCCESS \u003d \"Deleted match: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public DeleteMatchCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            final ReadOnlyMatch target \u003d getTargetMatch();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            addressBook.removeMatch(target);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_MATCH_SUCCESS, target));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_MATCH_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (MatchNotFoundException mnfe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_MATCH_NOT_IN_LEAGUE_TRACKER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 2,
      "yingrong1996": 4,
      "E0176106": 38
    }
  },
  {
    "path": "src/seedu/addressbook/commands/match/ExportMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.export.MatchApachePoiWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": " * This Command allows user to export the match profiles in the league record to an Excel file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class ExportMatchCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exportMatch\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"This Command will export all match information in the league tracker to an Excel sheet \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"For now, the output path has been hard-coded to be \u0027exported_match_record.xls\u0027. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Every exportMatch Command will overwrite the excel file if it already exists \\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All match information stored in League \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Tracker has been successfully exported\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_NPE \u003d \"Please check your parameters... Object does not exist\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public ExportMatchCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cReadOnlyMatch\u003e allMatches \u003d addressBook.getAllMatches().immutableListView();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "        MatchApachePoiWriter writer \u003d new MatchApachePoiWriter(allMatches);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "            writer.write();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(MESSAGE_NPE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 42
    }
  },
  {
    "path": "src/seedu/addressbook/commands/match/FindMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Finds and lists all matches in address book with date that contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class FindMatchCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findmatch\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Finds all matches with date that contains any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" MAR APR JUN \\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public FindMatchCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cReadOnlyMatch\u003e matchesFound \u003d getMatchesWithDateContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(getMessageForMatchListShownSummary(matchesFound), null, null, matchesFound, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Retrieve all matches in the address book with date containing some of the specified keywords."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return list of matches found"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cReadOnlyMatch\u003e getMatchesWithDateContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cReadOnlyMatch\u003e matchedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (ReadOnlyMatch match : addressBook.getAllMatches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            final Set\u003cString\u003e wordsInDate \u003d new HashSet\u003c\u003e(match.getDate().getWordsInDate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            if (!Collections.disjoint(wordsInDate, keywords)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                matchedMatches.add(match);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return matchedMatches;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 1,
      "warheade": 1,
      "yingrong1996": 11,
      "E0176106": 50
    }
  },
  {
    "path": "src/seedu/addressbook/commands/match/ListMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Lists all matches in the league tracker to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class ListMatchCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listmatch\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Displays all matches in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cReadOnlyMatch\u003e allMatches \u003d addressBook.getAllMatches().immutableListView();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(getMessageForMatchListShownSummary(allMatches), null, null, allMatches, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 1,
      "warheade": 1,
      "yingrong1996": 5,
      "E0176106": 19
    }
  },
  {
    "path": "src/seedu/addressbook/commands/match/UpdateMatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.commands.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.MatchDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.Score;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.TicketSales;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList.MatchNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList.MatchUpdatedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UpdateMatchDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.player.UniquePlayerList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.team.TeamName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList.TeamNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Updates a match identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class UpdateMatchCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"updatematch\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Updates the details of the match identified by the index number used in the displayed match list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"(listmatch must be used before this command to retrieve index for team to be deleted)\\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"h/HOMETICKETSALES \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"a/AWAYTICKETSALES \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"[g/GOALSCORERS] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"[o/OWNGOALSCORERS]\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"h/1395 a/592 g/John g/Jack o/Jane o/Bob\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_UPDATE_MATCH_SUCCESS \u003d \"Updated match: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final UpdateMatchDescriptor updateMatchDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UpdateMatchCommand(int targetVisibleIndex, String homeSales, String awaySales,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                              List\u003cString\u003e goalScorers, List\u003cString\u003e ownGoalScorers) throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cName\u003e goalScorerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (String playerName : goalScorers) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            goalScorerList.add(new Name(playerName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cName\u003e ownGoalScorerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (String playerName : ownGoalScorers) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            ownGoalScorerList.add(new Name(playerName));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.updateMatchDescriptor \u003d new UpdateMatchDescriptor(homeSales, awaySales,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                                                                goalScorerList, ownGoalScorerList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            final ReadOnlyMatch target \u003d getTargetMatch();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            Match updatedMatch \u003d createUpdateMatch(target, updateMatchDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            addressBook.updateMatch(target, updatedMatch);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_UPDATE_MATCH_SUCCESS, updatedMatch));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_MATCH_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (MatchNotFoundException mnfe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_MATCH_NOT_IN_LEAGUE_TRACKER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (MatchUpdatedException mue) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_MATCH_UPDATED_BEFORE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (TeamNotFoundException tnfe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_TEAM_NOT_IN_LEAGUE_TRACKER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (UniquePlayerList.PlayerNotInTeamException pnite) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PLAYER_NOT_IN_TEAM);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Creates and returns a match with the details of target updated with updateMatchDescriptor."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private static Match createUpdateMatch(ReadOnlyMatch target,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                                         UpdateMatchDescriptor updateMatchDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        MatchDate date \u003d target.getDate();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        TeamName home \u003d target.getHome();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        TeamName away \u003d target.getAway();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        TicketSales homeSales \u003d updateMatchDescriptor.getHomeSales();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        TicketSales awaySales \u003d updateMatchDescriptor.getAwaySales();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cName\u003e goalScorers \u003d updateMatchDescriptor.getGoalScorers();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        List\u003cName\u003e ownGoalscorers \u003d updateMatchDescriptor.getOwnGoalScorers();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new Match(date, home, away, homeSales, awaySales, goalScorers, ownGoalscorers, new Score(\"\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 1,
      "E0176106": 97
    }
  },
  {
    "path": "src/seedu/addressbook/commands/player/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Age;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Appearance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.GoalsAssisted;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.GoalsScored;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.HealthStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.JerseyNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Nationality;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Player;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.PositionPlayed;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Salary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.TeamName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.UniquePlayerList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Adds a player to the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addPlayer\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "            COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Adds a player to the League Tracker. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"NAME p/POSITION \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"a/AGE \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"sal/SALARY \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"gs/GOALS_SCORED \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"ga/GOALS_ASSISTED \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"tm/TEAM_NAME \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"ctry/NATIONALITY \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"jn/JERSEY_NUMBER \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"app/APPEARANCE \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"hs/ HEALTH_STATUS \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"[t/TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \" Lionel Messi p/RW a/31 sal/2000 gs/30 ga/25 tm/FC BARCELONA ctry/Argentina jn/10\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \" app/40 hs/HEALTHY t/friends t/GREATEST OF ALL TIME \\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New player added: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PLAYER \u003d \"This player already exists in the address book\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_TEAM \u003d \"This team %1$s does not exist, please enter an existing team\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_JERSEY_NUMBER \u003d \"The jersey number %1$s is already taken, \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"please choose another jersey number\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Player toAdd;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public AddCommand(String name, String position, String age, String salary, String goalsScored, String goalsAssisted,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "                      String teamName, String nationality, String jerseyNumber, String appearance, String healthStatus,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": "                      Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.toAdd \u003d new Player("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new Name(name),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new PositionPlayed(position),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new Age(age),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new Salary(salary),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new GoalsScored(goalsScored),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new GoalsAssisted(goalsAssisted),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new TeamName(teamName),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new Nationality(nationality),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new JerseyNumber(jerseyNumber),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new Appearance(appearance),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new HealthStatus(healthStatus),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": "                tagSet"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "        );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public AddCommand(Player toAdd) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public ReadOnlyPlayer getPlayer() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": "        String tmInput \u003d toAdd.getTeamName().toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Boolean isTeamExists \u003d false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": "        UniqueTeamList teamList \u003d addressBook.getAllTeams();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (Team team : teamList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "            if (team.getTeamName().toString().equals(tmInput)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "                isTeamExists \u003d true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isTeamExists) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NO_SUCH_TEAM, tmInput) + \"\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": "            addressBook.addPlayer(toAdd);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (UniquePlayerList.DuplicatePlayerException dpe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_PLAYER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (UniquePlayerList.DuplicateJerseyInSameTeamException djste) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DUPLICATE_JERSEY_NUMBER,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    toAdd.getJerseyNumber().toString()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 129,
      "E0176106": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/player/AddFastCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Age;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.JerseyNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Nationality;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Player;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.PositionPlayed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Salary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.TeamName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.UniquePlayerList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Adds a player to the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": " * With some fields set as default to make adding more user friendly"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class AddFastCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addFast\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "            COMMAND_WORD + \":\\n\" + \"Adds a player to the League Tracker. \" + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"NAME p/POSITION \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"a/AGE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"sal/SALARY \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"tm/TEAM_NAME \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"ctry/NATIONALITY \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"jn/JERSEY_NUMBER \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"[t/TAG]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \" Lionel Messi p/RW a/31 sal/20000000 tm/FC BARCELONA ctry/Argentina jn/10\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \" t/friends t/GREATEST OF ALL TIME \\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New player added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PLAYER \u003d \"This player already exists in the address book\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_TEAM \u003d \"This team %1$s does not exist, please enter an existing team\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_JERSEY_NUMBER \u003d \"The jersey number %1$s is already taken, \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"please choose another jersey number\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Player toAdd;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public AddFastCommand(String name, String position, String age, String salary,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "                          String teamName, String nationality, String jerseyNumber,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "                      Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.toAdd \u003d new Player("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new Name(name),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new PositionPlayed(position),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new Age(age),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new Salary(salary),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new TeamName(teamName),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new Nationality(nationality),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new JerseyNumber(jerseyNumber),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": "                tagSet"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public AddFastCommand(Player toAdd) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public ReadOnlyPlayer getPlayer() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": "        String tmInput \u003d toAdd.getTeamName().toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Boolean isTeamExists \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "        UniqueTeamList teamList \u003d addressBook.getAllTeams();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (Team team : teamList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "            if (team.getTeamName().toString().equals(tmInput)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": "                isTeamExists \u003d true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isTeamExists) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NO_SUCH_TEAM, tmInput)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"\\n\" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": "            addressBook.addPlayer(toAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (UniquePlayerList.DuplicatePlayerException dpe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_PLAYER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (UniquePlayerList.DuplicateJerseyInSameTeamException djste) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DUPLICATE_JERSEY_NUMBER,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    toAdd.getJerseyNumber().toString()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 113
    }
  },
  {
    "path": "src/seedu/addressbook/commands/player/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Clears the player list in league tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearPlayer\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clear players in league tracker permanently.\\n\\t\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"League Tracker player list has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "        addressBook.clearPlayer();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 22
    }
  },
  {
    "path": "src/seedu/addressbook/commands/player/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.UniquePlayerList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Deletes a player identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletePlayer\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Deletes the player identified by the index number used in the last player listing.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_DELETE_PLAYER_SUCCESS \u003d \"Deleted Player: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "            final ReadOnlyPlayer target \u003d getTargetPlayer();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "            addressBook.removePlayer(target);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PLAYER_SUCCESS, target));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PLAYER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (UniquePlayerList.PlayerNotFoundException pnfe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PLAYER_NOT_IN_LEAGUE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 14,
      "yingrong1996": 2,
      "-": 28
    }
  },
  {
    "path": "src/seedu/addressbook/commands/player/EditPlayerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Age;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Appearance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.GoalsAssisted;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.GoalsScored;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.HealthStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.JerseyNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Nationality;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Player;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.PositionPlayed;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Salary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.TeamName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.UniquePlayerList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": " * This Command allows user to edit the player details in the league record"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class EditPlayerCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editPlayer\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Edits player profile of the player identified by his/her index number in the league tracker.\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"INDEX_OF_PLAYER \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"n/NAME \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"p/POSITION \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"a/AGE \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"sal/SALARY \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"gs/GOALS_SCORED \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"ga/GOALS_ASSISTED \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"tm/TEAM_NAME \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"ctry/NATIONALITY \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"jn/JERSEY_NUMBER \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"app/APPEARANCE \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"hs/ HEALTH_STATUS \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"[t/TAG]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"sal/\" + Salary.EXAMPLE + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Index of the player can be obtained using the list Command \\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \" %1$s \\n Player %2$s profile is edited\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_NOATTRIBUTE_WARNING \u003d \"At least one attribute must be provided for edition\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_TEAMNAME_BLOCK \u003d \"Changing player\u0027s team is not allowed \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"with Edit Command, please use tranferPlayer Command if you need to transfer \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"%1$s from %2$s to other teams in League Tracker.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Name nameItem;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final PositionPlayed positionItem;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Age ageItem;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Salary salaryItem;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final GoalsScored gsItem;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final GoalsAssisted gaItem;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Nationality nationalityItem;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final JerseyNumber jnItem;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Appearance appItem;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final HealthStatus hsItem;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Set\u003cTag\u003e tagItem;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Boolean isTeamEdited;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public EditPlayerCommand(int targetIndex,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": "                             String name, String position, String age, String salary,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "                             String goalsScored, String goalsAssisted, String teamName,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "                             String nationality, String jerseyNumber, String appearance,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "                             String healthStatus, Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.nameItem \u003d (name \u003d\u003d null) ? null : new Name(name);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.ageItem \u003d (age \u003d\u003d null) ? null : new Age(age);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.positionItem \u003d (position \u003d\u003d null) ? null : new PositionPlayed(position);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.salaryItem \u003d (salary \u003d\u003d null) ? null : new Salary(salary);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.gsItem \u003d (goalsScored \u003d\u003d null) ? null : new GoalsScored(goalsScored);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.gaItem \u003d (goalsAssisted \u003d\u003d null) ? null : new GoalsAssisted(goalsAssisted);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.nationalityItem \u003d (nationality \u003d\u003d null) ? null : new Nationality(nationality);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.jnItem \u003d (jerseyNumber \u003d\u003d null) ? null : new JerseyNumber(jerseyNumber);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.appItem \u003d (appearance \u003d\u003d null) ? null : new Appearance(appearance);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.hsItem \u003d (healthStatus \u003d\u003d null) ? null : new HealthStatus(healthStatus);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.tagItem \u003d tagSet;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.isTeamEdited \u003d (teamName !\u003d null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "            final ReadOnlyPlayer oldPlayer \u003d getTargetPlayer();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "            if (isTeamEdited) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_TEAMNAME_BLOCK, oldPlayer.getName().toString(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        oldPlayer.getTeamName().toString()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": "            final Player inputPlayer \u003d createInputPlayer(this.nameItem, this.positionItem,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    this.ageItem, this.salaryItem, this.gsItem, this.gaItem, null,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    this.nationalityItem, jnItem, appItem, hsItem, tagItem);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": "            Player editedPlayer \u003d createEditedPlayer(inputPlayer, oldPlayer);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": "            addressBook.editPlayer(getTargetPlayer(), editedPlayer);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, editedPlayer, editedPlayer.getName().fullName));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (UniquePlayerList.PlayerNotFoundException pnfe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PLAYER_NOT_IN_LEAGUE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (IndexOutOfBoundsException iobe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PLAYER_DISPLAYED_INDEX"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"\\n\" + Messages.MESSAGE_NVRLISTBEFOREEDIT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Create a player object that contains the input information by the user."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Some fields may be null."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param nameitem a Name object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param positionItem a PositionPlayer object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param ageItem an Age object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param salaryItem a Salary object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param gsItem a GoalsScored object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param gaItem a GoalsAssisted object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param teamNameItem a TeamName object"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param nationalityItem a Nationality object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param jnItem a JerseyNumber Object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param appItem an Appearance object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param hsItem a HealthStatus object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param tagItem a tag Set"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return a Player object containing all user-input information"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private static Player createInputPlayer(Name nameitem, PositionPlayed positionItem,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                            Age ageItem, Salary salaryItem,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                            GoalsScored gsItem, GoalsAssisted gaItem,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                            TeamName teamNameItem, Nationality nationalityItem,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                            JerseyNumber jnItem, Appearance appItem,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                            HealthStatus hsItem, Set\u003cTag\u003e tagItem) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new Player(nameitem, positionItem, ageItem, salaryItem, gsItem, gaItem,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "warheade"
        },
        "content": "                teamNameItem, nationalityItem, jnItem, appItem, hsItem, tagItem);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Creates a Player object containing updated information"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param inputPlayer a Player object containing all user input"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param oldPlayer the Player object that is to be edited"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return an updated Player object containing all updated information with the edition made"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private static Player createEditedPlayer(ReadOnlyPlayer inputPlayer, ReadOnlyPlayer oldPlayer) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Name nameItem;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "warheade"
        },
        "content": "        PositionPlayed positionItem;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Age ageItem;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Salary salaryItem;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "warheade"
        },
        "content": "        GoalsScored gsItem;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "warheade"
        },
        "content": "        GoalsAssisted gaItem;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "warheade"
        },
        "content": "        TeamName teamNameItem;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Nationality nationalityItem;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "warheade"
        },
        "content": "        JerseyNumber jnItem;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Appearance appItem;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "warheade"
        },
        "content": "        HealthStatus hsItem;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Set\u003cTag\u003e tagItem;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (inputPlayer.getName() \u003d\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "warheade"
        },
        "content": "            nameItem \u003d oldPlayer.getName();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "warheade"
        },
        "content": "            nameItem \u003d inputPlayer.getName();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (inputPlayer.getPositionPlayed() \u003d\u003d null) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "warheade"
        },
        "content": "            positionItem \u003d oldPlayer.getPositionPlayed();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "warheade"
        },
        "content": "            positionItem \u003d inputPlayer.getPositionPlayed();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (inputPlayer.getAge() \u003d\u003d null) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "warheade"
        },
        "content": "            ageItem \u003d oldPlayer.getAge();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "warheade"
        },
        "content": "            ageItem \u003d inputPlayer.getAge();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (inputPlayer.getSalary() \u003d\u003d null) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "warheade"
        },
        "content": "            salaryItem \u003d oldPlayer.getSalary();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "warheade"
        },
        "content": "            salaryItem \u003d inputPlayer.getSalary();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (inputPlayer.getGoalsScored() \u003d\u003d null) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "warheade"
        },
        "content": "            gsItem \u003d oldPlayer.getGoalsScored();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "warheade"
        },
        "content": "            gsItem \u003d inputPlayer.getGoalsScored();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (inputPlayer.getGoalsAssisted() \u003d\u003d null) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "warheade"
        },
        "content": "            gaItem \u003d oldPlayer.getGoalsAssisted();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "warheade"
        },
        "content": "            gaItem \u003d inputPlayer.getGoalsAssisted();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (inputPlayer.getTeamName() \u003d\u003d null) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "warheade"
        },
        "content": "            teamNameItem \u003d oldPlayer.getTeamName();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "warheade"
        },
        "content": "            teamNameItem \u003d inputPlayer.getTeamName();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (inputPlayer.getNationality() \u003d\u003d null) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "warheade"
        },
        "content": "            nationalityItem \u003d oldPlayer.getNationality();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "warheade"
        },
        "content": "            nationalityItem \u003d inputPlayer.getNationality();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (inputPlayer.getJerseyNumber() \u003d\u003d null) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "warheade"
        },
        "content": "            jnItem \u003d oldPlayer.getJerseyNumber();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "warheade"
        },
        "content": "            jnItem \u003d inputPlayer.getJerseyNumber();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (inputPlayer.getAppearance() \u003d\u003d null) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "warheade"
        },
        "content": "            appItem \u003d oldPlayer.getAppearance();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "warheade"
        },
        "content": "            appItem \u003d inputPlayer.getAppearance();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (inputPlayer.getHealthStatus() \u003d\u003d null) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "warheade"
        },
        "content": "            hsItem \u003d oldPlayer.getHealthStatus();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "warheade"
        },
        "content": "            hsItem \u003d inputPlayer.getHealthStatus();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (inputPlayer.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "warheade"
        },
        "content": "            tagItem \u003d oldPlayer.getTags();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "warheade"
        },
        "content": "            tagItem \u003d inputPlayer.getTags();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new Player("
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "warheade"
        },
        "content": "                nameItem,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "warheade"
        },
        "content": "                positionItem,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "warheade"
        },
        "content": "                ageItem,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "warheade"
        },
        "content": "                salaryItem,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "warheade"
        },
        "content": "                gsItem,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "warheade"
        },
        "content": "                gaItem,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "warheade"
        },
        "content": "                teamNameItem,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "warheade"
        },
        "content": "                nationalityItem,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "warheade"
        },
        "content": "                jnItem,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "warheade"
        },
        "content": "                appItem,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "warheade"
        },
        "content": "                hsItem,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "warheade"
        },
        "content": "                tagItem"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "warheade"
        },
        "content": "        );"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 267
    }
  },
  {
    "path": "src/seedu/addressbook/commands/player/ExportPlayerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.export.PlayerApachePoiWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": " * This Command allows user to export the player profiles in the league record to an Excel file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class ExportPlayerCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exportPlayer\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"This Command will export all player profiles in the league tracker to an Excel sheet \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"For now, the output path has been hard-coded to be \u0027exported_player_record.xls\u0027. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Every exportPlayer Command will overwrite the excel file if it already exists \\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Player profile is successfully exported\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "    //public static final String MESSAGE_IOE \u003d \"Error creating file...\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "    //public static final String MESSAGE_FFE \u003d \"File not found...\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_NPE \u003d \"Please check your parameters... Object does not exist\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public ExportPlayerCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cReadOnlyPlayer\u003e allPlayers \u003d addressBook.getAllPlayers().immutableListView();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "        PlayerApachePoiWriter writer \u003d new PlayerApachePoiWriter(allPlayers);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "            writer.write();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(MESSAGE_NPE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 44
    }
  },
  {
    "path": "src/seedu/addressbook/commands/player/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Finds and lists all players in the league whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findPlayer\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Finds all players whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Messi Ronaldo \\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public FindCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final List\u003cReadOnlyPlayer\u003e playersFound \u003d getPlayersWithNameContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new CommandResult(getMessageForPlayerListShownSummary(playersFound), playersFound, null, null, null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Retrieve all players in the address book whose names contain some of the specified keywords."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return list of players found"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private List\u003cReadOnlyPlayer\u003e getPlayersWithNameContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final List\u003cReadOnlyPlayer\u003e matchedPlayers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (ReadOnlyPlayer player : addressBook.getAllPlayers()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(player.getName().getWordsInName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "                matchedPlayers.add(player);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return matchedPlayers;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 63
    }
  },
  {
    "path": "src/seedu/addressbook/commands/player/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Lists all players in the league to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listPlayer\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Displays all players in the league as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cReadOnlyPlayer\u003e allPlayers \u003d addressBook.getAllPlayers().immutableListView();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new CommandResult(getMessageForPlayerListShownSummary(allPlayers), allPlayers, null, null, null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 27
    }
  },
  {
    "path": "src/seedu/addressbook/commands/player/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Sorts all players in the league tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortPlayer\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Sorts all players in the league tracker in ascending alphabetical order.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"League Tracker player list has been sorted!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "        addressBook.sort();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "warheade": 26
    }
  },
  {
    "path": "src/seedu/addressbook/commands/player/TransferPlayerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.JerseyNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Player;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.TeamName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.UniquePlayerList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": " * This command transfers player from one team to another in the league tracker"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class TransferPlayerCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"transfer\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "            COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"Transfers a player from one team to another in the League Tracker. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"PLAYER_NAME tm/NEW_TEAM_NAME jn/NEW_JERSEY_NUMBER\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \" Lionel Messi tm/Real Madrid jn/10\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"Team and player entered must exist in league tracker \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"The jersey number in destination team must be available \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"Destination team cannot be the same as player\u0027s current team\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Player %1$s is successfully transferred from %2$s to %3$s, \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"%1$s \u0027s new jersey number is %4$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_PLAYER_NOT_FOUND \u003d \"This player %1$s does not exist in the league tracker\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_TEAM \u003d \"This team %1$s does not exist, please enter an existing team\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_DESTINATION_IS_CURRENT \u003d \"Destination team is same as current team %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_JERSEY_NUMBER_TAKEN \u003d \"The jersey number %1$s has already \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"been taken in team %2$s. Try again with a different jersey number\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final TeamName teamNameItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Name playerNameItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final JerseyNumber jerseyNumberItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public TransferPlayerCommand(String playerName, String destinationTeamName,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                 String newJerseyNumber) throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.teamNameItem \u003d new TeamName(destinationTeamName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.playerNameItem \u003d new Name(playerName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.jerseyNumberItem \u003d new JerseyNumber(newJerseyNumber);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "        UniquePlayerList oldAllPlayers \u003d addressBook.getAllPlayers();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "        UniqueTeamList allTeams \u003d addressBook.getAllTeams();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player oldPlayer \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player newPlayer;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Boolean isOldPlayerFound \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Boolean isTeamFound \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": "        String oldTeamName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //check if the player exists in league tracker"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //check if the destination team is the same as the current team of player"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (Player player : oldAllPlayers) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": "            if (player.getName().equals(this.playerNameItem)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": "                oldPlayer \u003d player;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "                oldTeamName \u003d player.getTeamName().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "                isOldPlayerFound \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "                if (oldTeamName.equals(this.teamNameItem.toString())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    return new CommandResult(String.format(MESSAGE_DESTINATION_IS_CURRENT, oldTeamName));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "        // if the player does not exist, return an error message and terminate the execute()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "        // else, create the player after transfer"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isOldPlayerFound) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(String.format("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    MESSAGE_PLAYER_NOT_FOUND, this.playerNameItem.toString()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": "            newPlayer \u003d createPlayerAfterTransfer(this.teamNameItem, this.jerseyNumberItem, oldPlayer);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": "        // check if the destination team exists"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (Team team : allTeams) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "            if (team.getTeamName().toString().equals(this.teamNameItem.toString())) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": "                isTeamFound \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "        // if the destination team does not exists, return an error message and terminate the execute()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "        // else continue, the destination team definitely exists"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isTeamFound) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NO_SUCH_TEAM, this.teamNameItem.toString()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": "        // remove oldPlayer from league tracker and add the newPlayer into league tracker"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": "            addressBook.removePlayer(oldPlayer);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": "            addressBook.addPlayer(newPlayer);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (UniquePlayerList.PlayerNotFoundException pnfe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"Old player not found in league tracker\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (UniquePlayerList.DuplicatePlayerException dpe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"New Player already exists in league tracker\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (UniquePlayerList.DuplicateJerseyInSameTeamException djste) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "            this.restoreRemovedPlayer(oldPlayer);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_JERSEY_NUMBER_TAKEN,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    newPlayer.getJerseyNumber().toString(), newPlayer.getTeamName().toString()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //transfer done"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, oldPlayer.getName().toString(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": "                oldPlayer.getTeamName().toString(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": "                this.teamNameItem.toString(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": "                this.jerseyNumberItem.toString()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * creates the player after transfer"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param teamNameItem Team Name of the destination team"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param oldPlayer player before transfer"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return player after transfer"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private static Player createPlayerAfterTransfer(TeamName teamNameItem,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                                    JerseyNumber jerseyNumberItem, Player oldPlayer) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new Player(oldPlayer.getName(), oldPlayer.getPositionPlayed(), oldPlayer.getAge(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "warheade"
        },
        "content": "                oldPlayer.getSalary(), oldPlayer.getGoalsScored(), oldPlayer.getGoalsAssisted(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "warheade"
        },
        "content": "                teamNameItem, oldPlayer.getNationality(), jerseyNumberItem,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "warheade"
        },
        "content": "                oldPlayer.getAppearance(), oldPlayer.getHealthStatus(), oldPlayer.getTags());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * restores the oldPlayer removed during transfer"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param oldPlayer player before transfer"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private void restoreRemovedPlayer(Player oldPlayer) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "warheade"
        },
        "content": "            addressBook.addPlayer(oldPlayer);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (UniquePlayerList.DuplicatePlayerException dpe) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"oldPlayer was not deleted\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (UniquePlayerList.DuplicateJerseyInSameTeamException djste) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"That jersey number has been taken by someone already\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 151
    }
  },
  {
    "path": "src/seedu/addressbook/commands/player/ViewAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Shows all details of the player identified using the last displayed index."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Private contact details are shown."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewAllCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"displayProfile\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows all details of the player \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"identified by the index number in the last shown player listing.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_VIEW_PLAYER_DETAILS \u003d \"Viewing player: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewAllCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "            final ReadOnlyPlayer target \u003d getTargetPlayer();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "            if (!addressBook.containsPlayer(target)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_PLAYER_NOT_IN_LEAGUE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_PLAYER_DETAILS, target.getAsTextShowAll()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PLAYER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 12,
      "yingrong1996": 3,
      "-": 27
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/AddTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Country;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Sponsor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.team.TeamName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Adds a team to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class AddTeam extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addteam\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a team to the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Parameters: NAME c/COUNTRY s/SPONSORSHIP BALANCE [t/TAG]...\\n\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \" Singapore United c/Singapore s/5487 t/Lousy \\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New team added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TEAM \u003d \"This team already exists in the address book\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final Team toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AddTeam(String name,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                   String country,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                   String sponsor,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                   Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.toAdd \u003d new Team("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new TeamName(name),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                new Country(country),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                new Sponsor(sponsor),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                new HashSet\u003c\u003e(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new HashSet\u003c\u003e(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                tagSet"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AddTeam(Team toAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public ReadOnlyTeam getTeam() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            addressBook.addTeam(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (UniqueTeamList.DuplicateTeamException dpe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_TEAM);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 1,
      "yingrong1996": 70,
      "E0176106": 4
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/ClearTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Clears the team List."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class ClearTeam extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearteam\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clears team list permanently.\\n\\t\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"team list has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        addressBook.clearTeam();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 1,
      "yingrong1996": 17,
      "E0176106": 3
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/DeleteTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList.MatchNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.UniquePlayerList.PlayerNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Deletes a team identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class DeleteTeam extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteteam\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Deletes the team identified by the index number used in the last team listing.\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_DELETE_TEAM_SUCCESS \u003d \"Deleted team: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public DeleteTeam(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final ReadOnlyTeam target \u003d getTargetTeam();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            addressBook.removeTeam(target);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_TEAM_SUCCESS, target));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (UniqueTeamList.TeamNotFoundException tnfe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_TEAM_NOT_IN_LEAGUE_TRACKER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (PlayerNotFoundException pnfe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PLAYER_NOT_IN_LEAGUE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (MatchNotFoundException mnfe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_MATCH_NOT_IN_LEAGUE_TRACKER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 2,
      "yingrong1996": 47
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/EditTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Country;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.EditTeamDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Sponsor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.team.TeamName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Edits a team to the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class EditTeam extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editteam\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Edits the details of the team identified by the index number used in the displayed team list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"(listTeam must be used before this command to retrieve index for team to be deleted)\\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"[n/NAME]\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"[c/COUNTRY] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"[s/SPONSOR] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            + \"[t/TAGS](t/nil to remove tags)\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"c/\" + Country.EXAMPLE + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_EDIT_TEAM_SUCCESS \u003d \"Edited team: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_NOARGS \u003d \"At least one field to edit must be provided.\\n%1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final EditTeamDescriptor editTeamDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public EditTeam(int targetVisibleIndex,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    String name,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    String country,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    String sponsor,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.editTeamDescriptor \u003d new EditTeamDescriptor(name, country, sponsor, tagSet);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final ReadOnlyTeam teamToEdit \u003d getTargetTeam();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Team editedTeam \u003d createEditedTeam(teamToEdit, editTeamDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            addressBook.editTeam(teamToEdit, editedTeam);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_TEAM_SUCCESS, editedTeam));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (UniqueTeamList.TeamNotFoundException tnfe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_TEAM_NOT_IN_LEAGUE_TRACKER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Creates and returns a team with the details of teamToEdit edited with editTeamDescriptor."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private static Team createEditedTeam(ReadOnlyTeam teamToEdit,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                                         EditTeamDescriptor editTeamDescriptor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        TeamName updatedTeamName \u003d checkName(editTeamDescriptor.getTeamName(), teamToEdit.getTeamName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Country updatedCountry \u003d checkCountry(editTeamDescriptor.getCountry(), teamToEdit.getCountry());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Sponsor updatedSponsor \u003d checkSponsor(editTeamDescriptor.getSponsor(), teamToEdit.getSponsor());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Set\u003cTag\u003e updatedTagset \u003d checkTagset(editTeamDescriptor.getTags(), teamToEdit.getTags());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new Team(updatedTeamName,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                updatedCountry,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                updatedSponsor,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                teamToEdit.getWins(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                teamToEdit.getLoses(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                teamToEdit.getDraws(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                teamToEdit.getPoints(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                teamToEdit.getMatches(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                teamToEdit.getPlayers(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                updatedTagset);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Check for new name value."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private static TeamName checkName(TeamName newEdit, TeamName oldInfo) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (newEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return oldInfo;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return newEdit;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Check for new Nationality value."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private static Country checkCountry(Country newEdit, Country oldInfo) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (newEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return oldInfo;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return newEdit;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Check for new Sponsor value."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private static Sponsor checkSponsor(Sponsor newEdit, Sponsor oldInfo) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (newEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return oldInfo;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return newEdit;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Check for new Tags value."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private static Set\u003cTag\u003e checkTagset(Set\u003cTag\u003e newEdit, Set\u003cTag\u003e oldInfo) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (newEdit.toString().contains(\"[nil]\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (newEdit.isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return oldInfo;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return newEdit;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 3,
      "yingrong1996": 122,
      "E0176106": 19
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/ExportTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.export.TeamApachePoiWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": " * This command allows user to export team profiles in the league to an excel file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class ExportTeam extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exportTeam\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"This Command will export all team profiles in the league tracker to an Excel sheet \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"For now, the output path has been hard-coded to be \u0027exported_team_record.xls\u0027. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Every exportTeam Command will overwrite the excel file if it already exists \\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Team profile is successfully exported\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_NPE \u003d \"Please check your parameters... Object does not exist\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public ExportTeam() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cReadOnlyTeam\u003e allTeams \u003d addressBook.getAllTeams().immutableListView();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "        TeamApachePoiWriter writer \u003d new TeamApachePoiWriter(allTeams);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "            writer.write();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new CommandResult(MESSAGE_NPE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 41
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/FindTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Finds and lists all teams in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class FindTeam extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findteam\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Finds all teams whose names contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" United \\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public FindTeam(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cReadOnlyTeam\u003e teamsFound \u003d getTeamsWithNameContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(getMessageForTeamListShownSummary(teamsFound), null, teamsFound, null, null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Retrieve all teams in the address book whose names contain some of the specified keywords."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003cReadOnlyTeam\u003e getTeamsWithNameContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cReadOnlyTeam\u003e matchedTeams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (ReadOnlyTeam team : addressBook.getAllTeams()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(team.getTeamName().getWordsInName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                matchedTeams.add(team);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return matchedTeams;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 1,
      "warheade": 1,
      "yingrong1996": 57,
      "E0176106": 2
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/ListTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * List all teams"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class ListTeam extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listteam\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Displays all Teams in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cReadOnlyTeam\u003e allTeams \u003d addressBook.getAllTeams().immutableListView();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new CommandResult(getMessageForTeamListShownSummary(allTeams), null, allTeams, null, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 1,
      "warheade": 1,
      "yingrong1996": 23,
      "E0176106": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/team/ViewTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.commands.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Shows all details of the team identified using the last displayed index."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class ViewTeam extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewteam\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows all details of the team \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"identified by the index number in the last shown team listing.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_VIEW_TEAM_DETAILS \u003d \"Viewing Team: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public ViewTeam(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final ReadOnlyTeam target \u003d getTargetTeam();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (!addressBook.containsTeam(target)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_TEAM_NOT_IN_LEAGUE_TRACKER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_TEAM_DETAILS, target.getAsTextShowAll()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 1,
      "yingrong1996": 40
    }
  },
  {
    "path": "src/seedu/addressbook/common/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_INVALID_PLAYER_DISPLAYED_INDEX \u003d \"The player index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_NVRLISTBEFOREEDIT \u003d \"Please do a listPlayer command to check player index\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_PLAYER_NOT_IN_LEAGUE \u003d \"Player could not be found in the league record\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_PLAYER_NOT_IN_TEAM \u003d \"Player could not be found in the team\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_PLAYERS_LISTED_OVERVIEW \u003d \"%1$d players listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_INVALID_MATCH_DISPLAYED_INDEX \u003d \"The match index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_MATCH_NOT_IN_LEAGUE_TRACKER \u003d \"Match could not be found\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_MATCH_UPDATED_BEFORE \u003d \"Match cannot be updated again\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_MATCHES_LISTED_OVERVIEW \u003d \"%1$d matches listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_INVALID_TEAM_DISPLAYED_INDEX \u003d \"The team index provided is invalid\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_TEAM_NOT_IN_LEAGUE_TRACKER \u003d \"Team could not be found in league tracker\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_TEAMS_LISTED_OVERVIEW \u003d \"%1$d teams listed!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_FINANCES_LISTED_OVERVIEW \u003d \"%1$d finances listed!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_FINANCE_NOT_IN_LEAGUE_TRACKER \u003d \"Finance could not be found in league tracker\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String MESSAGE_INVALID_FINANCE_DISPLAYED_INDEX \u003d \"The finance index provided is invalid\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE \u003d \"Launch command format: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"To start, type \u0027help\u0027 for a detailed instruction on using League Tracker\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Welcome to your League Tracker!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USING_STORAGE_FILE \u003d \"Using storage file : %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 2,
      "warheade": 5,
      "yingrong1996": 4,
      "-": 10,
      "E0176106": 7
    }
  },
  {
    "path": "src/seedu/addressbook/data/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.Finance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.UniqueFinanceList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.UniqueFinanceList.DuplicateFinanceException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList.DuplicateMatchException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList.MatchNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList.MatchUpdatedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Player;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.UniquePlayerList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.UniquePlayerList.DuplicatePlayerException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.UniquePlayerList.PlayerNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.player.UniquePlayerList.PlayerNotInTeamException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList.DuplicateTeamException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList.TeamNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the entire address book. Contains the data of the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final UniquePlayerList allPlayers;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final UniqueTeamList allTeams;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final UniqueMatchList allMatches;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private final UniqueFinanceList allFinances;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty address book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "        allPlayers \u003d new UniquePlayerList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allMatches \u003d new UniqueMatchList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allTeams \u003d new UniqueTeamList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        allFinances \u003d new UniqueFinanceList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an address book with the given data."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param players external changes to this will not affect this address book"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param matches external changes to this will not affect this address book"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public AddressBook(UniquePlayerList players,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                       UniqueTeamList teams,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                       UniqueMatchList matches,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                       UniqueFinanceList finances) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.allPlayers \u003d new UniquePlayerList(players);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.allTeams \u003d new UniqueTeamList(teams);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.allMatches \u003d new UniqueMatchList(matches);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.allFinances \u003d new UniqueFinanceList(finances);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static AddressBook empty() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Adds a player to the League Tracker."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws DuplicatePlayerException if an equivalent player already exists."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void addPlayer(Player toAdd) throws DuplicatePlayerException,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": "            UniquePlayerList.DuplicateJerseyInSameTeamException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "        allPlayers.add(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Team team : allTeams) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (team.getTeamName().toString().equals((toAdd.getTeamName().toString()))) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.addPlayer(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Edits the equivalent player from League Tracker"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void editPlayer(ReadOnlyPlayer toEdit, Player newPlayer) throws UniquePlayerList.PlayerNotFoundException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "        allPlayers.edit(toEdit, newPlayer);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Team team : allTeams) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (team.getTeamName().toString().equals(toEdit.getTeamName().toString())) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.removePlayer(toEdit);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.addPlayer(newPlayer);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Adds a team to the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void addTeam(Team toAdd) throws DuplicateTeamException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allTeams.add(toAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Adds a match to the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws DuplicateMatchException if an equivalent match already exists."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void addMatch(Match toAdd) throws DuplicateMatchException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allMatches.add(toAdd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Team team : allTeams) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (team.getTeamName().toString().equals(toAdd.getHome().toString())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.addMatch(toAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Team team : allTeams) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (team.getTeamName().toString().equals(toAdd.getAway().toString())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.addMatch(toAdd);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if an equivalent player exists in the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean containsPlayer(ReadOnlyPlayer key) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return allPlayers.contains(key);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if an equivalent team exists in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean containsTeam(ReadOnlyTeam key) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return allTeams.contains(key);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Checks if an equivalent match exists in the address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean containsMatch(ReadOnlyMatch key) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return allMatches.contains(key);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Checks if an equivalent finance exists in the address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public boolean containsFinance(ReadOnlyFinance key) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return allFinances.contains(key);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Removes the equivalent player from the address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws PlayerNotFoundException if no such Player could be found."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void removePlayer(ReadOnlyPlayer toRemove) throws PlayerNotFoundException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "warheade"
        },
        "content": "        allPlayers.remove(toRemove);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Team team : allTeams) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (team.getTeamName().toString().equals(toRemove.getTeamName().toString())) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.removePlayer(toRemove);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Removes the equivalent match from the address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @throws MatchNotFoundException if no such match could be found."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void removeMatch(ReadOnlyMatch toRemove) throws MatchNotFoundException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allMatches.remove(toRemove);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Team team : allTeams) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (team.getTeamName().toString().equals(toRemove.getHome().toString())) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.removeMatch(toRemove);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.updatePoints();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Team team : allTeams) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (team.getTeamName().toString().equals(toRemove.getAway().toString())) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.removeMatch(toRemove);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.updatePoints();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Clears all matches from the address book."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void clearMatch() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allMatches.clear();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Team team : allTeams) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            team.clearMatchList();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            team.clearResults();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Removes the equivalent team from the address book."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void removeTeam(ReadOnlyTeam toRemove) throws"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            TeamNotFoundException,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            PlayerNotFoundException,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            MatchNotFoundException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allTeams.remove(toRemove);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Set\u003cPlayer\u003e players \u003d toRemove.getPlayers();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Set\u003cMatch\u003e matches \u003d toRemove.getMatches();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Player player : players) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            allPlayers.remove(player);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Match match : matches) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            allMatches.remove(match);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Sorts all persons from the address book."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "warheade"
        },
        "content": "        allPlayers.sort();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons from the address book."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void clearPlayer() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "warheade"
        },
        "content": "        allPlayers.clear();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Team team : allTeams) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            team.clearPlayerList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Clears all teams from the address book."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void clearTeam() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allTeams.clear();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allPlayers.clear();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allMatches.clear();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Edits the equivalent team from League Tracker"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void editTeam(ReadOnlyTeam toRemove, Team toReplace) throws UniqueTeamList.TeamNotFoundException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allTeams.edit(toRemove, toReplace);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Updates the equivalent match from League Tracker"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void updateMatch(ReadOnlyMatch toRemove, Match toReplace) throws MatchNotFoundException,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            MatchUpdatedException, TeamNotFoundException, PlayerNotInTeamException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        String score \u003d computeScore(toRemove, toReplace);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        toReplace.setScore(score);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allMatches.update(toRemove, toReplace);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Team team : allTeams) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (team.getTeamName().toString().equals(toRemove.getHome().toString())) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.removeMatch(toRemove);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.addMatch(toReplace);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.updatePoints();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Team team : allTeams) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (team.getTeamName().toString().equals(toRemove.getAway().toString())) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.removeMatch(toRemove);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.addMatch(toReplace);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                team.updatePoints();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Defensively copied UniquePlayerList of all players in the address book at the time of the call."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public UniquePlayerList getAllPlayers() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new UniquePlayerList(allPlayers);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Defensively copied sorted UniqueMatchList of all matches in the address book at the time of the call."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList getAllMatches() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        allMatches.sort();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new UniqueMatchList(allMatches);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Defensively copied sorted UniqueTeamList of all teams in the address book at the time of the call."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList getAllTeams() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        allTeams.sort();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new UniqueTeamList(allTeams);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Defensively copied UniqueFinanceList of all finances in the address book at the time of the call."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public UniqueFinanceList getAllFinances() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new UniqueFinanceList(allFinances);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Refresh all finances to match all existing teams in the address book at the time of the call."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void refreshFinance() throws UniqueFinanceList.DuplicateFinanceException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        allFinances.clear();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (ReadOnlyTeam aTeam : allTeams.immutableListView()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            allFinances.add(new Finance(aTeam));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Sorts all finances from the address book."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void sortFinance() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        allFinances.sort();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Adds a finance to the address book."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void addFinance(Finance toAdd) throws DuplicateFinanceException {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        allFinances.add(toAdd);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param toRemove"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param toReplace"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return Computed score of both team"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws TeamNotFoundException if either team does not exit in LeagueTracker"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws PlayerNotInTeamException if any (own)goalScorers is not in either team"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String computeScore(ReadOnlyMatch toRemove, Match toReplace) throws TeamNotFoundException,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            PlayerNotInTeamException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        Team home \u003d allTeams.find(toRemove.getHome());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        Team away \u003d allTeams.find(toRemove.getAway());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        int homeScore \u003d countScore(toReplace.getGoalScorers(), home.getPlayers())"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                + countScore(toReplace.getOwnGoalScorers(), away.getPlayers());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        int awayScore \u003d countScore(toReplace.getGoalScorers(), away.getPlayers())"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                + countScore(toReplace.getOwnGoalScorers(), home.getPlayers());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if ((toReplace.getGoalScorers().size() + toReplace.getOwnGoalScorers().size() !\u003d (homeScore + awayScore))) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new PlayerNotInTeamException();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return String.valueOf(homeScore) + \"-\" + String.valueOf(awayScore);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param team"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @returns score of each team contributed by either goals or own goals."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int countScore (List\u003cName\u003e target, Set \u003cPlayer\u003e team) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (Name scorers : target) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            for (Player players : team) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                if (players.getName().equals(scorers)) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.allPlayers.equals(((AddressBook) other).allPlayers));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return allPlayers.hashCode();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 47,
      "warheade": 29,
      "yingrong1996": 133,
      "-": 71,
      "E0176106": 98
    }
  },
  {
    "path": "src/seedu/addressbook/data/finance/Finance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.data.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents Financial condition for a team in the League."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class Finance implements ReadOnlyFinance {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final int NUMBER_OF_QUARTER \u003d 4;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final Set\u003cString\u003e QUARTER_ONE_MONTHS \u003d Set.of(\"Jan\", \"Feb\", \"Mar\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final Set\u003cString\u003e QUARTER_TWO_MONTHS \u003d Set.of(\"Apr\", \"May\", \"Jun\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final Set\u003cString\u003e QUARTER_THREE_MONTHS \u003d Set.of(\"Jul\", \"Aug\", \"Sep\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final Set\u003cString\u003e QUARTER_FOUR_MONTHS \u003d Set.of(\"Oct\", \"Nov\", \"Dec\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private String teamName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double sponsorMoney \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double ticketIncome \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double quarterOne \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double quarterTwo \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double quarterThree \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double quarterFour \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private Histogram histogram;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public Finance(ReadOnlyTeam team) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.teamName \u003d team.getTeamName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.sponsorMoney \u003d Double.valueOf(team.getSponsor().value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Set\u003cMatch\u003e matchesOfTeam \u003d team.getMatches();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.ticketIncome \u003d getTicketIncomeFromMatches(matchesOfTeam, teamName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * gets ticket sale within each quarter."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Set\u003cMatch\u003e matchesOfQuarterOne \u003d getMatchesWithDateContainingAnyKeyword(matchesOfTeam, QUARTER_ONE_MONTHS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double quarterOneTicketIncome \u003d getTicketIncomeFromMatches(matchesOfQuarterOne, teamName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Set\u003cMatch\u003e matchesOfQuarterTwo \u003d getMatchesWithDateContainingAnyKeyword(matchesOfTeam, QUARTER_TWO_MONTHS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double quarterTwoTicketIncome \u003d getTicketIncomeFromMatches(matchesOfQuarterTwo, teamName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Set\u003cMatch\u003e matchesOfQuarterThree \u003d getMatchesWithDateContainingAnyKeyword(matchesOfTeam, QUARTER_THREE_MONTHS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double quarterThreeTicketIncome \u003d getTicketIncomeFromMatches(matchesOfQuarterThree, teamName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Set\u003cMatch\u003e matchesOfQuarterFour \u003d getMatchesWithDateContainingAnyKeyword(matchesOfTeam, QUARTER_FOUR_MONTHS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double quarterFourTicketIncome \u003d getTicketIncomeFromMatches(matchesOfQuarterFour, teamName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.quarterOne \u003d sponsorMoney / 4 + quarterOneTicketIncome;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.quarterTwo \u003d sponsorMoney / 4 + quarterTwoTicketIncome;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.quarterThree \u003d sponsorMoney / 4 + quarterThreeTicketIncome;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.quarterFour \u003d sponsorMoney / 4 + quarterFourTicketIncome;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.histogram \u003d new Histogram(NUMBER_OF_QUARTER, quarterOne, quarterTwo, quarterThree, quarterFour);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public Finance(String teamName,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                   double sponsorMoney,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                   double ticketIncome,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                   double quarterOne,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                   double quarterTwo,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                   double quarterThree,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                   double quarterFour) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.teamName \u003d teamName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.sponsorMoney \u003d sponsorMoney;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.ticketIncome \u003d ticketIncome;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.quarterOne \u003d quarterOne;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.quarterTwo \u003d quarterTwo;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.quarterThree \u003d quarterThree;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.quarterFour \u003d quarterFour;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * calculate ticketIncome from relevant matches of the team."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * @param teamName for finding relevant homeSale/awaySale in each match"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * @return value of ticketSale"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double getTicketIncomeFromMatches (Set\u003cMatch\u003e relatedMatches, String teamName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double ticketSale \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (Match match : relatedMatches) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            if (teamName.equals(match.getHome().toString()) \u0026\u0026 !match.getHomeSales().value.equals(\"\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                String homeSalesString \u003d match.getHomeSales().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                double homeSalesValue \u003d Double.valueOf(homeSalesString);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                ticketSale +\u003d homeSalesValue;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            } else if (teamName.equals(match.getAway().toString()) \u0026\u0026 !match.getAwaySales().value.equals(\"\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                String awaySalesString \u003d match.getAwaySales().value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                double awaySalesValue \u003d Double.valueOf(awaySalesString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                ticketSale +\u003d awaySalesValue;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return ticketSale;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * returns all matches related to a certain time period."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * @param keywords (relevant months) for searching"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * @return set of matches found"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private Set\u003cMatch\u003e getMatchesWithDateContainingAnyKeyword(Set\u003cMatch\u003e relatedMatches, Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final Set\u003cMatch\u003e matchedMatches \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (Match match : relatedMatches) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            final Set\u003cString\u003e wordsInDate \u003d new HashSet\u003c\u003e(match.getDate().getWordsInDate());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            if (!Collections.disjoint(wordsInDate, keywords)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                matchedMatches.add(match);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return matchedMatches;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getFinance() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double money;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        money \u003d sponsorMoney + ticketIncome;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return money;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public String getTeamName() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return teamName;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getSponsor() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return sponsorMoney;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getTicketIncome() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return ticketIncome;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getQuarterOne() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return quarterOne;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getQuarterTwo() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return quarterTwo;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getQuarterThree() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return quarterThree;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public double getQuarterFour() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return quarterFour;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                || (other instanceof ReadOnlyFinance // instanceof handles nulls"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyFinance) other));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public String getHistogramString() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return histogram.getHistogramString();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 167,
      "yingrong1996": 4
    }
  },
  {
    "path": "src/seedu/addressbook/data/finance/Histogram.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.data.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * build histogram of finance value."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class Histogram {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final int LENGTH \u003d 10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final int WIDTH \u003d 10;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final int MAX_HEIGHT \u003d 8;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String SET_Y_AXIS \u003d \"   |\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String SET_X_AXIS \u003d \"______\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String PRINT_COLUMN \u003d \"|xxx|\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String PRINT_BLANK_SPACE \u003d \"        \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static final String Y_AXIS \u003d \"Finance(USD) \\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private int numberOfColumn;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double heightOne;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double heightTwo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double heightThree;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double heightFour;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public Histogram (int numberOfColumn, double heightOne, double heightTwo, double heightThree, double heightFour) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.numberOfColumn \u003d numberOfColumn;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.heightOne \u003d heightOne;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.heightTwo \u003d heightTwo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.heightThree \u003d heightThree;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        this.heightFour \u003d heightFour;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public String getHistogramString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        int x \u003d numberOfColumn;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double yOne \u003d heightOne;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double yTwo \u003d heightTwo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double yThree \u003d heightThree;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double yFour \u003d heightFour;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * process values to fit height in Histogram."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double maxAmongFour \u003d Math.max(Math.max(Math.max(yOne, yTwo), yThree), yFour);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double yOneToFitHeight \u003d (yOne / maxAmongFour) * MAX_HEIGHT;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        int yOneInt \u003d (int) Math.round(yOneToFitHeight);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double yTwoToFitHeight \u003d (yTwo / maxAmongFour) * MAX_HEIGHT;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        int yTwoInt \u003d (int) Math.round(yTwoToFitHeight);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double yThreeToFitHeight \u003d (yThree / maxAmongFour) * MAX_HEIGHT;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        int yThreeInt \u003d (int) Math.round(yThreeToFitHeight);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        double yFourToFitHeight \u003d (yFour / maxAmongFour) * MAX_HEIGHT;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        int yFourInt \u003d (int) Math.round(yFourToFitHeight);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        String resultString;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        String[][] twoDString \u003d new String[LENGTH][WIDTH];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (int i \u003d 0; i \u003c LENGTH; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            for (int j \u003d 0; j \u003c WIDTH; j++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                if (j \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d SET_Y_AXIS; //set the y axis"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else if (j \u003d\u003d 9) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d \"\\n\"; //end the line"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else if (x \u003d\u003d 4 \u0026 j \u003d\u003d 2 \u0026 i \u003d\u003d 9) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d \"_^1 \"; //set the first column name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else if (x \u003d\u003d 4 \u0026 j \u003d\u003d 4 \u0026 i \u003d\u003d 9) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d \"_^2 \"; //set the second column name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else if (x \u003d\u003d 4 \u0026 j \u003d\u003d 6 \u0026 i \u003d\u003d 9) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d \"_^3 \"; //set the third column name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else if (x \u003d\u003d 4 \u0026 j \u003d\u003d 8 \u0026 i \u003d\u003d 9) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d \"_^4 ___ Quarter\"; //set the fourth column name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else if (i \u003d\u003d 9) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d SET_X_AXIS; //set the x axis"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else if (x \u003d\u003d 4 \u0026 j \u003d\u003d 2 \u0026 i \u003e\u003d (9 - yOneInt)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d PRINT_COLUMN; //print the first column"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else if (x \u003d\u003d 4 \u0026 j \u003d\u003d 4 \u0026 i \u003e\u003d (9 - yTwoInt)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d PRINT_COLUMN; //print the second column"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else if (x \u003d\u003d 4 \u0026 j \u003d\u003d 6 \u0026 i \u003e\u003d (9 - yThreeInt)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d PRINT_COLUMN; //print the third column"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else if (x \u003d\u003d 4 \u0026 j \u003d\u003d 8 \u0026 i \u003e\u003d (9 - yFourInt)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d PRINT_COLUMN; //print the fourth column"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    twoDString[i][j] \u003d PRINT_BLANK_SPACE; //print the blank space"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * build the 2D string to a string."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (String[] s1 : twoDString) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            for (String s2 : s1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                sb.append(s2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        resultString \u003d Y_AXIS + sb.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return resultString;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 99
    }
  },
  {
    "path": "src/seedu/addressbook/data/finance/ReadOnlyFinance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.data.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * A read-only immutable interface for a finance in the league."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public interface ReadOnlyFinance {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    String getTeamName();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    double getSponsor();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    double getTicketIncome();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    double getFinance();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    double getQuarterOne();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    double getQuarterTwo();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    double getQuarterThree();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    double getQuarterFour();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    String getHistogramString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyFinance other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                \u0026\u0026 other.getTeamName().equals(this.getTeamName()) // state checks here onwards"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                \u0026\u0026 other.getSponsor() \u003d\u003d this.getSponsor()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                \u0026\u0026 other.getTicketIncome() \u003d\u003d this.getTicketIncome()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                \u0026\u0026 other.getFinance() \u003d\u003d this.getFinance());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    default String getAsTextShowSome() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        builder.append(getTeamName().trim())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                .append(\" | Finance: USD\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        builder.append(getFinance());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        builder.append(getTeamName().trim())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                .append(\" | Finance: USD\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        builder.append(getFinance())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                .append(\" | Sponsorship: USD \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        builder.append(getSponsor())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                .append(\" |Ticket Income: USD\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        builder.append(getTicketIncome())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                .append(\" |1st quarter: \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        builder.append(getQuarterOne())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                .append(\" |2nd quarter: \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        builder.append(getQuarterTwo())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                .append(\" |3rd quarter: \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        builder.append(getQuarterThree())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                .append(\" |4th quarter: \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        builder.append(getQuarterFour())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                .append(\"\\n Histogram: \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        builder.append(getHistogramString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 64
    }
  },
  {
    "path": "src/seedu/addressbook/data/finance/UniqueFinanceList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.data.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * A list of matches. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class UniqueFinanceList implements Iterable\u003cFinance\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static class DuplicateFinanceException extends DuplicateDataException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        protected DuplicateFinanceException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            super(\"Operation would result in duplicate Finance\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Signals that an operation targeting a specified finance in the list would fail because"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * there is no such matching finance in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public static class FinanceNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private final List\u003cFinance\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Constructs empty finance list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public UniqueFinanceList() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Constructs a finance list with the given Finances."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public UniqueFinanceList(Finance...finances) throws UniqueFinanceList.DuplicateFinanceException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final List\u003cFinance\u003e initialTags \u003d Arrays.asList(finances);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            throw new UniqueFinanceList.DuplicateFinanceException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public UniqueFinanceList(Collection\u003cFinance\u003e finances) throws UniqueFinanceList.DuplicateFinanceException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        if (!Utils.elementsAreUnique(finances)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            throw new UniqueFinanceList.DuplicateFinanceException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        internalList.addAll(finances);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public UniqueFinanceList(UniqueFinanceList source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public List\u003cReadOnlyFinance\u003e immutableListView() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Checks if the list contains an equivalent finance as the given argument."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public boolean contains(ReadOnlyFinance toCheck) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Adds a finance to the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void add(Finance toAdd) throws UniqueFinanceList.DuplicateFinanceException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            throw new UniqueFinanceList.DuplicateFinanceException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Removes the equivalent finance from the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void remove(ReadOnlyFinance toRemove) throws UniqueFinanceList.FinanceNotFoundException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final boolean financeFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        if (!financeFoundAndDeleted) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            throw new UniqueFinanceList.FinanceNotFoundException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Clears all Finances in list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Sort all Finances in list by value in getFinance()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Comparator\u003cFinance\u003e customFinanceCompare \u003d Comparator.comparing(Finance::getFinance);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Collections.sort(internalList, customFinanceCompare);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Collections.reverse(internalList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public Iterator\u003cFinance\u003e iterator() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                || (other instanceof UniqueFinanceList // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueFinanceList) other).internalList));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 138
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/Match.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.team.TeamName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a match in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class Match implements ReadOnlyMatch {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private MatchDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private TeamName home;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private TeamName away;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private TicketSales homeSales;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private TicketSales awaySales;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Score score;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final List\u003cName\u003e goalScorers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final List\u003cName\u003e ownGoalScorers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Match(MatchDate date, TeamName home, TeamName away, TicketSales homeSales, TicketSales awaySales,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                 List\u003cName\u003e goalScorers, List\u003cName\u003e ownGoalScorers, Score score) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.home \u003d home;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.away \u003d away;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.homeSales \u003d homeSales;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.awaySales \u003d awaySales;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.goalScorers.addAll(goalScorers);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.ownGoalScorers.addAll(ownGoalScorers);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Match(ReadOnlyMatch source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this(source.getDate(), source.getHome(), source.getAway(), source.getHomeSales(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                source.getAwaySales(), source.getGoalScorers(), source.getOwnGoalScorers(), source.getScore());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public MatchDate getDate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public TeamName getHome() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return home;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public TeamName getAway() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return away;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public TicketSales getHomeSales() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return homeSales;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public TicketSales getAwaySales() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return awaySales;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cName\u003e getGoalScorers() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new ArrayList\u003c\u003e(goalScorers);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cName\u003e getOwnGoalScorers() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new ArrayList\u003c\u003e(ownGoalScorers);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Score getScore() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Replaces this match\u0027s goalScorers with the goalScorers in {@code replacement}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void setGoalScorers(List\u003cName\u003e replacement) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        goalScorers.clear();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        goalScorers.addAll(replacement);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void setOwnGoalScorers(List\u003cName\u003e replacement) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        ownGoalScorers.clear();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        ownGoalScorers.addAll(replacement);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void setScore(String score) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.score \u003d new Score(score);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof ReadOnlyMatch // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyMatch) other));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Objects.hash(date, home, away, homeSales, awaySales,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                goalScorers, ownGoalScorers);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return getAsTextShowSome();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 1,
      "yingrong1996": 1,
      "E0176106": 122
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/MatchDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Represents a match date in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class MatchDate implements Comparable\u003cMatchDate\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Date should be valid and in format: dd mmm yyyy\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String EXAMPLE \u003d \"15 Jun 2019\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public final Calendar calendar \u003d new GregorianCalendar();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs given MatchDate"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public MatchDate(String dateString) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        df.setLenient(false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        Date date \u003d df.parse(dateString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.calendar.setTime(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Retrieves a listing of every word in the Date, in order."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cString\u003e getWordsInDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Arrays.asList(df.format(calendar.getTime()).split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return df.format(calendar.getTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof MatchDate // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.calendar.equals(((MatchDate) other).calendar)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return calendar.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int compareTo(MatchDate date) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return this.calendar.compareTo(date.calendar);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 61
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/ReadOnlyMatch.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.team.TeamName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * A read-only immutable interface for a match in the addressbook."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public interface ReadOnlyMatch {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    MatchDate getDate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    TeamName getHome();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    TeamName getAway();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    TicketSales getHomeSales();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    TicketSales getAwaySales();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    Score getScore();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * The returned {@code Set} is a deep copy of the internal {@code Set},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * changes on the returned list will not affect the match\u0027s internal tags."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    List\u003cName\u003e getGoalScorers();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    List\u003cName\u003e getOwnGoalScorers();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    default boolean notPlayed() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return getScore().fullScore.isEmpty();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyMatch other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 other.getDate().equals(this.getDate()) // state checks here onwards"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 other.getHome().equals(this.getHome())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 other.getAway().equals(this.getAway())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 other.getHomeSales().equals(this.getHomeSales())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 other.getAwaySales().equals(this.getAwaySales()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Formats the match as text, showing all match details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        builder.append(getDate())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                .append(\" | Home: \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        builder.append(getHome())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                .append(\" | Away: \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        builder.append(getAway());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (this.notPlayed()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            builder.append(\" | Not Played\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            builder.append(\" | Score: \")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    .append(getScore());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            builder.append(\" | Home Sales: \")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    .append(getHomeSales());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            builder.append(\" | Away Sales: \")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    .append(getAwaySales());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            builder.append(\"\\nGoal Scorers:\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            if (getGoalScorers().isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                builder.append(\"None\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            for (Name goalScorer : getGoalScorers()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                builder.append(goalScorer + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            builder.append(\"\\nOwn Goals:\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            if (getOwnGoalScorers().isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                builder.append(\"None\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            for (Name ownGoalScorer : getOwnGoalScorers()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                builder.append(ownGoalScorer + \"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    default String getAsTextShowSome() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        builder.append(getDate())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                .append(\" | Home: \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        builder.append(getHome())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                .append(\" | Away: \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        builder.append(getAway());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (this.notPlayed()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            builder.append(\" | Not Played\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            builder.append(\" | Score: \")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    .append(getScore());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 1,
      "yingrong1996": 3,
      "E0176106": 100
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/Score.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Represents a match score in LeagueTracker."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class Score {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public final String fullScore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs given score"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param score"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Score(String score) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.fullScore \u003d score;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullScore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof Score // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.fullScore.equals(((Score) other).fullScore)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return fullScore.hashCode();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 34
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/TicketSales.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Represents a team\u0027s ticket sales of a match in USD in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class TicketSales {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String EXAMPLE \u003d \"500\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_TICKETSALES_CONSTRAINTS \u003d \"TeamName\u0027s ticket sales in USD\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final String TICKETSALES_VALIDATION_REGEX \u003d \"\\\\d*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Validates given ticket sales amount."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public TicketSales(String ticketSales) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        ticketSales \u003d ticketSales.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!isValidTicketSales(ticketSales)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TICKETSALES_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.value \u003d ticketSales;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Checks if a given string is a valid ticket sales amount."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static boolean isValidTicketSales(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return test.matches(TICKETSALES_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof TicketSales // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.value.equals(((TicketSales) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 1,
      "E0176106": 50
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/UniqueMatchList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * A list of matches. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class UniqueMatchList implements Iterable\u003cMatch\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static class DuplicateMatchException extends DuplicateDataException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        protected DuplicateMatchException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            super(\"Operation would result in duplicate matches\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Signals that an operation targeting a specified match in the list would fail because"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * there is no such matching match in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static class MatchNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Signals that Match was already updated and updating again will fail."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static class MatchUpdatedException extends Exception {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private final List\u003cMatch\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs empty match list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList() {}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs a match list with the given matches."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList(Match... matches) throws DuplicateMatchException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cMatch\u003e initialTags \u003d Arrays.asList(matches);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new DuplicateMatchException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param matches a collection of matches"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws DuplicateMatchException if the {@code matches} contains duplicate matches"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList(Collection\u003cMatch\u003e matches) throws DuplicateMatchException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!Utils.elementsAreUnique(matches)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new DuplicateMatchException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.addAll(matches);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UniqueMatchList(UniqueMatchList source) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyMatch}s."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cReadOnlyMatch\u003e immutableListView() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Checks if the list contains an equivalent match as the given argument."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean contains(ReadOnlyMatch toCheck) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Adds a match to the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws DuplicateMatchException if the match to add is a duplicate of an existing match in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void add(Match toAdd) throws DuplicateMatchException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new DuplicateMatchException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Removes the equivalent match from the list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws MatchNotFoundException if no such match could be found in the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void remove(ReadOnlyMatch toRemove) throws MatchNotFoundException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final boolean matchFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!matchFoundAndDeleted) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new MatchNotFoundException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Sorts matches by date in chronological order, then teams in lexicographical order."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void sort () {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        Comparator\u003cMatch\u003e customMatchCompare \u003d Comparator"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                .comparing(Match::getDate)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                .thenComparing(Match::getHome)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                .thenComparing(Match::getAway);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        Collections.sort(internalList, customMatchCompare);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Clears all matches in list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Replaces equivalent match in list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void update(ReadOnlyMatch toRemove, Match toReplace) throws MatchNotFoundException, MatchUpdatedException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!toRemove.notPlayed()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new MatchUpdatedException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final boolean matchFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!matchFoundAndDeleted) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            throw new MatchNotFoundException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        internalList.add(toReplace);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Iterator\u003cMatch\u003e iterator() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof UniqueMatchList // instanceof handles nulls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueMatchList) other).internalList));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 10,
      "E0176106": 155
    }
  },
  {
    "path": "src/seedu/addressbook/data/match/UpdateMatchDescriptor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.data.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Stores the details to update the match with."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * Each field value will fill the corresponding field value of the match."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class UpdateMatchDescriptor {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private TicketSales homeSales;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private TicketSales awaySales;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cName\u003e goalScorers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cName\u003e ownGoalScorers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UpdateMatchDescriptor(String homeSales,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                              String awaySales,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                              List\u003cName\u003e goalScorers,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                              List\u003cName\u003e ownGoalScorers) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.homeSales \u003d new TicketSales(homeSales);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.awaySales \u003d new TicketSales(awaySales);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (goalScorers.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            this.goalScorers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            this.goalScorers \u003d goalScorers;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (ownGoalScorers.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            this.ownGoalScorers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            this.ownGoalScorers \u003d ownGoalScorers;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public UpdateMatchDescriptor(UpdateMatchDescriptor toCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        setHomeSales(toCopy.homeSales);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        setAwaySales(toCopy.awaySales);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        setGoalScorers(toCopy.goalScorers);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        setOwnGoalScorers(toCopy.ownGoalScorers);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void setHomeSales(TicketSales homeSales) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.homeSales \u003d homeSales;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public TicketSales getHomeSales() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return homeSales;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void setAwaySales(TicketSales awaySales) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.awaySales \u003d awaySales;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public TicketSales getAwaySales() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return awaySales;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void setGoalScorers(List\u003cName\u003e goalScorers) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.goalScorers \u003d goalScorers;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cName\u003e getGoalScorers() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return goalScorers;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void setOwnGoalScorers(List\u003cName\u003e ownGoalScorers) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.ownGoalScorers \u003d ownGoalScorers;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cName\u003e getOwnGoalScorers() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return ownGoalScorers;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!(other instanceof UpdateMatchDescriptor)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        UpdateMatchDescriptor e \u003d (UpdateMatchDescriptor) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return getHomeSales().equals(e.getHomeSales())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 getAwaySales().equals(e.getAwaySales())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 getGoalScorers().equals(e.getGoalScorers())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 getOwnGoalScorers().equals(e.getOwnGoalScorers());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 100
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Age.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Represents a player\u0027s age in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"20\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_AGE_CONSTRAINTS \u003d \"Age of a player must be an integer that is between 0 and 100\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String AGE_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given age."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given age integer is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Age (String age) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        age \u003d age.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidAge(age)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.value \u003d age;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid age."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "            int temp \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return (test.matches(AGE_VALIDATION_REGEX) \u0026\u0026 temp \u003e 0 \u0026\u0026 temp \u003c 100);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof Age// instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.value.equals(((Age) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 62
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Appearance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents number of appearances a player made in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Appearance {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"30\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_APPEARANCE_CONSTRAINTS \u003d \"No.of appearance must be a non-negative integer\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String APPEARANCE_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given appearance number."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given Number of Appearance integer is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Appearance (String appearance) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "        appearance \u003d appearance.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidApp(appearance)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_APPEARANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.value \u003d appearance;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given integer is a valid jersey number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidApp(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "            int temp \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return (test.matches(APPEARANCE_VALIDATION_REGEX) \u0026\u0026 temp \u003e\u003d 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof Appearance // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.value.equals(((Appearance) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 56,
      "yingrong1996": 5
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/GoalsAssisted.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents goals assisted by a player made in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class GoalsAssisted {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"1\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_GA_CONSTRAINTS \u003d \"No.of assists for a player must be a non-negative integer\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String GA_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given No. of assists."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given assist number integer is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public GoalsAssisted (String ga) throws IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "        ga \u003d ga.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidGa(ga)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_GA_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.value \u003d ga;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given integer is a valid goals assisted number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidGa(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "            int temp \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return (test.matches(GA_VALIDATION_REGEX) \u0026\u0026 temp \u003e\u003d 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof GoalsAssisted // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.value.equals(((GoalsAssisted) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 55,
      "yingrong1996": 4
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/GoalsScored.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents goals scored by a player made in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class GoalsScored {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"1\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_GS_CONSTRAINTS \u003d \"No.of goals scored must be a non-negative integer\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String GS_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given goals scored."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given goals scored integer is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public GoalsScored (String gs) throws IllegalValueException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "        gs \u003d gs.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidGs(gs)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_GS_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.value \u003d gs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given integer is a valid goals scored number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidGs(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "            int temp \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return (test.matches(GS_VALIDATION_REGEX) \u0026\u0026 temp \u003e\u003d 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof GoalsScored // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.value.equals(((GoalsScored) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 54,
      "yingrong1996": 4
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/HealthStatus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a player\u0027s health status in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class HealthStatus {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"Healthy\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_HEALTHSTATUS_CONSTRAINTS \u003d \"Player\u0027s Health\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"Status should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String HEALTHSTATUS_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final String fullHs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given Health Status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given Health Status string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public HealthStatus (String hs) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        hs \u003d hs.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidHs(hs)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_HEALTHSTATUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.fullHs \u003d hs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid Health Strategy."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidHs(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return test.matches(HEALTHSTATUS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Retrieves a listing of every word in Health Status, in order."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public List\u003cString\u003e getWordsInTeam() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Arrays.asList(fullHs.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return fullHs;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof HealthStatus // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.fullHs.equals(((HealthStatus) other).fullHs)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return fullHs.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 46,
      "yingrong1996": 17
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/JerseyNumber.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a player\u0027s jersey number on the field."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class JerseyNumber {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"10\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_JN_CONSTRAINTS \u003d \"Jersey Number of a player must be an integer between 1 and 35\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String JN_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given jersey number."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given Jersey Number integer is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public JerseyNumber (String jn) throws IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "        jn \u003d jn.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidJn(jn)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_JN_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.value \u003d jn;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given integer is a valid jersey number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidJn(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "            int temp \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return (test.matches(JN_VALIDATION_REGEX) \u0026\u0026 temp \u003e\u003d 1 \u0026\u0026 temp \u003c 35);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof JerseyNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.value.equals(((JerseyNumber) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 55,
      "yingrong1996": 4
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a player\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"John Doe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Player names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidName(name)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if a given string is a valid player name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.asList(fullName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int compareTo(Name name) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return this.fullName.compareToIgnoreCase(name.fullName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 4,
      "yingrong1996": 8,
      "-": 57
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Nationality.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents country of a player made in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Nationality implements Comparable\u003cNationality\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"Spain\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_COUNTRY_CONSTRAINTS \u003d \"Nationality should be a string\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String COUNTRY_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String fullCountry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given country name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given country string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Nationality(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidName(name)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_COUNTRY_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullCountry \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid country name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return test.matches(COUNTRY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public List\u003cString\u003e getWordsInCountry() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return Arrays.asList(fullCountry.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullCountry;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof Nationality // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.fullCountry.equals(((Nationality) other).fullCountry)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullCountry.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int compareTo (Nationality nationality) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return this.fullCountry.compareToIgnoreCase(nationality.fullCountry);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "warheade": 70,
      "yingrong1996": 4
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Player.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Player implements ReadOnlyPlayer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private PositionPlayed positionPlayed;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private Salary salary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private Age age;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private GoalsScored goalsScored;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private GoalsAssisted goalsAssisted;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private TeamName teamName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private Nationality nationality;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private JerseyNumber jerseyNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private Appearance appearance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private HealthStatus healthStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Player(Name name, PositionPlayed positionPlayed, Age age, Salary salary, GoalsScored goalsScored,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "                  GoalsAssisted goalsAssisted, TeamName teamName, Nationality nationality, JerseyNumber jerseyNumber,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "                  Appearance appearance, HealthStatus healthStatus, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.positionPlayed \u003d positionPlayed;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.salary \u003d salary;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.goalsScored \u003d goalsScored;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.goalsAssisted \u003d goalsAssisted;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.teamName \u003d teamName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.nationality \u003d nationality;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.jerseyNumber \u003d jerseyNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.appearance \u003d appearance;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.healthStatus \u003d healthStatus;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Player(ReadOnlyPlayer source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this(source.getName(), source.getPositionPlayed(), source.getAge(), source.getSalary(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "                source.getGoalsScored(), source.getGoalsAssisted(), source.getTeamName(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "                source.getNationality(), source.getJerseyNumber(), source.getAppearance(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "                source.getHealthStatus(), source.getTags());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * User Default Constructor"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * allow user to create a player with some attributes as default value"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Player(Name name, PositionPlayed positionPlayed, Age age, Salary salary, TeamName teamName,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "                  Nationality nationality, JerseyNumber jerseyNumber, Set\u003cTag\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this(name, positionPlayed, age, salary, new GoalsScored(\"0\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new GoalsAssisted(\"0\"), teamName, nationality, jerseyNumber, new Appearance(\"0\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new HealthStatus(\"Healthy\"), tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public PositionPlayed getPositionPlayed() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return positionPlayed;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Salary getSalary() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return salary;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public GoalsScored getGoalsScored() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return goalsScored;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public GoalsAssisted getGoalsAssisted() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return goalsAssisted;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public TeamName getTeamName() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return teamName;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Nationality getNationality() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return nationality;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public JerseyNumber getJerseyNumber() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return jerseyNumber;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Appearance getAppearance() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return appearance;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public HealthStatus getHealthStatus() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return healthStatus;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Replaces this player\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "warheade"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "warheade"
        },
        "content": "        tags.addAll(replacement);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof ReadOnlyPlayer // instanceof handles nulls"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyPlayer) other));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "warheade"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return Objects.hash(name, positionPlayed, age, salary, goalsScored,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "warheade"
        },
        "content": "                goalsAssisted, teamName, nationality, jerseyNumber, appearance, healthStatus, tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 163
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/PositionPlayed.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Represents a player\u0027s Position on the field."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPosition(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class PositionPlayed {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String EXAMPLE \u003d \"Midfielder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_POSITIONPLAYED_CONSTRAINTS \u003d \"Position of a player\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            + \"must be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String POSITIONPLAYED_VALIDATION_REGEX \u003d \".+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String fullPosition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given position."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given position string is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public PositionPlayed (String position) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        position \u003d position.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidPosition(position)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_POSITIONPLAYED_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullPosition \u003d position;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid position."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidPosition(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return test.matches(POSITIONPLAYED_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullPosition;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof PositionPlayed // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.fullPosition.equals(((PositionPlayed) other).fullPosition)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullPosition.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "warheade": 52,
      "yingrong1996": 4
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/ReadOnlyPlayer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": " * A read-only immutable interface for a Player in a football league."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "public interface ReadOnlyPlayer {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    PositionPlayed getPositionPlayed();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    Salary getSalary();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "    Age getAge();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "    GoalsScored getGoalsScored();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    GoalsAssisted getGoalsAssisted();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "    TeamName getTeamName();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    Nationality getNationality();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    JerseyNumber getJerseyNumber();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    Appearance getAppearance();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "    HealthStatus getHealthStatus();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * The returned {@code Set} is a deep copy of the internal {@code Set},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * changes on the returned list will not affect the player\u0027s internal tags."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyPlayer other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 other.getPositionPlayed().equals(this.getPositionPlayed())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 other.getAge().equals(this.getAge())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 other.getSalary().equals(this.getSalary())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 other.getGoalsScored().equals(this.getGoalsScored())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 other.getGoalsAssisted().equals(this.getGoalsAssisted())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 other.getTeamName().equals(this.getTeamName())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 other.getNationality().equals(this.getNationality())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 other.getJerseyNumber().equals(this.getJerseyNumber())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 other.getAppearance().equals(this.getAppearance())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 other.getHealthStatus().equals(this.getHealthStatus()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Formats the player as text, showing all contact details."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": "        builder.append(\"\\n\").append(\"Name: \").append(getName()).append(\"  |  Position Played: \")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "                .append(getPositionPlayed()).append(\"  |  Age: \").append(getAge()).append(\"  |  Salary: \")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "                .append(getSalary()).append(\"\\n\").append(\"Goals scored: \").append(getGoalsScored())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": "                .append(\"  |  Goals assisted: \").append(getGoalsAssisted()).append(\"  |  TeamName: \")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "                .append(getTeamName()).append(\"  |  Nationality: \").append(getNationality())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "                .append(\"\\n\").append(\"Jersey Number: \").append(getJerseyNumber())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": "                .append(\"  |  Appearance: \").append(getAppearance()).append(\"  |  HealthStatus: \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "                .append(getHealthStatus()).append(\" | Tags: \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 81
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/Salary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Represents a Player\u0027s salary."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSalary(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class Salary {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"100000\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_SALARY_CONSTRAINTS \u003d \"Player salary should be a positive number\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String SALARY_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Validates given player salary."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given salary string is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Salary(String salary) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "        salary \u003d salary.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidSalary(salary)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_SALARY_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.value \u003d salary;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Checks if a given string is a valid player salary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidSalary(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "            Double i \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return (test.matches(SALARY_VALIDATION_REGEX) \u0026\u0026 i \u003e 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof Salary // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.value.equals(((Salary) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "warheade": 63
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/TeamName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a player\u0027s team in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class TeamName {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String EXAMPLE \u003d \"FC Barcelona\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_TEAM_CONSTRAINTS \u003d \"Player\u0027s team names\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "            + \"can be anything.+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String TEAM_VALIDATION_REGEX \u003d \".+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public final String fullTeam;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Validates given team name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if given team name string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public TeamName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!isValidTeam(name)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TEAM_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.fullTeam \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if a given string is a valid team name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static boolean isValidTeam(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return test.matches(TEAM_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Retrieves a listing of every word in the team name, in order."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public List\u003cString\u003e getWordsInTeam() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return Arrays.asList(fullTeam.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullTeam;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof TeamName // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.fullTeam.equals(((TeamName) other).fullTeam)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return fullTeam.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 58,
      "yingrong1996": 5
    }
  },
  {
    "path": "src/seedu/addressbook/data/player/UniquePlayerList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.data.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": " * A list of players. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": " * @see Player#equals(Object)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class UniquePlayerList implements Iterable\u003cPlayer\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static class DuplicatePlayerException extends DuplicateDataException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "        protected DuplicatePlayerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "            super(\"Operation would result in duplicate players\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicated jn` property"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static class DuplicateJerseyInSameTeamException extends DuplicateDataException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "        protected DuplicateJerseyInSameTeamException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "            super(\"Operation would result in duplicate jersey numbers in the same team\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Signals that an operation targeting a specified player in the list would fail because"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * there is no such matching player in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static class PlayerNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Signals that a specified player that is assumed to be in a specified team cannot be found."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static class PlayerNotInTeamException extends Exception {}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final List\u003cPlayer\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Constructs empty player list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public UniquePlayerList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Constructs a player list with the given players."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public UniquePlayerList(Player... players) throws DuplicatePlayerException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final List\u003cPlayer\u003e initialTags \u003d Arrays.asList(players);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new DuplicatePlayerException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param players a collection of players"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws DuplicatePlayerException if the {@code players} contains duplicate players"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public UniquePlayerList(Collection\u003cPlayer\u003e players) throws DuplicatePlayerException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!Utils.elementsAreUnique(players)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new DuplicatePlayerException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "        internalList.addAll(players);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public UniquePlayerList(UniquePlayerList source) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyPlayer}s."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public List\u003cReadOnlyPlayer\u003e immutableListView() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Checks if the list contains an equivalent player as the given argument."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean contains(ReadOnlyPlayer toCheck) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (Player player: internalList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "            if (player.getName().toString().equals(toCheck.getName().toString())) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *  Checks if the list contains a player in the same team with the same jersey number"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param toCheck A player object to be checked"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return a Boolean value indicating whether the player with same jersey number in same team already exists"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean containsSameJnSameTm(ReadOnlyPlayer toCheck) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (Player player: internalList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "warheade"
        },
        "content": "            if (player.getTeamName().toString().equals(toCheck.getTeamName().toString())) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": "                if (player.getJerseyNumber().toString().equals(toCheck.getJerseyNumber().toString())) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Adds a player to the list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws DuplicatePlayerException if the player to add is a duplicate of an existing player in the list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws DuplicateJerseyInSameTeamException if the jersey number is already taken in the team"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void add(Player toAdd) throws DuplicatePlayerException, DuplicateJerseyInSameTeamException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new DuplicatePlayerException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (containsSameJnSameTm(toAdd)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new DuplicateJerseyInSameTeamException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "warheade"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Removes the equivalent player from the list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws PlayerNotFoundException if no such player could be found in the list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void remove(ReadOnlyPlayer toRemove) throws PlayerNotFoundException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final boolean playerFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!playerFoundAndDeleted) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new PlayerNotFoundException();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Edits an existing player in the league."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param toEdit    the target player to be edited"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param newPlayer the target player with edited profile"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws PlayerNotFoundException if no such player could be found in the list"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void edit(ReadOnlyPlayer toEdit, Player newPlayer) throws PlayerNotFoundException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final boolean playerFoundAndDeleted \u003d internalList.remove(toEdit);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!playerFoundAndDeleted) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new PlayerNotFoundException();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "warheade"
        },
        "content": "        internalList.add(newPlayer);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Clears all players in list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "warheade"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Sort all players in list by ascending alphabetical order."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Comparator\u003cPlayer\u003e customPlayerCompare \u003d Comparator.comparing(Player::getName);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Collections.sort(internalList, customPlayerCompare);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Iterator\u003cPlayer\u003e iterator() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "warheade"
        },
        "content": "                || (other instanceof UniquePlayerList // instanceof handles nulls"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniquePlayerList) other).internalList));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 203,
      "E0176106": 6
    }
  },
  {
    "path": "src/seedu/addressbook/data/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags can be anything\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \".+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given tag name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given tag name string is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidTagName(name)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 2,
      "-": 50
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/Country.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a team\u0027s country in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Country {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String EXAMPLE \u003d \"Singapore\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_COUNTRY_CONSTRAINTS \u003d \"Nationality names should be alphabets only\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String COUNTRY_VALIDATION_REGEX \u003d \"[\\\\p{javaAlphabetic} ]+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Validates given country names."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Country(String country) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        country \u003d country.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidCountry(country)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new IllegalValueException(MESSAGE_COUNTRY_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.value \u003d country;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if a given string is a valid country names."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidCountry(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return test.matches(COUNTRY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof Country // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.value.equals(((Country) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 51
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/EditTeamDescriptor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Stores the details to edit the team with."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Each non-empty field value will replace the corresponding field value of the team."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class EditTeamDescriptor {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private TeamName teamName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Country country;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Sponsor sponsor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Set\u003cTag\u003e tagset;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public EditTeamDescriptor() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public EditTeamDescriptor(String name,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                              String country,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                              String sponsor,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                              Set\u003cTag\u003e tagset) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            this.teamName \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            this.teamName \u003d new TeamName(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (country \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.country \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.country \u003d new Country(country);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (sponsor \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.sponsor \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.sponsor \u003d new Sponsor(sponsor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (tagset.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.tagset \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            this.tagset \u003d tagset;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public EditTeamDescriptor(EditTeamDescriptor toCopy) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        setTeamName(toCopy.teamName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        setCountry(toCopy.country);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        setSponsor(toCopy.sponsor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        setTags(toCopy.tagset);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public void setTeamName(TeamName teamName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        this.teamName \u003d teamName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public TeamName getTeamName() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return teamName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setCountry(Country country) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return country;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setSponsor(Sponsor sponsor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.sponsor \u003d sponsor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Sponsor getSponsor() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return sponsor;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tagset) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.tagset \u003d tagset;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return tagset;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!(other instanceof EditTeamDescriptor)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        EditTeamDescriptor e \u003d (EditTeamDescriptor) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return getTeamName().equals(e.getTeamName())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 getCountry().equals(e.getCountry())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 getSponsor().equals(e.getSponsor())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 105,
      "E0176106": 9
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/ReadOnlyTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Player;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * A read-only immutable interface for a team in the league tracker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public interface ReadOnlyTeam {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    TeamName getTeamName();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Country getCountry();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Sponsor getSponsor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "    Set\u003cPlayer\u003e getPlayers();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Set\u003cMatch\u003e getMatches();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    int getPoints();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    int getWins();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    int getDraws();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    int getLoses();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * changes on the returned list will not affect the team\u0027s internal tags."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyTeam other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 other.getTeamName().equals(this.getTeamName()) // state checks here onwards"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 other.getCountry().equals(this.getCountry())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 other.getSponsor().equals(this.getSponsor()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getTeamName().fullName.trim())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "                .append(\" | Nationality: \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getCountry().toString().trim())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Sponsorship: USD \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getSponsor().toString().trim())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Wins: \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getWins())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Draw: \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getDraws())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Lose: \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getLoses())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Points: \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getPoints())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Tags: \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(\"\\nPlayer List:\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Player player : getPlayers()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            builder.append(player.getName() + \"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(\"\\nMatch List:\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Match match : getMatches()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            builder.append(match.getAsTextShowSome() + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    default String getAsTextShowSome() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getTeamName().fullName.trim())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Nationality: \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getCountry().toString().trim())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Sponsorship: USD \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getSponsor().toString().trim())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Wins: \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getWins())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Draw: \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getDraws())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Lose: \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getLoses())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Points: \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        builder.append(getPoints())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .append(\" | Tags: \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 6,
      "yingrong1996": 89
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/Sponsor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a team\u0027s balance of sponsorship in USD in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Sponsor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String EXAMPLE \u003d \"500\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_SPONSOR_CONSTRAINTS \u003d \"team\u0027s Sponsorship in USD\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String SPONSOR_VALIDATION_REGEX \u003d \"([1-9]+[0-9]*[.]*[0-9]*)|([0]+)|([0]{1}[.][0-9]*)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Validates given sponsorship amount."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Sponsor(String sponsor) throws IllegalValueException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        sponsor \u003d sponsor.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidSponsor(sponsor)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new IllegalValueException(MESSAGE_SPONSOR_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.value \u003d Double.toString(Double.valueOf(sponsor));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if a given string is a valid sponsorship amount."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidSponsor(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return test.matches(SPONSOR_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof Sponsor // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.value.equals(((Sponsor) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 52
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/Team.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Player;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a team in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class Team implements ReadOnlyTeam {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private TeamName teamName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Country country;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Sponsor sponsor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private int win;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private int lose;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private int draw;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private int points;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Set\u003cPlayer\u003e playerlist \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final Set\u003cMatch\u003e matchlist \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Team(TeamName teamName,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Country country,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Sponsor sponsor,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Set\u003cMatch\u003e matchlist,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Set\u003cPlayer\u003e playerlist,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.teamName \u003d teamName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.sponsor \u003d sponsor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.win \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.lose \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.draw \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.points \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.matchlist.addAll(matchlist);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.playerlist.addAll(playerlist);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Team(TeamName teamName,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Country country,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Sponsor sponsor,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                int win,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                int lose,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                int draw,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                int points,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Set\u003cMatch\u003e matchlist,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Set\u003cPlayer\u003e playerlist,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.teamName \u003d teamName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.sponsor \u003d sponsor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.win \u003d win;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.lose \u003d lose;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.draw \u003d draw;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.points \u003d points;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.matchlist.addAll(matchlist);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.playerlist.addAll(playerlist);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Team(ReadOnlyTeam source) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this(source.getTeamName(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                source.getCountry(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                source.getSponsor(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                source.getMatches(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                source.getPlayers(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                source.getTags());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Set\u003cPlayer\u003e getPlayers() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new HashSet\u003c\u003e(playerlist);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Set\u003cMatch\u003e getMatches() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new HashSet\u003c\u003e(matchlist);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Sponsor getSponsor() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return sponsor;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public TeamName getTeamName() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return teamName;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return country;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int getPoints() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int getWins() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return win;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int getLoses() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return lose;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int getDraws() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return draw;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Replaces this team\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        tags.addAll(replacement);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void setPlayers(Set\u003cPlayer\u003e replacement) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        playerlist.clear();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        playerlist.addAll(replacement);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void updatePoints() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.points \u003d 3 * this.win + this.draw;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Clearing of match listing will trigger reset of teams result to 0"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void clearResults() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.win \u003d 0;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.lose \u003d 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.draw \u003d 0;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.points \u003d 0;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void addPlayer(Player player) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.playerlist.add(player);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void removePlayer(ReadOnlyPlayer player) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.playerlist.remove(player);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void clearPlayerList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.playerlist.clear();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Adding of Matches will also initialize the computing for win lose and draw counter"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void addMatch(Match match) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.matchlist.add(match);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (teamName.toString().equals(match.getHome().toString()) \u0026\u0026 !match.notPlayed()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            String result \u003d match.getScore().toString();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            String[] score \u003d result.split(\"-\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (Integer.valueOf(score[0]) \u003e Integer.valueOf(score[1])) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                this.win++;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            } else if (Integer.valueOf(score[0]) \u003c Integer.valueOf(score[1])) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                this.lose++;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                this.draw++;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (teamName.toString().equals(match.getAway().toString()) \u0026\u0026 !match.notPlayed()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            String result \u003d match.getScore().toString();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            String[] score \u003d result.split(\"-\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (Integer.valueOf(score[1]) \u003e Integer.valueOf(score[0])) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                this.win++;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            } else if (Integer.valueOf(score[1]) \u003c Integer.valueOf(score[0])) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                this.lose++;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                this.draw++;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Removal of matches will result in corresponding changes in Team Score"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @param match"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void removeMatch(ReadOnlyMatch match) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.matchlist.remove(match);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (teamName.toString().equals(match.getHome().toString()) \u0026\u0026 !match.notPlayed()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            String result \u003d match.getScore().toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            String[] score \u003d result.split(\"-\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (Integer.valueOf(score[0]) \u003e Integer.valueOf(score[1])) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                this.win--;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            } else if (Integer.valueOf(score[0]) \u003c Integer.valueOf(score[1])) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                this.lose--;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                this.draw--;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (teamName.toString().equals(match.getAway().toString()) \u0026\u0026 !match.notPlayed()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            String result \u003d match.getScore().toString();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            String[] score \u003d result.split(\"-\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (Integer.valueOf(score[1]) \u003e Integer.valueOf(score[0])) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                this.win--;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            } else if (Integer.valueOf(score[1]) \u003c Integer.valueOf(score[0])) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                this.lose--;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                this.draw--;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void clearMatchList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.matchlist.clear();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof ReadOnlyTeam // instanceof handles nulls"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyTeam) other));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Objects.hash(teamName, country, sponsor, playerlist, tags);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return getAsTextShowSome();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "warheade": 7,
      "yingrong1996": 253
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/TeamName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * Represents a team\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class TeamName implements Comparable\u003cTeamName\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String EXAMPLE \u003d \"Singapore United\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"team names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public TeamName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!isValidName(name)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        this.fullName \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if a given string is a valid team name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Arrays.asList(fullName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || (other instanceof TeamName // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((TeamName) other).fullName)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public int compareTo(TeamName teamName) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return this.fullName.compareToIgnoreCase(teamName.fullName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 61,
      "E0176106": 6
    }
  },
  {
    "path": "src/seedu/addressbook/data/team/UniqueTeamList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.data.team;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * A list of Teams. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class UniqueTeamList implements Iterable\u003cTeam\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static class DuplicateTeamException extends DuplicateDataException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        protected DuplicateTeamException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            super(\"Operation would result in duplicate Teams\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Signals that an operation targeting a specified team in the list would fail because"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * there is no such matching team in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static class TeamNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private final List\u003cTeam\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs empty team list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs a team list with the given Teams."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList(Team...teams) throws DuplicateTeamException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cTeam\u003e initialTags \u003d Arrays.asList(teams);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new DuplicateTeamException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList(Collection\u003cTeam\u003e teams) throws DuplicateTeamException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!Utils.elementsAreUnique(teams)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new DuplicateTeamException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.addAll(teams);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public UniqueTeamList(UniqueTeamList source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public List\u003cReadOnlyTeam\u003e immutableListView() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Checks if the list contains an equivalent team as the given argument."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean contains(ReadOnlyTeam toCheck) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String nameToCheck \u003d toCheck.getTeamName().toString().toLowerCase();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (ReadOnlyTeam employee: internalList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            String employeeName \u003d employee.getTeamName().toString().toLowerCase();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (employeeName.equals(nameToCheck)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Adds a team to the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void add(Team toAdd) throws DuplicateTeamException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new DuplicateTeamException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Removes the equivalent team from the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void remove(ReadOnlyTeam toRemove) throws TeamNotFoundException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final boolean teamFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!teamFoundAndDeleted) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new TeamNotFoundException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Clears all Teams in list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Sort all Teams in list by ascending alphabetical order."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Comparator\u003cTeam\u003e customTeamCompare \u003d Comparator"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .comparing(Team::getPoints)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .thenComparing(Team::getWins)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                .thenComparing(Team::getTeamName);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Collections.sort(internalList, customTeamCompare);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Removes the equivalent team from the list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void edit(ReadOnlyTeam toRemove, Team toReplace) throws TeamNotFoundException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final boolean teamFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!teamFoundAndDeleted) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new TeamNotFoundException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        internalList.add(toReplace);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return targeted team from list of all teams."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws TeamNotFoundException if team is not found"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Team find (TeamName target) throws TeamNotFoundException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (Team team : internalList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            if (team.getTeamName().equals(target)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return team;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        throw new TeamNotFoundException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public Iterator\u003cTeam\u003e iterator() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                || (other instanceof UniqueTeamList // instanceof handles nulls"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueTeamList) other).internalList));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 153,
      "E0176106": 14
    }
  },
  {
    "path": "src/seedu/addressbook/export/FinanceApachePoiWriter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFCell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFRow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFSheet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFWorkbook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": " * this class helps to convert finance profiles correctly into excel file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class FinanceApachePoiWriter {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final String outputFilepath \u003d \"exported_finance_record.xls\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Path exportPath \u003d Paths.get(outputFilepath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final List\u003cReadOnlyFinance\u003e allFinances;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public FinanceApachePoiWriter(List\u003cReadOnlyFinance\u003e allFinances) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "        requireNonNull(allFinances);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "        allFinances.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!(Files.exists(exportPath) \u0026\u0026 Files.isRegularFile(exportPath))) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "                Files.createFile(exportPath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "                System.out.println(\"Error creating output file: \" + exportPath.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"Initializing exportFinance output file: \" + exportPath.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.allFinances \u003d allFinances;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * writes finance records to the destination excel sheet"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void write() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFWorkbook workBook \u003d new HSSFWorkbook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFSheet financeSheet \u003d workBook.createSheet(\"League Finance Sheet\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFRow row \u003d financeSheet.createRow(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFCell cell \u003d row.createCell(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Index Number\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Team Name\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Amount of Sponsorship Received\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Amount of Ticket Income\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Amount of Total Income\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(5);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Amount of Q1 Income\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(6);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Amount of Q2 Income\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(7);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Amount of Q3 Income\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(8);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Amount of Q4 Income\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "            int num \u003d allFinances.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d num; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "                ReadOnlyFinance financeNow \u003d allFinances.get(i - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "                row \u003d financeSheet.createRow(i);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(financeNow.getTeamName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(financeNow.getSponsor());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(financeNow.getTicketIncome());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(4);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(financeNow.getFinance());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(5);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(financeNow.getQuarterOne());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(6);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(financeNow.getQuarterTwo());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(7);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(financeNow.getQuarterThree());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(8);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(financeNow.getQuarterFour());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": "            for (int j \u003d 0; j \u003c\u003d 8; j++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": "                financeSheet.autoSizeColumn(j);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "                workBook.write(new FileOutputStream(outputFilepath));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "                workBook.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "            } catch (FileNotFoundException ffe) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": "                System.out.println(\"File specified by the outputFilePath does not exist\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": "                throw new FileNotFoundException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "                System.out.println(\"Error writing data to \" + outputFilepath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "warheade"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"Please check your parameters. npe happening\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (FileNotFoundException ffe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"File not found...\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"Error exporting to file\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * get the current export path of the excel file"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return the current export path of the excel file"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Path getExportPath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return exportPath;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 137
    }
  },
  {
    "path": "src/seedu/addressbook/export/MatchApachePoiWriter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFCell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFRow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFSheet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFWorkbook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": " * this class helps to convert match information correctly into excel file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class MatchApachePoiWriter {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final String outputFilepath \u003d \"exported_match_record.xls\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Path exportPath \u003d Paths.get(outputFilepath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final List\u003cReadOnlyMatch\u003e allMatches;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public MatchApachePoiWriter(List\u003cReadOnlyMatch\u003e allMatches) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "        requireNonNull(allMatches);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "        allMatches.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!(Files.exists(exportPath) \u0026\u0026 Files.isRegularFile(exportPath))) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "                Files.createFile(exportPath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "                System.out.println(\"Error creating output file: \" + exportPath.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"Initializing exportMatch output file: \" + exportPath.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.allMatches \u003d allMatches;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * writes match information to the destination excel sheet"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void write() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFWorkbook workBook \u003d new HSSFWorkbook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFSheet matchSheet \u003d workBook.createSheet(\"MatchSheet\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFRow row \u003d matchSheet.createRow(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFCell cell \u003d row.createCell(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Index Number\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Date\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Home Team\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Away Team\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Ticket Sales going to Home Team\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(5);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Ticket Sales going to Away Team\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(6);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Goal Scorers\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(7);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Own Goal Scorers\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "            int num \u003d allMatches.size();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d num; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "                ReadOnlyMatch matchNow \u003d allMatches.get(i - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "                List\u003cName\u003e goalScorers \u003d matchNow.getGoalScorers();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "                List\u003cName\u003e ownGoalScorers \u003d matchNow.getOwnGoalScorers();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String gsString \u003d createGoalScorerString(goalScorers);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String ogsString \u003d createOwnGoalScorerString(ownGoalScorers);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "warheade"
        },
        "content": "                row \u003d matchSheet.createRow(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(matchNow.getDate().toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(matchNow.getHome().toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(3);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(matchNow.getAway().toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(4);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(matchNow.getHomeSales().toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(5);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(matchNow.getAwaySales().toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(6);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(gsString);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(7);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(ogsString);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": "            for (int j \u003d 0; j \u003c\u003d 7; j++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": "                matchSheet.autoSizeColumn(j);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "                workBook.write(new FileOutputStream(outputFilepath));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "                workBook.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "            } catch (FileNotFoundException ffe) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": "                System.out.println(\"File specified by the outputFilePath does not exist\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": "                throw new FileNotFoundException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "                System.out.println(\"Error writing data to \" + outputFilepath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "warheade"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"Please check your parameters. npe happening\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (FileNotFoundException ffe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"File not found...\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"Error exporting to file\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * get the current export path of the excel file"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return the current export path of the excel file"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Path getExportPath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return exportPath;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * create the String of all goal scorers in a match"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param goalScorers a List of Name objects of all goal scorers in a match"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return a comma-separated string with names of all goalScorers in a match"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private String createGoalScorerString(List\u003cName\u003e goalScorers) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "warheade"
        },
        "content": "        String finalGsString \u003d \"\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (Name name : goalScorers) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "warheade"
        },
        "content": "            finalGsString \u003d finalGsString.concat(name.toString() + \", \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return finalGsString;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * create the String of all own goal scorers in a match"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param ownGoalScorers a List of Name objects of all own-goal scorers in a match"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return a comma-separated string with names of all own-goal scorers in a match"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private String createOwnGoalScorerString(List\u003cName\u003e ownGoalScorers) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "warheade"
        },
        "content": "        String finalOgsString \u003d \"\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (Name name : ownGoalScorers) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "warheade"
        },
        "content": "            finalOgsString \u003d finalOgsString.concat(name.toString() + \", \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return finalOgsString;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 167
    }
  },
  {
    "path": "src/seedu/addressbook/export/PlayerApachePoiWriter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFCell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFRow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFSheet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFWorkbook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": " * this class helps to convert player profiles correctly into excel file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class PlayerApachePoiWriter {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final String outputFilepath \u003d \"exported_player_record.xls\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Path exportPath \u003d Paths.get(outputFilepath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final List\u003cReadOnlyPlayer\u003e allPlayers;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public PlayerApachePoiWriter(List\u003cReadOnlyPlayer\u003e allPlayers) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "        requireNonNull(allPlayers);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "        allPlayers.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!(Files.exists(exportPath) \u0026\u0026 Files.isRegularFile(exportPath))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "                Files.createFile(exportPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "                System.out.println(\"Error creating output file: \" + exportPath.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"Initializing exportPlayer output file: \" + exportPath.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.allPlayers \u003d allPlayers;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * writes player profiles to the destination excel sheet"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void write() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFWorkbook workBook \u003d new HSSFWorkbook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFSheet playerSheet \u003d workBook.createSheet(\"PlayerSheet\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFRow row \u003d playerSheet.createRow(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFCell cell \u003d row.createCell(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Index Number\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Name\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Team Name\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Position Played\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Age\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(5);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Salary\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(6);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Goals Scored\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(7);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Goals Assisted\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(8);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Nationality\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(9);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Jersey Number\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(10);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Appearance\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(11);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Health Status\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "            int num \u003d allPlayers.size();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "warheade"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d num; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": "                ReadOnlyPlayer playerNow \u003d allPlayers.get(i - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": "                row \u003d playerSheet.createRow(i);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(i);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(playerNow.getName().toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(playerNow.getTeamName().toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(3);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(playerNow.getPositionPlayed().toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(4);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(playerNow.getAge().toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(5);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(playerNow.getSalary().toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(6);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(playerNow.getGoalsScored().toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(7);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(playerNow.getGoalsAssisted().toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(8);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(playerNow.getNationality().toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(9);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(playerNow.getJerseyNumber().toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(10);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(playerNow.getAppearance().toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(11);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(playerNow.getHealthStatus().toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": "            for (int j \u003d 0; j \u003c\u003d 11; j++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "                playerSheet.autoSizeColumn(j);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": "                workBook.write(new FileOutputStream(outputFilepath));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "warheade"
        },
        "content": "                workBook.close();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "warheade"
        },
        "content": "            } catch (FileNotFoundException ffe) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "warheade"
        },
        "content": "                System.out.println(\"File specified by the outputFilePath does not exist\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": "                throw new FileNotFoundException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": "                System.out.println(\"Error writing data to \" + outputFilepath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"Please check your parameters. npe happening\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (FileNotFoundException ffe) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"File not found...\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"Error exporting to file\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * get the current export path of the excel file"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return the current export path of the excel file"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Path getExportPath() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return exportPath;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 147
    }
  },
  {
    "path": "src/seedu/addressbook/export/TeamApachePoiWriter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFCell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFRow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFSheet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import org.apache.poi.hssf.usermodel.HSSFWorkbook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": " * This class helps to extract data from Team profiles in league tracker"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": " * and correctly export to an excel sheet"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class TeamApachePoiWriter {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final String outputFilepath \u003d \"exported_team_record.xls\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final Path exportPath \u003d Paths.get(outputFilepath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private final List\u003cReadOnlyTeam\u003e allTeams;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public TeamApachePoiWriter(List\u003cReadOnlyTeam\u003e allTeams) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "        requireNonNull(allTeams);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "        allTeams.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!(Files.exists(exportPath) \u0026\u0026 Files.isRegularFile(exportPath))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "                Files.createFile(exportPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "                System.out.println(\"Error creating output file at: \" + exportPath.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"Initializing exportTeam output file: \" + exportPath.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "        this.allTeams \u003d allTeams;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * writes team profiles to the destination excel sheet"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void write() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFWorkbook workBook \u003d new HSSFWorkbook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFSheet teamSheet \u003d workBook.createSheet(\"teamSheet\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFRow row \u003d teamSheet.createRow(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HSSFCell cell \u003d row.createCell(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Index Number\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Team Name\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Country\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Sponsor\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell \u003d row.createCell(4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cell.setCellValue(\"Number of Players\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": "            int num \u003d allTeams.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d num; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "                ReadOnlyTeam teamNow \u003d allTeams.get(i - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "                row \u003d teamSheet.createRow(i);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(i);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(teamNow.getTeamName().toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(teamNow.getCountry().toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(3);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(teamNow.getSponsor().toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell \u003d row.createCell(4);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": "                cell.setCellValue(teamNow.getPlayers().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": "            for (int j \u003d 0; j \u003c\u003d 11; j++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "                teamSheet.autoSizeColumn(j);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "                workBook.write(new FileOutputStream(outputFilepath));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": "                workBook.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "            } catch (FileNotFoundException ffe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "                System.out.println(\"File specified by the outputFilePath does not exist\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": "                throw new FileNotFoundException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": "                System.out.println(\"Error writing data to \" + outputFilepath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"Please check your parameters. npe happening\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (FileNotFoundException ffe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"File not found...\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "            System.out.println(\"Error exporting to file\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Get the Current Export path"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return the current export path of the excel xls file"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Path getExportPath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return exportPath;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 120
    }
  },
  {
    "path": "src/seedu/addressbook/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": " * Represents the main Logic of the League Tracker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * The list of player shown to the user most recently."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private List\u003c? extends ReadOnlyPlayer\u003e lastPlayerShownList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list of match shown to the user most recently."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003c? extends ReadOnlyMatch\u003e lastMatchList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * The list of team shown to the user most recently."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003c? extends ReadOnlyTeam\u003e lastTeamShownList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * The list of team shown to the user most recently."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private List\u003c? extends ReadOnlyFinance\u003e lastFinanceShownList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Logic() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(initializeStorage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBook(storage.load());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    Logic(StorageFile storageFile, AddressBook addressBook) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(storageFile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBook(addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setStorage(StorageFile storage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(AddressBook addressBook) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the StorageFile object based on the user specified path (if any) or the default storage path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageFile.InvalidStorageFilePathException if the target file path is incorrect."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile initializeStorage() throws StorageFile.InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStorageFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getPath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Unmodifiable view of the current last player list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public List\u003cReadOnlyPlayer\u003e getLastPlayerShownList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return Collections.unmodifiableList(lastPlayerShownList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Unmodifiable view of the current last match list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public List\u003cReadOnlyMatch\u003e getLastMatchList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Collections.unmodifiableList(lastMatchList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    protected void setLastMatchList(List\u003c? extends ReadOnlyMatch\u003e newList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        lastMatchList \u003d newList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "    protected void setLastPlayerShownList(List\u003c? extends ReadOnlyPlayer\u003e newList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": "        lastPlayerShownList \u003d newList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Unmodifiable view of the current last shown list(team)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public List\u003cReadOnlyTeam\u003e getLastTeamShownList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return Collections.unmodifiableList(lastTeamShownList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    protected void setLastTeamShownList(List\u003c? extends ReadOnlyTeam\u003e newList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        lastTeamShownList \u003d newList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Unmodifiable view of the current last shown list(finance)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public List\u003cReadOnlyFinance\u003e getLastFinanceShownList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return Collections.unmodifiableList(lastFinanceShownList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    protected void setLastFinanceShownList(List\u003c? extends ReadOnlyFinance\u003e newList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        lastFinanceShownList \u003d newList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the user command, executes it, and returns the result."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String userCommandText) throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d new Parser().parseCommand(userCommandText);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d execute(command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        recordResult(result);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, updates storage, and returns the result."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command user command"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return result of the command"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult execute(Command command) throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        command.setData(addressBook,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "warheade"
        },
        "content": "                lastPlayerShownList,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                lastTeamShownList,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                lastMatchList,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                lastFinanceShownList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(addressBook);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Updates the {@link #lastPlayerShownList} if the result contains a list of Persons."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Updates the {@link #lastMatchList} if the result contains a list of Matches."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void recordResult(CommandResult result) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPlayer\u003e\u003e playerList \u003d result.getRelevantPlayers();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyTeam\u003e\u003e teamList \u003d result.getRelevantTeams();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMatch\u003e\u003e matchList \u003d result.getRelevantMatches();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyFinance\u003e\u003e financeList \u003d result.getRelevantFinances();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (playerList.isPresent()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "warheade"
        },
        "content": "            lastPlayerShownList \u003d playerList.get();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } else if (teamList.isPresent()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            lastTeamShownList \u003d teamList.get();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } else if (matchList.isPresent()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            lastMatchList \u003d matchList.get();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } else if (financeList.isPresent()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            lastFinanceShownList \u003d financeList.get();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 21,
      "warheade": 16,
      "yingrong1996": 26,
      "-": 88,
      "E0176106": 16
    }
  },
  {
    "path": "src/seedu/addressbook/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import static seedu.addressbook.data.match.MatchDate.MESSAGE_INVALID_DATE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.finance.ExportFinanceCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.GetFinanceCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.GetLeagueFinanceCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.finance.ListFinanceCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.RankFinanceCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.ViewFinanceCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.match.AddMatchCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.match.ClearMatchCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.match.DeleteMatchCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.match.ExportMatchCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.match.FindMatchCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.match.ListMatchCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.commands.match.UpdateMatchCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.AddFastCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.ClearCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.DeleteCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.EditPlayerCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.ExportPlayerCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.FindCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.ListCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.SortCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.TransferPlayerCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.ViewAllCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.team.AddTeam;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.team.ClearTeam;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.team.DeleteTeam;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.team.EditTeam;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.team.ExportTeam;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.team.FindTeam;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.team.ListTeam;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.ViewTeam;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.MatchDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final Pattern INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e.+)\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern KEYWORDS_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003ckeywords\u003e\\\\S+(?:\\\\s+\\\\S+)*)\"); // one or more keywords separated by whitespace"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final Pattern PLAYER_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"p/(?\u003cposition\u003e[^/]+)\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"a/(?\u003cage\u003e[^/]+)\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"sal/(?\u003csalary\u003e[^/]+)\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"gs/(?\u003cgoalsScored\u003e[^/]+)\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"ga/(?\u003cgoalsAssisted\u003e[^/]+)\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"tm/(?\u003cteamName\u003e[^/]+)\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"ctry/(?\u003cnationality\u003e[^/]+)\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"jn/(?\u003cjerseyNumber\u003e[^/]+)\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"app/(?\u003cappearance\u003e[^/]+)\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"hs/(?\u003chealthStatus\u003e[^/]+)\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final Pattern PLAYERFAST_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"p/(?\u003cposition\u003e[^/]+)\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"a/(?\u003cage\u003e[^/]+)\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"sal/(?\u003csalary\u003e[^/]+)\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"tm/(?\u003cteamName\u003e[^/]+)\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"ctry/(?\u003cnationality\u003e[^/]+)\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"jn/(?\u003cjerseyNumber\u003e[^/]+)\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final Pattern TRANSFER_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": "            Pattern.compile(\"(?\u003cplayerName\u003e[^/]+)\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"tm/(?\u003cdestinationTeamName\u003e[^/]+)\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"jn/(?\u003cnewJerseyNumber\u003e[^/]+)\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final Pattern EDITPLAYER_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "            Pattern.compile(\"(?\u003ctargetIndex\u003e\\\\d+)\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"(( n/(?\u003cname\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"(( p/(?\u003cposition\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"(( a/(?\u003cage\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"(( sal/(?\u003csalary\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"(( gs/(?\u003cgoalsScored\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"(( ga/(?\u003cgoalsAssisted\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"(( tm/(?\u003cteamName\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"(( ctry/(?\u003cnationality\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"(( jn/(?\u003cjerseyNumber\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"(( app/(?\u003cappearance\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"(( hs/(?\u003chealthStatus\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final Pattern EDITPLAYER_DATA_EMPTY_FORMAT \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "            Pattern.compile(\"(?\u003ctargetIndex\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final Pattern MATCH_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            Pattern.compile(\"(?\u003cdate\u003e[^/]+)\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    + \"h/(?\u003chome\u003e[^/]+)\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    + \"a/(?\u003caway\u003e[^/]+)\"); // variable number of tags"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public static final Pattern MATCH_UPDATE_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            Pattern.compile(\"(?\u003ctargetIndex\u003e\\\\d+)\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"(( h/(?\u003chomeSales\u003e[^/]+)))\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"(( a/(?\u003cawaySales\u003e[^/]+)))\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    + \"(?\u003cgoalScorers\u003e(?: g/[\\\\w\\\\s]+)*)\" // variable number of goalScorers;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    + \"(?\u003cownGoalScorers\u003e(?: o/[\\\\w\\\\s]+)*)\"); // variable number of ownGoalScorers;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final Pattern TEAM_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"c/(?\u003ccountry\u003e[^/]+)\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"s/(?\u003csponsor\u003e[^/]+)\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final Pattern TEAM_EDIT_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Pattern.compile(\"(?\u003ctargetIndex\u003e\\\\d+)\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"(( n/(?\u003cname\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"(( c/(?\u003ccountry\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"(( s/(?\u003csponsor\u003e[^/]+))?)\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public static final Pattern TEAM_EDIT_DATA_NOARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Pattern.compile(\"(?\u003ctargetIndex\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the user input could not be parsed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class ParseException extends Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        ParseException(String message) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return prepareAddPlayer(arguments);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "warheade"
        },
        "content": "        case AddFastCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return prepareAddFastPlayer(arguments);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case AddTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return addTeam(arguments);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "warheade"
        },
        "content": "        case EditPlayerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return prepareEditPlayer(arguments);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return prepareDeletePlayer(arguments);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "warheade"
        },
        "content": "        case TransferPlayerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return prepareTransferPlayer(arguments);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "warheade"
        },
        "content": "        case ExportPlayerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new ExportPlayerCommand();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "warheade"
        },
        "content": "        case ExportFinanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new ExportFinanceCommand();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "warheade"
        },
        "content": "        case ExportTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new ExportTeam();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "warheade"
        },
        "content": "        case ExportMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new ExportMatchCommand();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case DeleteTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return delTeam(arguments);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case ClearTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new ClearTeam();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return prepareFindPlayer(arguments);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case FindTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return prepareFindTeam(arguments);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        case GetFinanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return prepareFinance(arguments);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        case AddMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return prepareAddMatch(arguments);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        case DeleteMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return prepareDeleteMatch(arguments);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        case ClearMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new ClearMatchCommand();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        case FindMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return prepareFindMatch(arguments);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        case ListMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new ListMatchCommand();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        case UpdateMatchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return prepareUpdateMatch(arguments);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case ListTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new ListTeam();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        case ListFinanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new ListFinanceCommand();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        case GetLeagueFinanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new GetLeagueFinanceCommand();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        case RankFinanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new RankFinanceCommand();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        case ViewFinanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return prepareViewFinance(arguments);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case EditTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return prepareEditTeam(arguments);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        case ViewAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return prepareViewAll(arguments);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        case ViewTeam.COMMAND_WORD:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return prepareViewTeam(arguments);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD: // Fallthrough"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the add team command."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Command addTeam(String args) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Matcher matcher \u003d TEAM_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new AddTeam("
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"country\"),"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"sponsor\"),"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            );"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the add player command."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private Command prepareAddPlayer(String args) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Matcher matcher \u003d PLAYER_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand("
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"position\"),"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"age\"),"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"salary\"),"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"goalsScored\"),"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"goalsAssisted\"),"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"teamName\"),"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"nationality\"),"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"jerseyNumber\"),"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"appearance\"),"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"healthStatus\"),"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "warheade"
        },
        "content": "            );"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Parses arguments in the context of the TransferPlayer Command."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return the prepare command"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private Command prepareTransferPlayer(String args) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Matcher matcher \u003d TRANSFER_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    TransferPlayerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new TransferPlayerCommand("
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"playerName\"),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"destinationTeamName\"),"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"newJerseyNumber\")"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "warheade"
        },
        "content": "            );"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Parses arguments in the context of the addFast player command."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private Command prepareAddFastPlayer(String args) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Matcher matcher \u003d PLAYERFAST_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "warheade"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFastCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new AddFastCommand("
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"position\"),"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"age\"),"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"salary\"),"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"teamName\"),"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"nationality\"),"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"jerseyNumber\"),"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * parse input,check for invalid input and create the correct EditPlayerCommand to execute"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param args is the user input"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @return the correct EditPlayerCommand object to be executed"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private Command prepareEditPlayer(String args) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Matcher checkForArgs \u003d EDITPLAYER_DATA_EMPTY_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (checkForArgs.matches()) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new IncorrectCommand(String.format("
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    EditPlayerCommand.MESSAGE_NOATTRIBUTE_WARNING,"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    EditPlayerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //check for invalid inputs"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Matcher matcher \u003d EDITPLAYER_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new IncorrectCommand(String.format("
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    EditPlayerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "warheade"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "warheade"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new EditPlayerCommand("
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    targetIndex,"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"position\"),"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"age\"),"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"salary\"),"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"goalsScored\"),"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"goalsAssisted\"),"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"teamName\"),"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"nationality\"),"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"jerseyNumber\"),"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"appearance\"),"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    matcher.group(\"healthStatus\"),"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "warheade"
        },
        "content": "        } catch (ParseException | NumberFormatException nfe) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new IncorrectCommand(String.format("
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    EditPlayerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Parses arguments in the context of the add match command."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareAddMatch(String args) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Matcher matcher \u003d MATCH_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new AddMatchCommand("
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    matcher.group(\"date\"),"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    matcher.group(\"home\"),"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    matcher.group(\"away\")"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            );"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (java.text.ParseException pe) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_DATE_FORMAT + \"\\nExample : \" + MatchDate.EXAMPLE);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Extracts the new player\u0027s tags from the add command\u0027s tag arguments string."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Extracts the new team\u0027s tags from the addTeam command\u0027s tag arguments string."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "     * Merges duplicate tag strings."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Set\u003cString\u003e getTagsFromArgs(String tagArguments) throws IllegalValueException {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagArguments.isEmpty()) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.emptySet();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        // replace first delimiter prefix, then split"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        final Collection\u003cString\u003e tagStrings \u003d Arrays.asList(tagArguments.replaceFirst(\" t/\", \"\").split(\" t/\"));"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tagStrings);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Extracts the goalScorers from the update match command\u0027s goal scorer arguments string."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private static List\u003cString\u003e getGoalScorersFromArgs(String goalScorersArguments) throws IllegalValueException {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // no goalScorers"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (goalScorersArguments.isEmpty()) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // replace first delimiter prefix, then split"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Collection\u003cString\u003e goalScorersStrings \u003d Arrays.asList(goalScorersArguments.replaceFirst(\" g/\", \"\")"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                                                                    .split(\" g/\"));"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new ArrayList\u003c\u003e(goalScorersStrings);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Extracts the ownGoalScorers from the update match command\u0027s own goal scorer arguments string."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private static List\u003cString\u003e getOwnGoalScorersFromArgs(String ownGoalScorersArguments) throws IllegalValueException {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // no ownGoalScorers"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (ownGoalScorersArguments.isEmpty()) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // replace first delimiter prefix, then split"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Collection\u003cString\u003e ownGoalScorersStrings \u003d Arrays.asList(ownGoalScorersArguments.replaceFirst(\" o/\", \"\")"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                .split(\" o/\"));"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new ArrayList\u003c\u003e(ownGoalScorersStrings);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the delete player command."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private Command prepareDeletePlayer(String args) {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Parses arguments in the context of the delete match command."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareDeleteMatch(String args) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new DeleteMatchCommand(targetIndex);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    DeleteMatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the delete team command."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Command delTeam(String args) {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new DeleteTeam(targetIndex);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Parses arguments in the context of the finance command."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private Command prepareFinance(String args) {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new GetFinanceCommand(targetIndex);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GetFinanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Parses arguments in the context of the view finance command."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private Command prepareViewFinance(String args) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new ViewFinanceCommand(targetIndex);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                    ViewFinanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the Edit command."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Command prepareEditTeam(String args) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Matcher checkForArgs \u003d TEAM_EDIT_DATA_NOARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (checkForArgs.matches()) {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format("
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    EditTeam.MESSAGE_NOARGS,"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    EditTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Matcher matcher \u003d TEAM_EDIT_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format("
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    EditTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new EditTeam("
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    targetIndex,"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"country\"),"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    matcher.group(\"sponsor\"),"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            );"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format("
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    EditTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Parses arguments in the context of the UpdateMatch command."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareUpdateMatch(String args) {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Matcher matcher \u003d MATCH_UPDATE_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                                            UpdateMatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new UpdateMatchCommand("
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    targetIndex,"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    matcher.group(\"homeSales\"),"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    matcher.group(\"awaySales\"),"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    getGoalScorersFromArgs(matcher.group(\"goalScorers\")),"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    getOwnGoalScorersFromArgs(matcher.group(\"ownGoalScorers\"))"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            );"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new IncorrectCommand(String.format("
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    UpdateMatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the view all command."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareViewAll(String args) {"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewAllCommand(targetIndex);"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the view team command."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Command prepareViewTeam(String args) {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new ViewTeam(targetIndex);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    ViewTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args arguments string to parse as index number"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed index number"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException        if no region of the args string could be found for the index"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NumberFormatException the args string region is not a valid number"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "    private int parseArgsAsDisplayedIndex(String args) throws ParseException, NumberFormatException {"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Matcher matcher \u003d INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(\"Could not find index number to parse\");"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the find player command."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private Command prepareFindPlayer(String args) {"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(keywordSet);"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Parses arguments in the context of the find match command."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private Command prepareFindMatch(String args) {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                    FindMatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new FindMatchCommand(keywordSet);"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Parses arguments in the context of the find team command."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private Command prepareFindTeam(String args) {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    FindTeam.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new FindTeam(keywordSet);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 39,
      "warheade": 212,
      "yingrong1996": 143,
      "-": 213,
      "E0176106": 135
    }
  },
  {
    "path": "src/seedu/addressbook/storage/StorageFile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.storage.jaxb.AdaptedAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the file used to store address book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageFile {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Default file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"league_tracker.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Note: Note the use of nested classes below."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * More info https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the given file path does not fulfill the storage filepath constraints."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class InvalidStorageFilePathException extends IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        public InvalidStorageFilePathException(String message) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that some error has occured while trying to convert and read/write data between the application"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the storage file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class StorageOperationException extends Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final JAXBContext jaxbContext;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the default path is invalid"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageFile() throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the given file path is invalid"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageFile(String filePath) throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            jaxbContext \u003d JAXBContext.newInstance(AdaptedAddressBook.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(\"jaxb initialisation error\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Storage file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given path is acceptable as a storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The file path is considered acceptable if it ends with \u0027.txt\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves all data to this storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save(AddressBook addressBook) throws StorageOperationException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: Note the \u0027try with resource\u0027 statement below."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * More info: https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try (final Writer fileWriter \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                     new BufferedWriter(new FileWriter(path.toFile()))) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            final AdaptedAddressBook toSave \u003d new AdaptedAddressBook(addressBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            final Marshaller marshaller \u003d jaxbContext.createMarshaller();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            marshaller.marshal(toSave, fileWriter);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path + \" error: \" + ioe.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error converting address book into storage format\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads data from this storage file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AddressBook load() throws StorageOperationException, ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try (final Reader fileReader \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                     new BufferedReader(new FileReader(path.toFile()))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            final Unmarshaller unmarshaller \u003d jaxbContext.createUnmarshaller();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            final AdaptedAddressBook loaded \u003d (AdaptedAddressBook) unmarshaller.unmarshal(fileReader);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            // manual check for missing elements"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            if (loaded.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new StorageOperationException(\"File data missing some elements\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return loaded.toModelType();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: Here, we are using an exception to create the file if it is missing. However, we should minimize"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * using exceptions to facilitate normal paths of execution. If we consider the missing file as a \u0027normal\u0027"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * situation (i.e. not truly exceptional) we should not use an exception to handle it."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // create empty file if not found"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            final AddressBook empty \u003d new AddressBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            save(empty);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return empty;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // other errors"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error parsing file data format\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"File contains illegal data values; data type constraints not met\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 16,
      "yingrong1996": 2,
      "-": 139,
      "E0176106": 2
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.Finance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.UniqueFinanceList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.UniqueMatchList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Player;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.UniquePlayerList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.UniqueTeamList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted address book data holder class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"AddressBook\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdaptedAddressBook {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private List\u003cAdaptedPlayer\u003e players \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003cAdaptedTeam\u003e teams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cAdaptedMatch\u003e matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private List\u003cAdaptedFinance\u003e finances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedAddressBook() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given AddressBook into this class for JAXB use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedAddressBook"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedAddressBook(AddressBook source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "        players \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        finances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "        source.getAllPlayers().forEach(player -\u003e players.add(new AdaptedPlayer(player)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        source.getAllMatches().forEach(match -\u003e matches.add(new AdaptedMatch(match)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        source.getAllTeams().forEach(team -\u003e teams.add(new AdaptedTeam(team)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        source.getAllFinances().forEach(finance -\u003e finances.add(new AdaptedFinance(finance)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return players.stream().anyMatch(AdaptedPlayer::isAnyRequiredFieldMissing)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                || matches.stream().anyMatch(AdaptedMatch::isAnyRequiredFieldMissing)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                || teams.stream().anyMatch(AdaptedTeam::isAnyRequiredFieldMissing)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                || finances.stream().anyMatch(AdaptedFinance::isAnyRequiredFieldMissing);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly {@code AdaptedAddressBook} object into the corresponding(@code AddressBook} object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted player"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted match"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted finance"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final List\u003cPlayer\u003e playerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cTeam\u003e teamList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cMatch\u003e matchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final List\u003cFinance\u003e financeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (AdaptedPlayer player : players) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "            playerList.add(player.toModelType());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (AdaptedTeam team : teams) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            teamList.add(team.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedMatch match : matches) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            matchList.add(match.toModelType());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (AdaptedFinance finance : finances) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            financeList.add(finance.toModelType());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return new AddressBook("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "                new UniquePlayerList(playerList),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                new UniqueTeamList(teamList),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                new UniqueMatchList(matchList),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                new UniqueFinanceList(financeList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 20,
      "warheade": 13,
      "yingrong1996": 15,
      "-": 50,
      "E0176106": 16
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedFinance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huyidi"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.Finance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huyidi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huyidi"
        },
        "content": " * JAXB-friendly adapted team data holder class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huyidi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huyidi"
        },
        "content": "public class AdaptedFinance {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private String teamName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double sponsorMoney;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double ticketIncome;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double quarterOne;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double quarterTwo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double quarterThree;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private double quarterFour;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public AdaptedFinance() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Converts a given finance into this class for JAXB use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public AdaptedFinance(ReadOnlyFinance source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        teamName \u003d source.getTeamName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        sponsorMoney \u003d source.getSponsor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        ticketIncome \u003d source.getTicketIncome();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        quarterOne \u003d source.getQuarterOne();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        quarterTwo \u003d source.getQuarterTwo();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        quarterThree \u003d source.getQuarterThree();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        quarterFour \u003d source.getQuarterFour();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return Utils.isAnyNull(teamName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Converts this jaxb-friendly adapted finance object into the finance object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public Finance toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String teamName \u003d this.teamName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final double sponsorMoney \u003d this.sponsorMoney;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final double ticketIncome \u003d this.ticketIncome;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final double quarterOne \u003d this.quarterOne;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final double quarterTwo \u003d this.quarterTwo;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final double quarterThree \u003d this.quarterThree;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final double quarterFour \u003d this.quarterFour;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return new Finance(teamName, sponsorMoney, ticketIncome, quarterOne, quarterTwo, quarterThree, quarterFour);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huyidi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 75
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedMatch.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.MatchDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.Score;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.match.TicketSales;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.team.TeamName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * JAXB-friendly adapted match data holder class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class AdaptedMatch {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String home;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String away;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String homeSales;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String awaySales;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String score;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cAdaptedName\u003e goalScored \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cAdaptedName\u003e ownGoalScored \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AdaptedMatch() {}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts a given match into this class for JAXB use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedMatch"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AdaptedMatch(ReadOnlyMatch source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        date \u003d df.format(source.getDate().calendar.getTime());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        home \u003d source.getHome().fullName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        away \u003d source.getAway().fullName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        homeSales \u003d source.getHomeSales().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        awaySales \u003d source.getAwaySales().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        score \u003d source.getScore().fullScore;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        goalScored \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (Name player : source.getGoalScorers()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            goalScored.add(new AdaptedName(player));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        ownGoalScored \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (Name player : source.getOwnGoalScorers()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            ownGoalScored.add(new AdaptedName(player));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedName player : goalScored) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "            if (player.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedName player : ownGoalScored) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "            if (player.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176106"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        // second call only happens if home/away are all not null"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Utils.isAnyNull(date, home, away, homeSales, awaySales, score);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts this jaxb-friendly adapted match object into the match object."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted match"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Match toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cName\u003e goalScorers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedName player : goalScored) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "            goalScorers.add(player.toModelType());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cName\u003e ownGoalScorers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedName player : ownGoalScored) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "            ownGoalScorers.add(player.toModelType());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final MatchDate date \u003d new MatchDate(this.date);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final TeamName home \u003d new TeamName(this.home);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final TeamName away \u003d new TeamName(this.away);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final TicketSales homeSales \u003d new TicketSales(this.homeSales);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final TicketSales awaySales \u003d new TicketSales(this.awaySales);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Score score \u003d new Score(this.score);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new Match(date, home, away, homeSales, awaySales, goalScorers, ownGoalScorers, score);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 12,
      "yingrong1996": 2,
      "E0176106": 111
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176106"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176106"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176106"
        },
        "content": " * JAXB-friendly adapted name data holder class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176106"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176106"
        },
        "content": "public class AdaptedName {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String playerName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AdaptedName() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Converts a given Name into this class for JAXB use."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedName"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public AdaptedName(Name source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        playerName \u003d source.fullName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Utils.isAnyNull(playerName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Converts this jaxb-friendly adapted name object into the Name object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted match"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Name toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new Name(playerName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176106"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176106": 51
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedPlayer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "warheade"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Age;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Appearance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.GoalsAssisted;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.GoalsScored;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.HealthStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.JerseyNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Nationality;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Player;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.PositionPlayed;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Salary;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.TeamName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": " * JAXB-friendly adapted player data holder class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "warheade"
        },
        "content": "public class AdaptedPlayer {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * JAXB-friendly place holder for information."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "warheade"
        },
        "content": "    //    private static class AdaptedPlayerDetail {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "warheade"
        },
        "content": "    //        @XmlValue"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "warheade"
        },
        "content": "    //        private String value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "    //        @XmlAttribute(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "    //        private boolean isPrivate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private String position;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private String age;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private String salary;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private String goalsScored;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private String goalsAssisted;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private String teamName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private String nationality;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private String jerseyNumber;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private String appearance;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private String healthStatus;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private List\u003cAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public AdaptedPlayer() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedPlayer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public AdaptedPlayer(ReadOnlyPlayer source) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "warheade"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "warheade"
        },
        "content": "        position \u003d source.getPositionPlayed().fullPosition;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": "        age \u003d source.getAge().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "warheade"
        },
        "content": "        salary \u003d source.getSalary().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": "        goalsScored \u003d source.getGoalsScored().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "warheade"
        },
        "content": "        goalsAssisted \u003d source.getGoalsAssisted().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "warheade"
        },
        "content": "        teamName \u003d source.getTeamName().fullTeam;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": "        nationality \u003d source.getNationality().fullCountry;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "        jerseyNumber \u003d source.getJerseyNumber().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "        appearance \u003d source.getAppearance().value;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": "        healthStatus \u003d source.getHealthStatus().fullHs;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "            tagged.add(new AdaptedTag(tag));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "            if (tag.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": "        // second call only happens if phone/email/address are all not null"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return Utils.isAnyNull(name, position, age, salary, goalsScored,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "warheade"
        },
        "content": "                goalsAssisted, teamName, nationality, jerseyNumber, appearance, healthStatus);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Converts this jaxb-friendly adapted player object into the Player object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted player"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public Player toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "warheade"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final PositionPlayed positionPlayed \u003d new PositionPlayed(this.position);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Age age \u003d new Age(this.age);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Salary salary \u003d new Salary(this.salary);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final GoalsScored goalsScored \u003d new GoalsScored(this.goalsScored);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final GoalsAssisted goalsAssisted \u003d new GoalsAssisted(this.goalsAssisted);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final TeamName teamName \u003d new TeamName(this.teamName);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Nationality nationality \u003d new Nationality(this.nationality);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final JerseyNumber jerseyNumber \u003d new JerseyNumber(this.jerseyNumber);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Appearance appearance \u003d new Appearance(this.appearance);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final HealthStatus healthStatus \u003d new HealthStatus(this.healthStatus);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "warheade"
        },
        "content": "        return new Player(name, positionPlayed, age, salary, goalsScored, goalsAssisted,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "warheade"
        },
        "content": "                teamName, nationality, jerseyNumber, appearance, healthStatus, tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "warheade"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 144
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted tag data holder class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedTag"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Utils.isAnyNull(tagName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the Tag object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted player"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 4,
      "-": 47
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedTeam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.Match;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Player;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.team.Country;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.team.Sponsor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.team.TeamName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " * JAXB-friendly adapted team data holder class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "public class AdaptedTeam {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private String country;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private String sponsor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String win;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String lose;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String draw;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private String points;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private List\u003cAdaptedMatch\u003e matchlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private List\u003cAdaptedPlayer\u003e playerlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private List\u003cAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AdaptedTeam() {}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts a given team into this class for JAXB use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public AdaptedTeam(ReadOnlyTeam source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        name \u003d source.getTeamName().fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        country \u003d source.getCountry().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        sponsor \u003d source.getSponsor().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        win \u003d Integer.toString(source.getWins());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        lose \u003d Integer.toString(source.getLoses());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        draw \u003d Integer.toString(source.getDraws());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        points \u003d Integer.toString(source.getPoints());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        matchlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (Match match : source.getMatches()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            matchlist.add(new AdaptedMatch((match)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        playerlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (Player player : source.getPlayers()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "warheade"
        },
        "content": "            playerlist.add(new AdaptedPlayer(player));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            tagged.add(new AdaptedTag(tag));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (tag.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return Utils.isAnyNull(name, country);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts this jaxb-friendly adapted team object into the team object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public Team toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Set\u003cPlayer\u003e players \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Set\u003cMatch\u003e matches \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (AdaptedMatch match : matchlist) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            matches.add(match.toModelType());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (AdaptedPlayer player : playerlist) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "            players.add(player.toModelType());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final TeamName teamName \u003d new TeamName(this.name);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Country country \u003d new Country(this.country);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Sponsor sponsor \u003d new Sponsor(this.sponsor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final int win \u003d Integer.valueOf(this.win);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final int lose \u003d Integer.valueOf(this.lose);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final int draw \u003d Integer.valueOf(this.draw);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final int points \u003d Integer.valueOf(this.points);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return new Team(teamName, country, sponsor, win, lose, draw, points, matches, players, tags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 16,
      "yingrong1996": 72,
      "E0176106": 34
    }
  },
  {
    "path": "src/seedu/addressbook/ui/Formatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176106"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Used for formatting text for display. e.g. for adding text decorations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A decorative prefix added to the beginning of lines printed by AddressBook */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LINE_PREFIX \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Format of indexed list item */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INDEXED_LIST_ITEM \u003d \"\\t%1$d. %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given strings for displaying to the user. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String format(String... messages) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String m : messages) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(LINE_PREFIX + m.replace(\"\\n\", LS + LINE_PREFIX) + LS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /** Formats the given list of players for displaying to the user. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public String formatPersonResult(List\u003c? extends ReadOnlyPlayer\u003e players) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cString\u003e formattedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (ReadOnlyPlayer player : players) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "            formattedPersons.add(player.getAsTextShowAll());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return format(asIndexedList(formattedPersons));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /** Formats the given list of teams for displaying to the user. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public String formatTeamResult(List\u003c? extends ReadOnlyTeam\u003e teams) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final List\u003cString\u003e formattedTeams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (ReadOnlyTeam team : teams) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            formattedTeams.add(team.getAsTextShowSome());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return format(asIndexedList(formattedTeams));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /** Formats the given list of matches for displaying to the user. */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    public String formatMatchResult(List\u003c? extends ReadOnlyMatch\u003e matches) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final List\u003cString\u003e formattedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        for (ReadOnlyMatch match : matches) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            formattedMatches.add(match.getAsTextShowSome());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        return format(asIndexedList(formattedMatches));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /** Formats the given list of finances for displaying to the user. */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public String formatFinanceResult(List\u003c? extends ReadOnlyFinance\u003e finances) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final List\u003cString\u003e formattedFinances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        for (ReadOnlyFinance finance : finances) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            formattedFinances.add(finance.getAsTextShowSome());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        return format(asIndexedList(formattedFinances));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats a list of strings as an indexed list. */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String asIndexedList(List\u003cString\u003e listItems) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder formatted \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        int displayIndex \u003d DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String listItem : listItems) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            formatted.append(getIndexedListItem(displayIndex, listItem)).append(\"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return formatted.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats a string as an indexed list item."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param visibleIndex index for this listing"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getIndexedListItem(int visibleIndex, String listItem) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_INDEXED_LIST_ITEM, visibleIndex, listItem);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 10,
      "warheade": 5,
      "yingrong1996": 9,
      "-": 60,
      "E0176106": 11
    }
  },
  {
    "path": "src/seedu/addressbook/ui/Gui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.Main;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The GUI of the App"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Gui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int INITIAL_WINDOW_WIDTH \u003d 800;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int INITIAL_WINDOW_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private String version;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Gui(Logic logic, String version) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.version \u003d version;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Create the main window and display the welcome message on it"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage, Stoppable mainApp) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow \u003d createMainWindow(stage, mainApp);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.displayWelcomeMessage(version, logic.getStorageFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Create the main window of the league tracker using javaFX"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow createMainWindow(Stage stage, Stoppable mainApp) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: When calling getResource(), use \u0027/\u0027, instead of File.separator or \u0027\\\\\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More info: http://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html#res_name_context"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        loader.setLocation(Main.class.getResource(\"ui/mainwindow.fxml\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setTitle(version);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(new Scene(loader.load(), INITIAL_WINDOW_WIDTH, INITIAL_WINDOW_HEIGHT));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        setUpIcon(stage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        MainWindow mainWindow \u003d loader.getController();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.setLogic(logic);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.setMainApp(mainApp);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindow;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /** Create the application icon **/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private void setUpIcon(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final InputStream input \u003d getClass().getResourceAsStream(\"image/Icon.png\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Image image \u003d new Image(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        stage.getIcons().add(image);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 19,
      "-": 51
    }
  },
  {
    "path": "src/seedu/addressbook/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_USING_STORAGE_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_WELCOME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.match.ReadOnlyMatch;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Main Window of the GUI."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stoppable mainApp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private TextArea outputConsole;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private TextField commandInput;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogic(Logic logic) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setMainApp(Stoppable mainApp) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mainApp \u003d mainApp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Handle thw text interface command line"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Exits the program if exit is given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void onCommand(ActionEvent event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            String userCommandText \u003d commandInput.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(userCommandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isExitCommand(result)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                exitApp();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            displayResult(result);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            clearCommandInput();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            display(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void exitApp() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        mainApp.stop();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns true of the result given is the result of an exit command */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isExitCommand(CommandResult result) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return result.feedbackToUser.equals(ExitCommand.MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears the command input box */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void clearCommandInput() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        commandInput.setText(\"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /** Clears the output displayPlayerResult area */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearOutputConsole() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.clear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Displays the result of a command execution to the user. */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayResult(CommandResult result) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        clearOutputConsole();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPlayer\u003e\u003e resultPlayers \u003d result.getRelevantPlayers();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyTeam\u003e\u003e resultTeams \u003d result.getRelevantTeams();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyMatch\u003e\u003e resultMatches \u003d result.getRelevantMatches();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyFinance\u003e\u003e resultFinances \u003d result.getRelevantFinances();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (resultPlayers.isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "            displayPlayerResult(resultPlayers.get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (resultTeams.isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            displayTeamResult(resultTeams.get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        if (resultMatches.isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176106"
        },
        "content": "            displayMatch(resultMatches.get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        if (resultFinances.isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            displayFinanceResult(resultFinances.get());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        display(result.feedbackToUser);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Displays welcome message with current version , file name generated and file path."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayWelcomeMessage(String version, String storageFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String storageFileInfo \u003d String.format(MESSAGE_USING_STORAGE_FILE, storageFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        display(MESSAGE_WELCOME, version, MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE, storageFileInfo);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     * Displays the list of matches in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176106"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    private void displayMatch(List\u003c? extends ReadOnlyMatch\u003e matches) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        display(new Formatter().formatMatchResult(matches));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Displays the list of players in the output displayPlayerResult area, formatted as an indexed list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private void displayPlayerResult(List\u003c? extends ReadOnlyPlayer\u003e players) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": "        display(new Formatter().formatPersonResult(players));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176106"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0176106"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Displays the list of teams in the output displayPlayerResult area, formatted as an indexed list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private void displayTeamResult(List\u003c? extends ReadOnlyTeam\u003e teams) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0176106"
        },
        "content": "        display(new Formatter().formatTeamResult(teams));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Displays the list of finances in the output displayFinanceResult area, formatted as an indexed list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Private details are hidden."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private void displayFinanceResult(List\u003c? extends ReadOnlyFinance\u003e finances) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        display(new Formatter().formatFinanceResult(finances));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Displays the given messages on the output displayPlayerResult area, after formatting appropriately."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void display(String... messages) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.setText(outputConsole.getText() + new Formatter().format(messages));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 11,
      "warheade": 17,
      "yingrong1996": 22,
      "-": 94,
      "E0176106": 11
    }
  },
  {
    "path": "test/data/StorageFileTest/InvalidData.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAddressBook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "    \u003cplayers\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cinvalid\u003edata\u003c/invalid\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "    \u003c/players\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AddressBook\u003e"
      }
    ],
    "authorContributionMap": {
      "warheade": 2,
      "-": 4
    }
  },
  {
    "path": "test/data/StorageFileTest/ValidData.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAddressBook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "    \u003cplayers\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cname\u003eLionel Messi\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cposition\u003eRW\u003c/position\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cage\u003e30\u003c/age\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003csalary\u003e200\u003c/salary\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cgoalsScored\u003e30\u003c/goalsScored\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cgoalsAssisted\u003e20\u003c/goalsAssisted\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cteamName\u003eFC Barcelona\u003c/teamName\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cnationality\u003eArgentina\u003c/nationality\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cjerseyNumber\u003e10\u003c/jerseyNumber\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cappearance\u003e54\u003c/appearance\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003chealthStatus\u003eHealthy\u003c/healthStatus\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "warheade"
        },
        "content": "    \u003c/players\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "    \u003cplayers\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cname\u003eLuis Suarez\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cposition\u003eStriker\u003c/position\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cage\u003e32\u003c/age\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003csalary\u003e200\u003c/salary\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cgoalsScored\u003e30\u003c/goalsScored\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cgoalsAssisted\u003e20\u003c/goalsAssisted\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cteamName\u003eFC Barcelona\u003c/teamName\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cnationality\u003eUruguay\u003c/nationality\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cjerseyNumber\u003e9\u003c/jerseyNumber\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003cappearance\u003e54\u003c/appearance\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "        \u003chealthStatus\u003eHealthy\u003c/healthStatus\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "    \u003c/players\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AddressBook\u003e"
      }
    ],
    "authorContributionMap": {
      "warheade": 26,
      "-": 3
    }
  },
  {
    "path": "test/java/seedu/addressbook/logic/LogicTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "warheade"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.ViewFinanceCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.AddFastCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.ClearCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.DeleteCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.FindCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.ViewAllCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.AddTeam;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.ClearTeam;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.DeleteTeam;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.EditTeam;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.FindTeam;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.ViewTeam;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.Finance;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.data.finance.ReadOnlyFinance;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Age;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Appearance;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.GoalsAssisted;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.GoalsScored;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.HealthStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.JerseyNumber;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Nationality;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Player;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.PositionPlayed;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Salary;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.TeamName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Country;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Sponsor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicTest {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * See https://github.com/junit-team/junit4/wiki/rules#temporaryfolder-rule"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile saveFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFile \u003d new StorageFile(saveFolder.newFile(\"testSaveFile.txt\").getPath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFile.save(addressBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new Logic(saveFile, addressBook);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Constructor is called in the setup() method which executes before every test, no need to call it here again."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the last shown list is empty"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastPlayerShownList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalid() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"       \";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(invalidCommand,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that the result message is correct."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(String, String, AddressBook, boolean, List)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedMessage, AddressBook.empty(), false, Collections.emptyList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal address book data are same as those in the {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the storage file content matches data in {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                       String expectedMessage,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                                       AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                       boolean isRelevantPlayersExpected,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                       List\u003c? extends ReadOnlyPlayer\u003e lastPlayerList) throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertEquals(r.getRelevantPlayers().isPresent(), isRelevantPlayersExpected);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": "        if (isRelevantPlayersExpected) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": "            assertEquals(lastPlayerList, r.getRelevantPlayers().get());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, addressBook);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertEquals(lastPlayerList, logic.getLastPlayerShownList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBook, saveFile.load());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_unknownCommandWord() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "warheade"
        },
        "content": "        String unknownCommand \u003d \"thisisnonsensebutyeahwhocares\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(unknownCommand, HelpCommand.MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"help\", HelpCommand.MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"exit\", ExitCommand.MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_clear() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "warheade"
        },
        "content": "        addressBook.addPlayer(helper.generatePlayer(1));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "warheade"
        },
        "content": "        addressBook.addPlayer(helper.generatePlayer(2));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "warheade"
        },
        "content": "        addressBook.addPlayer(helper.generatePlayer(3));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "warheade"
        },
        "content": "        addressBook.addPlayer(helper.generatePlayer(4));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(\"clearPlayer\", ClearCommand.MESSAGE_SUCCESS, AddressBook.empty(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                false, Collections.emptyList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "warheade"
        },
        "content": "        // anyhow argument"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer wrong args wrong args\", expectedMessage);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //no position prefix"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name Striker a/30 sal/20000 gs/0 \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"ga/0 tm/validTeam.butNoPositionPrefix ctry/China \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 hs/Healthy\", expectedMessage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //no age prefix"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker 30 sal/20000 gs/0 \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"ga/0 tm/validTeam.butNoAgePrefix ctry/China \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 hs/Healthy\", expectedMessage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //no salary prefix"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 20000 gs/0 \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"ga/0 tm/validTeam.butNoSalaryPrefix ctry/China \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 hs/Healthy\", expectedMessage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //no goals scored prefix"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/20000 0 \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"ga/0 tm/validTeam.butNoGoalsScoredPrefix ctry/China \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 hs/Healthy\", expectedMessage);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //no goals assisted prefix"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/20000 gs/0 \""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"0 tm/validTeam.butNoGoalsAssistedPrefix ctry/China \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 hs/Healthy\", expectedMessage);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //no team prefix"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/20000 gs/0 \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"ga/0 validTeam.butNoPrefix ctry/China \""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 hs/Healthy\", expectedMessage);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //no nationality prefix"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/20000 gs/0 \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"ga/0 tm/validTeam.butNoNationalityPrefix China \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 hs/Healthy\", expectedMessage);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //no jersey number prefix"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/20000 gs/0 \""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"ga/0 tm/validTeam.butNoJerseyNumberPrefix ctry/China \""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"9 app/0 hs/Healthy\", expectedMessage);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //no appearance prefix"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/20000 gs/0 \""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"ga/0 tm/validTeam.butNoAppearancePrefix ctry/China \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 0 hs/Healthy\", expectedMessage);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "warheade"
        },
        "content": "        //no health status prefix"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/20000 gs/0 \""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"ga/0 tm/validTeam.butNoHealthStatusPrefix ctry/China \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 Healthy\", expectedMessage);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void execute_addFast_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "warheade"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFastCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addFast ValidName Striker a/30 sal/20000 tm/FC_NUS.butNoPositionPrefix ctry/Singapore jn/10\","
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "warheade"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addFast ValidName p/Striker 30 sal/20000 tm/FC_NUS.butNoAgePrefix ctry/Singapore jn/10\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "warheade"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addFast ValidName p/Striker a/30 20000 tm/FC_NUS.butNoSalaryPrefix ctry/Singapore jn/10\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "warheade"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addFast ValidName p/Striker a/30 sal/20000 FC_NUS.butNoPrefix ctry/Singapore jn/10\","
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "warheade"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addFast ValidName p/Striker a/30 sal/20000 tm/FC_NUS.butNoNationalityPrefix Singapore jn/10\","
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "warheade"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addFast ValidName p/Striker a/30 sal/20000 tm/FC_NUS.butNoJerseyNumberPrefix ctry/Singapore 10\","
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "warheade"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void execute_add_invalidPlayerData() throws Exception {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer []\\\\[;] p/Striker a/30 sal/20000 gs/0 ga/0 tm/validTeam ctry/China\""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 hs/Healthy\", Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/thirty sal/20000 gs/0 ga/0 tm/validTeam ctry/China \""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 hs/Healthy\", Age.MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/zero gs/0 ga/0 tm/validTeam ctry/China \""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 hs/Healthy\", Salary.MESSAGE_SALARY_CONSTRAINTS);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/20000 gs/zero ga/0 tm/validTeam ctry/China \""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 hs/Healthy\", GoalsScored.MESSAGE_GS_CONSTRAINTS);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/20000 gs/0 ga/zero tm/validTeam ctry/China \""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 hs/Healthy\", GoalsAssisted.MESSAGE_GA_CONSTRAINTS);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/20000 gs/0 ga/0 tm/validTeam ctry/China \""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/50 app/0 hs/Healthy\", JerseyNumber.MESSAGE_JN_CONSTRAINTS);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/20000 gs/0 ga/0 tm/validTeam ctry/China \""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/nine app/0 hs/Healthy\", JerseyNumber.MESSAGE_JN_CONSTRAINTS);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/20000 gs/0 ga/0 tm/validTeam ctry/China \""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/zero hs/Healthy\", Appearance.MESSAGE_APPEARANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "warheade"
        },
        "content": "                \"addPlayer Valid Name p/Striker a/30 sal/20000 gs/0 ga/0 tm/validTeam ctry/China \""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        + \"jn/9 app/0 hs/Healthy t/invalid_-[.tag\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_successful() throws Exception {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player toBeAdded \u003d helper.messi();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "warheade"
        },
        "content": "        expectedAb.addPlayer(toBeAdded);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_addDuplicate_notAllowed() throws Exception {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player toBeAdded \u003d helper.messi();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "warheade"
        },
        "content": "        expectedAb.addPlayer(toBeAdded);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "warheade"
        },
        "content": "        addressBook.addPlayer(toBeAdded); // player already in internal address book"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "warheade"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PLAYER,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_list_showsAllPersons() throws Exception {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "warheade"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(2);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003c? extends ReadOnlyPlayer\u003e expectedList \u003d expectedAb.getAllPlayers().immutableListView();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "warheade"
        },
        "content": "        helper.addToAddressBook(addressBook, 2);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(\"listPlayer\","
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "warheade"
        },
        "content": "                Command.getMessageForPlayerListShownSummary(expectedList),"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * targeting a single player in the last shown list, using visible index."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "warheade"
        },
        "content": "     *"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @param commandWord to test assuming it targets a single player in the last shown list based on visible index."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInvalidIndexBehaviorForCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "warheade"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_PLAYER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cPlayer\u003e lastPlayerList \u003d helper.generatePlayerList(2);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "warheade"
        },
        "content": "        logic.setLastPlayerShownList(lastPlayerList);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(commandWord + \" -1\", expectedMessage, AddressBook.empty(), false, lastPlayerList);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(commandWord + \" 0\", expectedMessage, AddressBook.empty(), false, lastPlayerList);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(commandWord + \" 3\", expectedMessage, AddressBook.empty(), false, lastPlayerList);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(\"displayProfile \", expectedMessage);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(\"displayProfile arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"displayProfile\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void execute_tryToViewAllPlayerMissingInAddressBook_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p1 \u003d helper.generatePlayer(1);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p2 \u003d helper.generatePlayer(2);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cPlayer\u003e lastPlayerList \u003d helper.generatePlayerList(p1, p2);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "warheade"
        },
        "content": "        expectedAb.addPlayer(p1);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "warheade"
        },
        "content": "        addressBook.addPlayer(p1);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "warheade"
        },
        "content": "        logic.setLastPlayerShownList(lastPlayerList);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(\"displayProfile 2\","
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "warheade"
        },
        "content": "                Messages.MESSAGE_PLAYER_NOT_IN_LEAGUE,"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "warheade"
        },
        "content": "                lastPlayerList);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(\"deletePlayer \", expectedMessage);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(\"deletePlayer arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"deletePlayer\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_removesCorrectPerson() throws Exception {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p1 \u003d helper.generatePlayer(1);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p2 \u003d helper.generatePlayer(2);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p3 \u003d helper.generatePlayer(3);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cPlayer\u003e threePlayers \u003d helper.generatePlayerList(p1, p2, p3);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "warheade"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(threePlayers);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "warheade"
        },
        "content": "        expectedAb.removePlayer(p2);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "warheade"
        },
        "content": "        helper.addToAddressBook(addressBook, threePlayers);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "warheade"
        },
        "content": "        logic.setLastPlayerShownList(threePlayers);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(\"deletePlayer 2\","
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_DELETE_PLAYER_SUCCESS, p2),"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "warheade"
        },
        "content": "                threePlayers);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_missingInAddressBook() throws Exception {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p1 \u003d helper.generatePlayer(1);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p2 \u003d helper.generatePlayer(2);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p3 \u003d helper.generatePlayer(3);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cPlayer\u003e threePlayers \u003d helper.generatePlayerList(p1, p2, p3);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "warheade"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(threePlayers);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "warheade"
        },
        "content": "        expectedAb.removePlayer(p2);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "warheade"
        },
        "content": "        helper.addToAddressBook(addressBook, threePlayers);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "warheade"
        },
        "content": "        addressBook.removePlayer(p2);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "warheade"
        },
        "content": "        logic.setLastPlayerShownList(threePlayers);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(\"deletePlayer 2\","
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "warheade"
        },
        "content": "                Messages.MESSAGE_PLAYER_NOT_IN_LEAGUE,"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "warheade"
        },
        "content": "                threePlayers);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(\"findPlayer \", expectedMessage);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void execute_find_onlyMatchesFullWordsInNames() throws Exception {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "warheade"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player pTarget1 \u003d helper.generatePlayerWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player pTarget2 \u003d helper.generatePlayerWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p1 \u003d helper.generatePlayerWithName(\"KE Y\");"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p2 \u003d helper.generatePlayerWithName(\"KEYKEYKEY sduauo\");"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cPlayer\u003e fourPlayers \u003d helper.generatePlayerList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "warheade"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(fourPlayers);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cPlayer\u003e expectedList \u003d helper.generatePlayerList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "warheade"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPlayers);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(\"findPlayer KEY\","
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "warheade"
        },
        "content": "                Command.getMessageForPlayerListShownSummary(expectedList),"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "warheade"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "warheade"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "warheade"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_isCaseSensitive() throws Exception {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player pTarget1 \u003d helper.generatePlayerWithName(\"bla bla KEY bla\", 1);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player pTarget2 \u003d helper.generatePlayerWithName(\"bla KEY bla bceofeia\", 2);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p1 \u003d helper.generatePlayerWithName(\"key key\", 3);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p2 \u003d helper.generatePlayerWithName(\"KEy sduauo\", 4);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cPlayer\u003e fourPlayers \u003d helper.generatePlayerList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "warheade"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(fourPlayers);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cPlayer\u003e expectedList \u003d helper.generatePlayerList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "warheade"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPlayers);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(\"findPlayer KEY\","
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "warheade"
        },
        "content": "                Command.getMessageForPlayerListShownSummary(expectedList),"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void execute_find_matchesIfAnyKeywordPresent() throws Exception {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "warheade"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player pTarget1 \u003d helper.generatePlayerWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player pTarget2 \u003d helper.generatePlayerWithName(\"bla rAnDoM bla bceofeia\");"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p1 \u003d helper.generatePlayerWithName(\"key key\");"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player p2 \u003d helper.generatePlayerWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cPlayer\u003e fourPlayers \u003d helper.generatePlayerList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "warheade"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateAddressBook(fourPlayers);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cPlayer\u003e expectedList \u003d helper.generatePlayerList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "warheade"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPlayers);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertCommandBehavior(\"findPlayer KEY rAnDoM\","
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "warheade"
        },
        "content": "                Command.getMessageForPlayerListShownSummary(expectedList),"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "warheade"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "warheade"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "warheade"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Executes the command and confirms that the result message is correct."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private void assertTeamCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(inputCommand, expectedMessage, AddressBook.empty(), false, Collections.emptyList());"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * - the internal address book data are same as those in the {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * - the storage file content matches data in {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private void assertTeamCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                                           String expectedMessage,"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                                           AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                                           boolean isRelevantTeamsExpected,"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                                           List\u003c? extends ReadOnlyTeam\u003e lastTeamList) throws Exception {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(r.getRelevantTeams().isPresent(), isRelevantTeamsExpected);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        if (isRelevantTeamsExpected) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            assertEquals(lastTeamList, r.getRelevantTeams().get());"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(expectedAddressBook, addressBook);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(lastTeamList, logic.getLastTeamShownList());"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(addressBook, saveFile.load());"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_clearTeam() throws Exception {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        addressBook.addTeam(helper.generateTeam(1));"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        addressBook.addTeam(helper.generateTeam(2));"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        addressBook.addTeam(helper.generateTeam(3));"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        addressBook.addTeam(helper.generateTeam(4));"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"clearteam\", ClearTeam.MESSAGE_SUCCESS, AddressBook.empty(),"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                false, Collections.emptyList());"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_addTeam_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // anyhow argument"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \"addteam wrong args wrong args\", expectedMessage);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        //no country prefix"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \"addteam ValidName ValidCountry s/500\", expectedMessage);"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        //no sponsor prefix"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \"addteam ValidName c/ValidCountry 500\", expectedMessage);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_addTeam_invalidPlayerData() throws Exception {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \"addteam []\\\\[;] c/ValidCountry s/300\", seedu.addressbook.data.team.TeamName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \"addteam ValidName c/inValidCountry11 s/300\", Country.MESSAGE_COUNTRY_CONSTRAINTS);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                \"addteam ValidName c/ValidCountry s/InValidSponsor\", Sponsor.MESSAGE_SPONSOR_CONSTRAINTS);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_addTeam_successful() throws Exception {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team toBeAdded \u003d helper.teamA();"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        expectedAb.addTeam(toBeAdded);"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(helper.generateAddTeam(toBeAdded),"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(AddTeam.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_addTeamDuplicate_notAllowed() throws Exception {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team toBeAdded \u003d helper.teamA();"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        expectedAb.addTeam(toBeAdded);"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        addressBook.addTeam(toBeAdded); // player already in internal address book"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior("
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                helper.generateAddTeam(toBeAdded),"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                AddTeam.MESSAGE_DUPLICATE_TEAM,"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * targeting a single employee in the last shown list, using visible index."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * @param commandWord to test assuming it targets a single employee in the last shown list based on visible index."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private void assertInvalidIndexBehaviorForTeamEditCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String invalidFormat \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                EditTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String invalidIndexMessage \u003d Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t1 \u003d helper.generateTeam(1);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t2 \u003d helper.generateTeam(2);"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e lastShownList \u003d helper.generateTeamList(t1, t2);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String arbitraryParameter \u003d \"s/32123\";"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        logic.setLastTeamShownList(lastShownList);"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(commandWord + \" -1 \" + arbitraryParameter, invalidFormat,"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                AddressBook.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(commandWord + \" 0 \" + arbitraryParameter, invalidIndexMessage,"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                AddressBook.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(commandWord + \" 3 \" + arbitraryParameter, invalidIndexMessage,"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                AddressBook.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_editTeam_successful() throws Exception {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t1 \u003d helper.generateTeam(1);"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t2 \u003d helper.generateTeam(2);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t3 \u003d helper.generateTeam(3);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team editedTeam \u003d helper.generateEditTeam(t2, \"country\", \"America\");"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e lastShownTeamList \u003d helper.generateTeamList(t1, t2, t3);"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateTeamAddressBook(lastShownTeamList);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        expectedAb.editTeam(t2, editedTeam);"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        helper.addToTeamAddressBook(addressBook, lastShownTeamList);"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        logic.setLastTeamShownList(lastShownTeamList);"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(helper.generateEditTeamCommand(\"2\", \"country\", \"America\"),"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(EditTeam.MESSAGE_EDIT_TEAM_SUCCESS, editedTeam),"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                lastShownTeamList);"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_editTeam_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                EditTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"editteam \", expectedMessage);"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"editteam arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_editTeam_noArgs() throws Exception {"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t1 \u003d helper.generateTeam(1);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t2 \u003d helper.generateTeam(2);"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t3 \u003d helper.generateTeam(3);"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e lastShownList \u003d helper.generateTeamList(t1, t2, t3);"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        logic.setLastTeamShownList(lastShownList);"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(helper.generateEditTeamCommand(\"2\", null, null),"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(EditTeam.MESSAGE_NOARGS, EditTeam.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                AddressBook.empty(),"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_editTeam_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertInvalidIndexBehaviorForTeamEditCommand(\"editteam\");"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_listTeam_showsAllTeams() throws Exception {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateTeamAddressBook(2);"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003c? extends ReadOnlyTeam\u003e expectedList \u003d expectedAb.getAllTeams().immutableListView();"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        helper.addToTeamAddressBook(addressBook, 2);"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"listteam\","
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Command.getMessageForTeamListShownSummary(expectedList),"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * targeting a single team in the last shown list, using visible index."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private void assertInvalidIndexBehaviorForTeamCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e lastTeamList \u003d helper.generateTeamList(2);"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        logic.setLastTeamShownList(lastTeamList);"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(commandWord + \" -1\", expectedMessage, AddressBook.empty(), false, lastTeamList);"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(commandWord + \" 0\", expectedMessage, AddressBook.empty(), false, lastTeamList);"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(commandWord + \" 3\", expectedMessage, AddressBook.empty(), false, lastTeamList);"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_viewTeam_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"viewteam \", expectedMessage);"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"viewteam arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_viewTeam_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertInvalidIndexBehaviorForTeamCommand(\"viewteam\");"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_tryToViewAllTeamMissingInAddressBook_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t1 \u003d helper.generateTeam(1);"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t2 \u003d helper.generateTeam(2);"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e lastTeamList \u003d helper.generateTeamList(t1, t2);"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        expectedAb.addTeam(t1);"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        addressBook.addTeam(t1);"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        logic.setLastTeamShownList(lastTeamList);"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"viewteam 2\","
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Messages.MESSAGE_TEAM_NOT_IN_LEAGUE_TRACKER,"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                lastTeamList);"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_delTeam_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"deleteteam \", expectedMessage);"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"deleteteam arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_delTeam_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertInvalidIndexBehaviorForTeamCommand(\"deleteteam\");"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_delTeam_removesCorrectPerson() throws Exception {"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t1 \u003d helper.generateTeam(1);"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t2 \u003d helper.generateTeam(2);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t3 \u003d helper.generateTeam(3);"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e threeTeams \u003d helper.generateTeamList(t1, t2, t3);"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateTeamAddressBook(threeTeams);"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        expectedAb.removeTeam(t2);"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        helper.addToTeamAddressBook(addressBook, threeTeams);"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        logic.setLastTeamShownList(threeTeams);"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"deleteteam 2\","
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(DeleteTeam.MESSAGE_DELETE_TEAM_SUCCESS, t2),"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                threeTeams);"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_delTeam_missingInAddressBook() throws Exception {"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t1 \u003d helper.generateTeam(1);"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t2 \u003d helper.generateTeam(2);"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t3 \u003d helper.generateTeam(3);"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e threeTeams \u003d helper.generateTeamList(t1, t2, t3);"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateTeamAddressBook(threeTeams);"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        expectedAb.removeTeam(t2);"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        helper.addToTeamAddressBook(addressBook, threeTeams);"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        addressBook.removeTeam(t2);"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        logic.setLastTeamShownList(threeTeams);"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"deleteteam 2\","
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Messages.MESSAGE_TEAM_NOT_IN_LEAGUE_TRACKER,"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                threeTeams);"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_findTeam_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"findteam \", expectedMessage);"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_findTeam_onlyMatchesFullWordsInNames() throws Exception {"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team tTarget1 \u003d helper.generateTeamWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team tTarget2 \u003d helper.generateTeamWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t1 \u003d helper.generateTeamWithName(\"KE Y\");"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t2 \u003d helper.generateTeamWithName(\"KEYKEYKEY sduauo\");"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e fourTeams \u003d helper.generateTeamList(t1, tTarget1, t2, tTarget2);"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateTeamAddressBook(fourTeams);"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e expectedList \u003d helper.generateTeamList(tTarget1, tTarget2);"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        helper.addToTeamAddressBook(addressBook, fourTeams);"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"findteam KEY\","
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Command.getMessageForTeamListShownSummary(expectedList),"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_findTeam_isCaseSensitive() throws Exception {"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team tTarget1 \u003d helper.generateTeamWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team tTarget2 \u003d helper.generateTeamWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t1 \u003d helper.generateTeamWithName(\"key key\");"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t2 \u003d helper.generateTeamWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e fourTeams \u003d helper.generateTeamList(t1, tTarget1, t2, tTarget2);"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateTeamAddressBook(fourTeams);"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e expectedList \u003d helper.generateTeamList(tTarget1, tTarget2);"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        helper.addToTeamAddressBook(addressBook, fourTeams);"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"findteam KEY\","
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Command.getMessageForTeamListShownSummary(expectedList),"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void execute_findTeam_matchesIfAnyKeywordPresent() throws Exception {"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team tTarget1 \u003d helper.generateTeamWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team tTarget2 \u003d helper.generateTeamWithName(\"bla rAnDoM bla bceofeia\");"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t1 \u003d helper.generateTeamWithName(\"key key\");"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team t2 \u003d helper.generateTeamWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e fourTeams \u003d helper.generateTeamList(t1, tTarget1, t2, tTarget2);"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateTeamAddressBook(fourTeams);"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e expectedList \u003d helper.generateTeamList(tTarget1, tTarget2);"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        helper.addToTeamAddressBook(addressBook, fourTeams);"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertTeamCommandBehavior(\"findteam KEY rAnDoM\","
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                Command.getMessageForTeamListShownSummary(expectedList),"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Start Test for Finance Management"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Executes the command and confirms that the result message is correct."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private void assertFinanceCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertFinanceCommandBehavior(inputCommand,"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                AddressBook.empty(),"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * - the internal address book data are same as those in the {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * - the storage file content matches data in {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private void assertFinanceCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                                           String expectedMessage,"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                                           AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                                           boolean isRelevantFinancesExpected,"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                                           List\u003c? extends ReadOnlyFinance\u003e lastFinanceList) throws Exception {"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertEquals(r.getRelevantFinances().isPresent(), isRelevantFinancesExpected);"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        if (isRelevantFinancesExpected) {"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            assertEquals(lastFinanceList, r.getRelevantFinances().get());"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertEquals(expectedAddressBook, addressBook);"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertEquals(lastFinanceList, logic.getLastFinanceShownList());"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertEquals(addressBook, saveFile.load());"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void execute_listFinance_showsAllFinances() throws Exception {"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Team t1 \u003d helper.generateTeam(1);"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Team t2 \u003d helper.generateTeam(2);"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Finance f1 \u003d helper.generateFinance(t1);"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Finance f2 \u003d helper.generateFinance(t2);"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        List\u003cFinance\u003e lastFinanceList \u003d helper.generateFinanceList(f1, f2);"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateFinanceAddressBook(lastFinanceList);"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        List\u003c? extends ReadOnlyFinance\u003e expectedList \u003d expectedAb.getAllFinances().immutableListView();"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        addressBook.addTeam(t1);"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        addressBook.addTeam(t2);"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertFinanceCommandBehavior(\"listfinance\","
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                Command.getMessageForFinanceListShownSummary(expectedList),"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void execute_rankFinance_showsAllFinances() throws Exception {"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Team t1 \u003d helper.generateTeam(1);"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Team t2 \u003d helper.generateTeam(2);"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Finance f1 \u003d helper.generateFinance(t1);"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Finance f2 \u003d helper.generateFinance(t2);"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        List\u003cFinance\u003e lastFinanceList \u003d helper.generateFinanceList(f1, f2);"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        AddressBook expectedAb \u003d helper.generateFinanceAddressBook(lastFinanceList);"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        expectedAb.sortFinance();"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        List\u003c? extends ReadOnlyFinance\u003e expectedList \u003d expectedAb.getAllFinances().immutableListView();"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        addressBook.addTeam(t1);"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        addressBook.addTeam(t2);"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertFinanceCommandBehavior(\"rankfinance\","
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                Command.getMessageForFinanceListShownSummary(expectedList),"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * targeting a single finance in the last shown list, using visible index."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    private void assertInvalidIndexBehaviorForFinanceCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_FINANCE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        List\u003cFinance\u003e lastFinanceList \u003d helper.generateFinanceList(2);"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        logic.setLastFinanceShownList(lastFinanceList);"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertFinanceCommandBehavior(commandWord + \" -1\", expectedMessage, AddressBook.empty(), false, lastFinanceList);"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertFinanceCommandBehavior(commandWord + \" 0\", expectedMessage, AddressBook.empty(), false, lastFinanceList);"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertFinanceCommandBehavior(commandWord + \" 3\", expectedMessage, AddressBook.empty(), false, lastFinanceList);"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void execute_viewFinance_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewFinanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertFinanceCommandBehavior(\"viewfinance \", expectedMessage);"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertFinanceCommandBehavior(\"viewfinance arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void execute_viewFinance_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertInvalidIndexBehaviorForFinanceCommand(\"viewfinance\");"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void execute_getFinance_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertInvalidIndexBehaviorForTeamCommand(\"getfinance\");"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void execute_tryToViewAllFinanceMissingInAddressBook_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Finance f1 \u003d helper.generateFinance(1);"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Finance f2 \u003d helper.generateFinance(2);"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        List\u003cFinance\u003e lastFinanceList \u003d helper.generateFinanceList(f1, f2);"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        AddressBook expectedAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        expectedAb.addFinance(f1);"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        addressBook.addFinance(f1);"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        logic.setLastFinanceShownList(lastFinanceList);"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertFinanceCommandBehavior(\"viewfinance 2\","
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                Messages.MESSAGE_FINANCE_NOT_IN_LEAGUE_TRACKER,"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                lastFinanceList);"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void execute_tryToGetAllFinanceMissingInAddressBook_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Team t1 \u003d helper.generateTeam(1);"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Team t2 \u003d helper.generateTeam(2);"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Finance f1 \u003d helper.generateFinance(t1);"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Finance f2 \u003d helper.generateFinance(t2);"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        List\u003cFinance\u003e lastFinanceList \u003d helper.generateFinanceList(f1, f2);"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        AddressBook expectedAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        expectedAb.addFinance(f1);"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        addressBook.addFinance(f1);"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        logic.setLastFinanceShownList(lastFinanceList);"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertFinanceCommandBehavior(\"getfinance 2\","
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                Messages.MESSAGE_INVALID_TEAM_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                expectedAb,"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                lastFinanceList);"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "     * A utility class to generate test data."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "    class TestDataHelper {"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * generate a person with the stated parameters"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player messi() throws Exception {"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "warheade"
        },
        "content": "            Name name \u003d new Name(\"Lionel Messi\");"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "warheade"
        },
        "content": "            PositionPlayed positionPlayed \u003d new PositionPlayed(\"RW\");"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "warheade"
        },
        "content": "            Age age \u003d new Age(\"30\");"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "warheade"
        },
        "content": "            Salary sal \u003d new Salary(\"2000000\");"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "warheade"
        },
        "content": "            GoalsScored goalsScored \u003d new GoalsScored(\"30\");"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "warheade"
        },
        "content": "            GoalsAssisted goalsAssisted \u003d new GoalsAssisted(\"20\");"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "warheade"
        },
        "content": "            TeamName teamName \u003d new TeamName(\"FC Barcelona\");"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "warheade"
        },
        "content": "            Nationality nationality \u003d new Nationality(\"Argentina\");"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "warheade"
        },
        "content": "            JerseyNumber jerseyNumber \u003d new JerseyNumber(\"10\");"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "warheade"
        },
        "content": "            Appearance appearance \u003d new Appearance(\"54\");"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "warheade"
        },
        "content": "            HealthStatus healthStatus \u003d new HealthStatus(\"Healthy\");"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(tag1, tag2));"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new Player(name, positionPlayed, age, sal, goalsScored, goalsAssisted,"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    teamName, nationality, jerseyNumber, appearance, healthStatus, tags);"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Generates a valid player using the given seed."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Running this function with the same parameter values guarantees the returned player will have the same state."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "         * Each unique seed will generate a unique Person object."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * @param seed used to generate the player data field values"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player generatePlayer(int seed) throws Exception {"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new Player("
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new Name(\"Player \" + seed),"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new PositionPlayed(\"Position\" + seed),"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new Age(\"\" + Math.abs(seed)),"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new Salary(\"\" + Math.abs(seed)),"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new TeamName(\"TeamName\" + Math.abs(seed)),"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new Nationality(\"Nationality\" + Math.abs(seed)),"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new JerseyNumber(\"\" + (Math.abs(seed) % 35)),"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag\" + Math.abs(seed)), new Tag(\"tag\" + Math.abs(seed + 1))))"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "warheade"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "warheade"
        },
        "content": "         * Generates the correct add command based on the player given"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "warheade"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "warheade"
        },
        "content": "        String generateAddCommand(Player p) {"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "            StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cmd.add(\"addPlayer\");"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add(p.getName().toString());"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cmd.add(\" p/\" + p.getPositionPlayed().toString());"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cmd.add(\" a/\" + p.getAge().toString());"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cmd.add(\" sal/\" + p.getSalary().toString());"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cmd.add(\" gs/\" + p.getGoalsScored().toString());"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cmd.add(\" ga/\" + p.getGoalsAssisted().toString());"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cmd.add(\" tm/\" + p.getTeamName().toString());"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cmd.add(\" ctry/\" + p.getNationality().toString());"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cmd.add(\" jn/\" + p.getJerseyNumber().toString());"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cmd.add(\" app/\" + p.getAppearance().toString());"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "warheade"
        },
        "content": "            cmd.add(\" hs/\" + p.getHealthStatus().toString());"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d p.getTags();"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Tag t : tags) {"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "                cmd.add(\"t/\" + t.tagName);"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "            return cmd.toString();"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates an AddressBook with auto-generated persons."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "warheade"
        },
        "content": "         *"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "warheade"
        },
        "content": "         * @param num to indicate the number of player profiles that should be included in the League Tracker."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "warheade"
        },
        "content": "        AddressBook generateAddressBook(int num) throws Exception {"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "warheade"
        },
        "content": "            addToAddressBook(addressBook, num);"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates an AddressBook based on the list of Persons given."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "warheade"
        },
        "content": "        AddressBook generateAddressBook(List\u003cPlayer\u003e players) throws Exception {"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "warheade"
        },
        "content": "            addToAddressBook(addressBook, players);"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "         * Adds auto-generated Person objects to the given AddressBook"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "warheade"
        },
        "content": "         *"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param addressBook The AddressBook to which the Persons will be added"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "warheade"
        },
        "content": "         * @param num         to indicate the number of players profiles that should exist in the League Tracker."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "warheade"
        },
        "content": "        void addToAddressBook(AddressBook addressBook, int num) throws Exception {"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "warheade"
        },
        "content": "            addToAddressBook(addressBook, generatePlayerList(num));"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "         * Adds the given list of Persons to the given AddressBook"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "warheade"
        },
        "content": "        void addToAddressBook(AddressBook addressBook, List\u003cPlayer\u003e playersToAdd) throws Exception {"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "warheade"
        },
        "content": "            for (Player p : playersToAdd) {"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "warheade"
        },
        "content": "                addressBook.addPlayer(p);"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "         * Creates a list of Persons based on the give Person objects."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cPlayer\u003e generatePlayerList(Player... players) throws Exception {"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "warheade"
        },
        "content": "            List\u003cPlayer\u003e playerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "warheade"
        },
        "content": "            for (Player p : players) {"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "warheade"
        },
        "content": "                playerList.add(p);"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return playerList;"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "warheade"
        },
        "content": "         * Generates a list of Persons based on the number given."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "warheade"
        },
        "content": "        List\u003cPlayer\u003e generatePlayerList(int num) throws Exception {"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "warheade"
        },
        "content": "            List\u003cPlayer\u003e players \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "warheade"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d num; j++) {"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "warheade"
        },
        "content": "                players.add(generatePlayer(j));"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return players;"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates a Person object with given name. Other fields will have some dummy values."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "warheade"
        },
        "content": "        Player generatePlayerWithName(String name, int seed) throws Exception {"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new Player("
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Name(name),"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new PositionPlayed(\"Striker\"),"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new Age(\"25\"),"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new Salary(\"20000\"),"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new TeamName(\"FC Barcelona\"),"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new Nationality(\"Argentina\"),"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new JerseyNumber(String.valueOf(seed)),"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "                    Collections.singleton(new Tag(\"tag\"))"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Test Cases for Team from here onwards"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * generate a team with the stated parameters"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team teamA() throws Exception {"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            seedu.addressbook.data.team.TeamName teamName \u003d new seedu.addressbook.data.team.TeamName(\"a\");"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Country country \u003d new Country(\"a\");"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Sponsor sponsor \u003d new Sponsor(\"500\");"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(tag1, tag2));"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new Team(teamName, country, sponsor, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), tags);"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Generates a valid team using the given seed."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Each unique seed will generate a unique Person object."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         *"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * @param seed used to generate the player data field values"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team generateTeam(int seed) throws Exception {"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new Team("
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new seedu.addressbook.data.team.TeamName(\"Team \" + seed),"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new Country(\"Country \" + ((char) (64 + seed))),"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new Sponsor(\"40\" + seed),"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new HashSet\u003c\u003e(),"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new HashSet\u003c\u003e(),"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag\" + Math.abs(seed)), new Tag(\"tag\" + Math.abs(seed + 1))))"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            );"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Generates the correct add command based on the player given"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String generateAddTeam(Team team) {"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            cmd.add(\"addteam\");"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            cmd.add(team.getTeamName().toString());"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            cmd.add(\" c/\" + team.getCountry().toString());"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            cmd.add(\" s/\" + team.getSponsor().toString());"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Set\u003cTag\u003e tags \u003d team.getTags();"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            for (Tag t : tags) {"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                cmd.add(\"t/\" + t.tagName);"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return cmd.toString();"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /** Generates a new employee based on the detail given */"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team generateEditTeam(Team t, String editParam, String editDetail) throws Exception {"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            seedu.addressbook.data.team.TeamName teamName;"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Country country;"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Sponsor sponsor;"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            Set\u003cTag\u003e tagsList;"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (\"name\".equals(editParam)) {"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                teamName \u003d new seedu.addressbook.data.team.TeamName(editDetail);"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                teamName \u003d t.getTeamName();"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (\"country\".equals(editParam)) {"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                country \u003d new Country(editDetail);"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                country \u003d t.getCountry();"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (\"sponsor\".equals(editParam)) {"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                sponsor \u003d new Sponsor(editDetail);"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                sponsor \u003d t.getSponsor();"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (\"tag\".equals((editParam))) {"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                tagsList \u003d Collections.singleton(new Tag(\"tag\"));"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                tagsList \u003d t.getTags();"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new Team(teamName, country, sponsor, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), tagsList);"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /** Generates the correct edit command based on the team given */"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String generateEditTeamCommand(String index, String editParam, String editDetail) {"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            cmd.add(\"editteam\");"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            cmd.add(index);"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            if (editParam \u003d\u003d null || editDetail \u003d\u003d null) {"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                return cmd.toString();"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                if (editParam.equals(\"name\")) {"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    cmd.add(\"n/\" + editDetail);"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                if (editParam.equals(\"country\")) {"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    cmd.add(\"c/\" + editDetail);"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                if (editParam.equals(\"sponsor\")) {"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    cmd.add(\"s/\" + editDetail);"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                if (editParam.equals(\"tag\")) {"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    cmd.add(\"t/\" + editDetail);"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return cmd.toString();"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Generates an AddressBook with auto-generated teams."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook generateTeamAddressBook(int num) throws Exception {"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            addToTeamAddressBook(addressBook, num);"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Generates an AddressBook based on the list of Teams given."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook generateTeamAddressBook(List\u003cTeam\u003e teams) throws Exception {"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            addToTeamAddressBook(addressBook, teams);"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Adds auto-generated Team objects to the given AddressBook"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        void addToTeamAddressBook(AddressBook addressBook, int num) throws Exception {"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            addToTeamAddressBook(addressBook, generateTeamList(num));"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Adds the given list of Teams to the given AddressBook"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        void addToTeamAddressBook(AddressBook addressBook, List\u003cTeam\u003e teamsToAdd) throws Exception {"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            for (Team t : teamsToAdd) {"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                addressBook.addTeam(t);"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Creates a list of Teams based on the give Person objects."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e generateTeamList(Team... teams) throws Exception {"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            List\u003cTeam\u003e teamList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            for (Team t : teams) {"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                teamList.add(t);"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return teamList;"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Generates a list of Teams based on the number given."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        List\u003cTeam\u003e generateTeamList(int num) throws Exception {"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            List\u003cTeam\u003e teams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d num; j++) {"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                teams.add(generateTeam(j));"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return teams;"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         * Generates a Team object with given name. Other fields will have some dummy values."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        Team generateTeamWithName(String name) throws Exception {"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new Team("
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new seedu.addressbook.data.team.TeamName(name),"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new Country(\"Country\"),"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new Sponsor(\"404\"),"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new HashSet\u003c\u003e(),"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new HashSet\u003c\u003e(),"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    Collections.singleton(new Tag(\"tag\"))"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            );"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * Generates a valid finance using the given seed."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * Each unique seed will generate a unique Finance object."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         *"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * @param seed used to generate the finance data field values"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Finance generateFinance(int seed) throws Exception {"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new Finance(String.format(\"FINANCE \" + seed), seed, seed, seed, seed, seed, seed);"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * Generates a valid finance using the given ReadOnlyTeam."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * Each unique seed will generate a unique Finance object."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         *"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * @param aTeam used to generate the finance data field values"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        Finance generateFinance(ReadOnlyTeam aTeam) throws Exception {"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return new Finance(aTeam);"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * Generates an AddressBook with auto-generated finances."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        AddressBook generateFinanceAddressBook(int num) throws Exception {"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            addToFinanceAddressBook(addressBook, num);"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * Generates an AddressBook based on the list of Finances given."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        AddressBook generateFinanceAddressBook(List\u003cFinance\u003e finances) throws Exception {"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            addToFinanceAddressBook(addressBook, finances);"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * Adds auto-generated Finance objects to the given AddressBook"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        void addToFinanceAddressBook(AddressBook addressBook, int num) throws Exception {"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            addToFinanceAddressBook(addressBook, generateFinanceList(num));"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * Adds the given list of finances to the given AddressBook"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        void addToFinanceAddressBook(AddressBook addressBook, List\u003cFinance\u003e financesToAdd) throws Exception {"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            for (Finance f : financesToAdd) {"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                addressBook.addFinance(f);"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * Creates a list of Finances based on the give Finance objects."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        List\u003cFinance\u003e generateFinanceList(Finance... finances) throws Exception {"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            List\u003cFinance\u003e financeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            for (Finance f : finances) {"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                financeList.add(f);"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return financeList;"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         * Generates a list of Finances based on the number given."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "huyidi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        List\u003cFinance\u003e generateFinanceList(int num) throws Exception {"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            List\u003cFinance\u003e finances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d num; j++) {"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                finances.add(generateFinance(j));"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "huyidi"
        },
        "content": "            return finances;"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 215,
      "warheade": 333,
      "yingrong1996": 542,
      "-": 391
    }
  },
  {
    "path": "test/java/seedu/addressbook/parser/ParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.GetFinanceCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.GetLeagueFinanceCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.ListFinanceCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.RankFinanceCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huyidi"
        },
        "content": "import seedu.addressbook.commands.finance.ViewFinanceCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.ClearCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.DeleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.SortCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.commands.player.ViewAllCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.AddTeam;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.ClearTeam;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.DeleteTeam;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.EditTeam;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.FindTeam;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.ListTeam;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.commands.team.ViewTeam;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Age;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Appearance;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.GoalsAssisted;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.GoalsScored;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.HealthStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.JerseyNumber;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Nationality;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Player;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.PositionPlayed;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.ReadOnlyPlayer;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Salary;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.TeamName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Country;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.ReadOnlyTeam;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Sponsor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "import seedu.addressbook.data.team.Team;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyInput_returnsIncorrect() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] emptyInputs \u003d {\"\", \"  \", \"\\n  \\n\"};"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, emptyInputs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void unknownCommandWord_returnsHelp() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String input \u003d \"anyhowcommandword arguments arguments\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test 0-argument commands"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "warheade"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void sortCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String input \u003d \"sortPlayer\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "warheade"
        },
        "content": "        parseAndAssertCommandType(input, SortCommand.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String input \u003d \"clearPlayer\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ClearCommand.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void listCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String input \u003d \"listPlayer\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ListCommand.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void exitCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"exit\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test ingle index argument commands"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_noArgs() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String[] inputs \u003d {\"deletePlayer\", \"deletePlayer \"};"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String[] inputs \u003d {\"deletePlayer notANumber \", \"deletePlayer 8*wh12\", \"deletePlayer 1 2 3 4 5\"};"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String resultMessage;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String input \u003d \"deletePlayer \" + testIndex;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final DeleteCommand result \u003d parseAndAssertCommandType(input, DeleteCommand.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_noArgs() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String[] inputs \u003d {\"displayProfile\", \"displayProfile \"};"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String[] inputs \u003d {\"displayProfile notAnumber \", \"displayProfile 8*wh12\", \"displayProfile 1 2 3 4 5\"};"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 3;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String input \u003d \"displayProfile \" + testIndex;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        final ViewAllCommand result \u003d parseAndAssertCommandType(input, ViewAllCommand.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Test find players by keyword in name command"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_invalidArgs() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String[] inputs \u003d {\"findPlayer\", \"findPlayer \"};"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_validArgs_parsedCorrectly() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d {\"key1\", \"key2\", \"key3\"};"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String input \u003d \"findPlayer \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_duplicateKeys_parsedCorrectly() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d {\"key1\", \"key2\", \"key3\"};"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // duplicate every keyword"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String input \u003d \"findPlayer \" + String.join(\" \", keySet) + \" \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Test add player command"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_invalidArgs() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String[] inputs \u003d {\"addPlayer\", \"addPlayer \", \"addPlayer wrong args format\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "warheade"
        },
        "content": "                // no position prefix"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(\"addPlayer %1$s %2$s a/%3$s sal/%4$s gs/%5$s \""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                + \"ga/%6$s tm/%7$s ctry/%8$s jn/%9$s app/%10$s hs/%11$s\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        Name.EXAMPLE, PositionPlayed.EXAMPLE, Age.EXAMPLE, Salary.EXAMPLE, GoalsScored.EXAMPLE,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        GoalsAssisted.EXAMPLE, TeamName.EXAMPLE, Nationality.EXAMPLE,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        JerseyNumber.EXAMPLE, Appearance.EXAMPLE, HealthStatus.EXAMPLE),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "warheade"
        },
        "content": "                // no age prefix"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(\"addPlayer %1$s p/%2$s %3$s sal/%4$s gs/%5$s \""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                + \"ga/%6$s tm/%7$s ctry/%8$s jn/%9$s app/%10$s hs/%11$s\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        Name.EXAMPLE, PositionPlayed.EXAMPLE, Age.EXAMPLE, Salary.EXAMPLE, GoalsScored.EXAMPLE,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        GoalsAssisted.EXAMPLE, TeamName.EXAMPLE, Nationality.EXAMPLE,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        JerseyNumber.EXAMPLE, Appearance.EXAMPLE, HealthStatus.EXAMPLE),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "warheade"
        },
        "content": "                // no salary prefix"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(\"addPlayer %1$s p/%2$s a/%3$s %4$s gs/%5$s \""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                + \"ga/%6$s tm/%7$s ctry/%8$s jn/%9$s app/%10$s hs/%11$s\","
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        Name.EXAMPLE, PositionPlayed.EXAMPLE, Age.EXAMPLE, Salary.EXAMPLE, GoalsScored.EXAMPLE,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        GoalsAssisted.EXAMPLE, TeamName.EXAMPLE, Nationality.EXAMPLE,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        JerseyNumber.EXAMPLE, Appearance.EXAMPLE, HealthStatus.EXAMPLE),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "warheade"
        },
        "content": "                //no GoalsScored prefix"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(\"addPlayer %1$s p/%2$s a/%3$s sal/%4$s %5$s \""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                + \"ga/%6$s tm/%7$s ctry/%8$s jn/%9$s app/%10$s hs/%11$s\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        Name.EXAMPLE, PositionPlayed.EXAMPLE, Age.EXAMPLE, Salary.EXAMPLE, GoalsScored.EXAMPLE,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        GoalsAssisted.EXAMPLE, TeamName.EXAMPLE, Nationality.EXAMPLE,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        JerseyNumber.EXAMPLE, Appearance.EXAMPLE, HealthStatus.EXAMPLE),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "warheade"
        },
        "content": "                //no GoalsAssisted prefix"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(\"addPlayer %1$s p/%2$s a/%3$s sal/%4$s gs/%5$s \""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                + \"%6$s tm/%7$s ctry/%8$s jn/%9$s app/%10$s hs/%11$s\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        Name.EXAMPLE, PositionPlayed.EXAMPLE, Age.EXAMPLE, Salary.EXAMPLE, GoalsScored.EXAMPLE,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        GoalsAssisted.EXAMPLE, TeamName.EXAMPLE, Nationality.EXAMPLE,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        JerseyNumber.EXAMPLE, Appearance.EXAMPLE, HealthStatus.EXAMPLE),"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "warheade"
        },
        "content": "                //no TeamName prefix"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(\"addPlayer %1$s p/%2$s a/%3$s sal/%4$s gs/%5$s \""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                + \"ga/%6$s %7$s ctry/%8$s jn/%9$s app/%10$s hs/%11$s\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        Name.EXAMPLE, PositionPlayed.EXAMPLE, Age.EXAMPLE, Salary.EXAMPLE, GoalsScored.EXAMPLE,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        GoalsAssisted.EXAMPLE, TeamName.EXAMPLE, Nationality.EXAMPLE,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        JerseyNumber.EXAMPLE, Appearance.EXAMPLE, HealthStatus.EXAMPLE),"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "warheade"
        },
        "content": "                //no Nationality prefix"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(\"addPlayer %1$s p/%2$s a/%3$s sal/%4$s gs/%5$s \""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                + \"ga/%6$s tm/%7$s %8$s jn/%9$s app/%10$s hs/%11$s\","
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        Name.EXAMPLE, PositionPlayed.EXAMPLE, Age.EXAMPLE, Salary.EXAMPLE, GoalsScored.EXAMPLE,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        GoalsAssisted.EXAMPLE, TeamName.EXAMPLE, Nationality.EXAMPLE,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        JerseyNumber.EXAMPLE, Appearance.EXAMPLE, HealthStatus.EXAMPLE),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "warheade"
        },
        "content": "                //no JerseyNumber prefix"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(\"addPlayer %1$s p/%2$s a/%3$s sal/%4$s gs/%5$s \""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                + \"ga/%6$s tm/%7$s ctry/%8$s %9$s app/%10$s hs/%11$s\", Name.EXAMPLE,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        PositionPlayed.EXAMPLE, Age.EXAMPLE, Salary.EXAMPLE, GoalsScored.EXAMPLE,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        GoalsAssisted.EXAMPLE, TeamName.EXAMPLE, Nationality.EXAMPLE,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        JerseyNumber.EXAMPLE, Appearance.EXAMPLE, HealthStatus.EXAMPLE),"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "warheade"
        },
        "content": "                //no Appearance prefix"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(\"addPlayer %1$s p/%2$s a/%3$s sal/%4$s gs/%5$s \""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                + \"ga/%6$s tm/%7$s ctry/%8$s jn/%9$s %10$s hs/%11$s\","
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        Name.EXAMPLE, PositionPlayed.EXAMPLE, Age.EXAMPLE, Salary.EXAMPLE, GoalsScored.EXAMPLE,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        GoalsAssisted.EXAMPLE, TeamName.EXAMPLE, Nationality.EXAMPLE,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        JerseyNumber.EXAMPLE, Appearance.EXAMPLE, HealthStatus.EXAMPLE),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "warheade"
        },
        "content": "                //no HealthStatus prefix"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(\"addPlayer %1$s p/%2$s a/%3$s sal/%4$s gs/%5$s \""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                + \"ga/%6$s tm/%7$s ctry/%8$s jn/%9$s app/%10$s %11$s\","
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        Name.EXAMPLE, PositionPlayed.EXAMPLE, Age.EXAMPLE, Salary.EXAMPLE, GoalsScored.EXAMPLE,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        GoalsAssisted.EXAMPLE, TeamName.EXAMPLE, Nationality.EXAMPLE,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        JerseyNumber.EXAMPLE, Appearance.EXAMPLE, HealthStatus.EXAMPLE),"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "warheade"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void addCommand_invalidPlayerDataInArgs() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "warheade"
        },
        "content": "        // name, age, salary, gs, ga, jn and appearance are the ones that need to be tested"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidName \u003d \"[]\\\\[;]\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validName \u003d Name.EXAMPLE;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String invalidAgeArg \u003d \"a/not_numbers\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String validAgeArg \u003d \"a/\" + Age.EXAMPLE;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String invalidSalaryArg \u003d \"sal/not_number\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String validSalaryArg \u003d \"sal/\" + Salary.EXAMPLE;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String invalidGsArg \u003d \"gs/not_number\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String validGsArg \u003d \"gs/\" + GoalsScored.EXAMPLE;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String invalidGaArg \u003d \"ga/not_number\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String validGaArg \u003d \"ga/\" + GoalsAssisted.EXAMPLE;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String invalidJnArg \u003d \"jn/not_number\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String validJnArg \u003d \"jn/\" + JerseyNumber.EXAMPLE;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String invalidAppearanceArg \u003d \"app/not_number\";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String validAppearanceArg \u003d \"app/\" + Appearance.EXAMPLE;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidTagArg \u003d \"t/invalid_-[.tag\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "warheade"
        },
        "content": "        // PositionPlayer, TeamName, Nationality and HealthStatus can be any string, so no invalid address"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "warheade"
        },
        "content": "        // name, age, salary, gs, ga, jn, app"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String addCommandFormatString \u003d \"addPlayer %1$s \" + \"p/\""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + PositionPlayed.EXAMPLE + \" %2$s %3$s %4$s %5$s \" + \"tm/\""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + TeamName.EXAMPLE + \" ctry/\" + Nationality.EXAMPLE + \" %6$s %7$s \" + \"hs/\""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + HealthStatus.EXAMPLE + \" \";"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // test each incorrect player data field argument individually"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid name"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(addCommandFormatString, invalidName, validAgeArg, validSalaryArg, validGsArg,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        validGaArg, validJnArg, validAppearanceArg),"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "warheade"
        },
        "content": "                // invalid age"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(addCommandFormatString, validName, invalidAgeArg, validSalaryArg, validGsArg,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        validGaArg, validJnArg, validAppearanceArg),"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "warheade"
        },
        "content": "                // invalid salary"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(addCommandFormatString, validName, validAgeArg, invalidSalaryArg, validGsArg,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        validGaArg, validJnArg, validAppearanceArg),"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "warheade"
        },
        "content": "                // invalid GS"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(addCommandFormatString, validName, validAgeArg, validSalaryArg, invalidGsArg,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        validGaArg, validJnArg, validAppearanceArg),"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "warheade"
        },
        "content": "                // invalid GA"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(addCommandFormatString, validName, validAgeArg, validSalaryArg, validGsArg,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        invalidGaArg, validJnArg, validAppearanceArg),"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "warheade"
        },
        "content": "                // invalid JN"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(addCommandFormatString, validName, validAgeArg, validSalaryArg, validGsArg,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        validGaArg, invalidJnArg, validAppearanceArg),"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "warheade"
        },
        "content": "                // invalid Appearance"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(addCommandFormatString, validName, validAgeArg, validSalaryArg, validGsArg,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        validGaArg, validJnArg, invalidAppearanceArg),"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid tag"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "warheade"
        },
        "content": "                String.format(addCommandFormatString, validName, validAgeArg, validSalaryArg, validGsArg,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "warheade"
        },
        "content": "                        validGaArg, validJnArg, validAppearanceArg) + \" \" + invalidTagArg"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "warheade"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "warheade"
        },
        "content": "    public void addCommand_validPlayerData_parsedCorrectly() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Player testPlayer \u003d generateTestPlayer();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final String input \u003d convertPlayerToAddCommandString(testPlayer);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        final AddCommand result \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertEquals(result.getPlayer(), testPlayer);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_duplicateTags_merged() throws IllegalValueException {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "warheade"
        },
        "content": "        final Player testPlayer \u003d generateTestPlayer();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "warheade"
        },
        "content": "        String input \u003d convertPlayerToAddCommandString(testPlayer);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (Tag tag : testPlayer.getTags()) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            // create duplicates by doubling each tag"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            input +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        final AddCommand result \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertEquals(result.getPlayer(), testPlayer);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * generates a test player"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private static Player generateTestPlayer() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "warheade"
        },
        "content": "            return new Player("
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Name(Name.EXAMPLE),"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new PositionPlayed(PositionPlayed.EXAMPLE),"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new Age(Age.EXAMPLE),"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new Salary(Salary.EXAMPLE),"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new GoalsScored(GoalsScored.EXAMPLE),"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new GoalsAssisted(GoalsAssisted.EXAMPLE),"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new TeamName(TeamName.EXAMPLE),"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new Nationality(Nationality.EXAMPLE),"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new JerseyNumber(JerseyNumber.EXAMPLE),"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new Appearance(Appearance.EXAMPLE),"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "warheade"
        },
        "content": "                    new HealthStatus(HealthStatus.EXAMPLE),"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag1\"), new Tag(\"tag2\"), new Tag(\"tag3\")))"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new RuntimeException(\"test player data should be valid by definition\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "warheade"
        },
        "content": "     * Converts player to add command string"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "warheade"
        },
        "content": "    private static String convertPlayerToAddCommandString(ReadOnlyPlayer player) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "warheade"
        },
        "content": "        String addCommand \u003d \"addPlayer \""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + player.getName().fullName"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + \" p/\" + player.getPositionPlayed().fullPosition"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + \" a/\" + player.getAge().value"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + \" sal/\" + player.getSalary().value"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + \" gs/\" + player.getGoalsScored().value"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + \" ga/\" + player.getGoalsAssisted().value"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + \" tm/\" + player.getTeamName().fullTeam"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + \" ctry/\" + player.getNationality().fullCountry"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + \" jn/\" + player.getJerseyNumber().value"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + \" app/\" + player.getAppearance().value"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "warheade"
        },
        "content": "                + \" hs/\" + player.getHealthStatus().fullHs;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "warheade"
        },
        "content": "        for (Tag tag : player.getTags()) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            addCommand +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Test for team management begin here"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void clearTeamCommand_parsedCorretly() {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String input \u003d \"clearteam\";"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        parseAndAssertCommandType(input, ClearTeam.class);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void listTeam_parsedCorrectly() {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String input \u003d \"listteam\";"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        parseAndAssertCommandType(input, ListTeam.class);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void deleteTeam_noArgs() {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] inputs \u003d {\"deleteteam\", \"deleteteam \"};"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void deleteTeam_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] inputs \u003d {\"deleteteam notANumber \", \"deleteteam 8*wh12\", \"deleteteam 1 2 3 4 5\"};"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String resultMessage;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void deleteTeam_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final int testIndex \u003d 1;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String input \u003d \"deleteteam \" + testIndex;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final DeleteTeam result \u003d parseAndAssertCommandType(input, DeleteTeam.class);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void viewTeam_noArgs() {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] inputs \u003d {\"viewteam\", \"viewteam \"};"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void viewTeam_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] inputs \u003d {\"viewteam notAnumber \", \"viewteam 8*wh12\", \"viewteam 1 2 3 4 5\"};"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void viewTeam_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final int testIndex \u003d 3;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String input \u003d \"viewteam \" + testIndex;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final ViewTeam result \u003d parseAndAssertCommandType(input, ViewTeam.class);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Test find teams by keyword in name command"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void findTeam_invalidArgs() {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] inputs \u003d {\"findteam\", \"findteam \"};"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void findTeam_validArgs_parsedCorrectly() {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] keywords \u003d {\"key1\", \"key2\", \"key3\"};"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String input \u003d \"findteam \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final FindTeam result \u003d"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                parseAndAssertCommandType(input, FindTeam.class);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void findTeam_duplicateKeys_parsedCorrectly() {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] keywords \u003d {\"key1\", \"key2\", \"key3\"};"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // duplicate every keyword"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String input \u003d \"findteam \" + String.join(\" \", keySet) + \" \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final FindTeam result \u003d"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                parseAndAssertCommandType(input, FindTeam.class);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Test add team command"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void addTeam_invalidArgs() {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] inputs \u003d {\"addteam\", \"addteam \", \"addteam wrong args format\","
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                // no country prefix"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(\"addteam %1$s %2$s s/%3$s\","
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                        TeamName.EXAMPLE, Country.EXAMPLE, Sponsor.EXAMPLE),"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                // no sponsor prefix"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(\"addteam %1$s c/%2$s %3$s\","
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                        TeamName.EXAMPLE, Country.EXAMPLE, Sponsor.EXAMPLE),"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        };"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void addTeam_invalidTeamDataInArgs() {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // name, country and sponsor are the ones that need to be tested"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String invalidTeamName \u003d \"[]\\\\[;]\";"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String validTeamName \u003d TeamName.EXAMPLE;"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String invalidCountryArg \u003d \"c/contain_numbers123\";"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String validCountryArg \u003d \"c/\" + Country.EXAMPLE;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String invalidSponsorArg \u003d \"s/not_number\";"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String validSponsorArg \u003d \"s/\" + Sponsor.EXAMPLE;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String addTeamFormatString \u003d \"addteam %1$s %2$s %3$s \";"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // test each incorrect team data field argument individually"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                // invalid name"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(addTeamFormatString, invalidTeamName, validCountryArg, validSponsorArg),"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                // invalid country"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(addTeamFormatString, validTeamName, invalidCountryArg, validSponsorArg),"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                // invalid sponsor"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(addTeamFormatString, validTeamName, validCountryArg, invalidSponsorArg),"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        };"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void addTeam_validTeamData_parsedCorrectly() {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Team testTeam \u003d generateTestTeam();"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String input \u003d convertTeamToAddTeamString(testTeam);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final AddTeam result \u003d parseAndAssertCommandType(input, AddTeam.class);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(result.getTeam(), testTeam);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void addTeam_duplicateTags_merged() throws IllegalValueException {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final Team testTeam \u003d generateTestTeam();"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String input \u003d convertTeamToAddTeamString(testTeam);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Tag tag : testTeam.getTags()) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            // create duplicates by doubling each tag"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            input +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final AddTeam result \u003d parseAndAssertCommandType(input, AddTeam.class);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        assertEquals(result.getTeam(), testTeam);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Test Edit command function"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void editTeam_noArgs() {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] inputs \u003d {\"editteam\", \"editteam \"};"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void editTeam_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] inputs \u003d {\"editteam notAnumber \", \"editteam 8*wh12\", \"editteam 1 2 3 4 5\"};"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTeam.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    public void editTeam_invalidTeamDataInArgs() {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // name, country and sponsor are the ones that need to be tested"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String invalidTeamName \u003d \"n/[]\\\\[;]\";"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String validTeamName \u003d \"n/\" + TeamName.EXAMPLE;"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String invalidCountryArg \u003d \"c/contain_numbers123\";"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String validCountryArg \u003d \"c/\" + Country.EXAMPLE;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String invalidSponsorArg \u003d \"s/not_number\";"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String validSponsorArg \u003d \"s/\" + Sponsor.EXAMPLE;"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String addTeamFormatString \u003d \"editteam 1 %1$s %2$s %3$s \";"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        // test each incorrect team data field argument individually"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                // invalid name"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(addTeamFormatString, invalidTeamName, validCountryArg, validSponsorArg),"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                // invalid country"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(addTeamFormatString, validTeamName, invalidCountryArg, validSponsorArg),"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                // invalid sponsor"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                String.format(addTeamFormatString, validTeamName, validCountryArg, invalidSponsorArg),"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        };"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * generates a test team"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private static Team generateTestTeam() {"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            return new Team("
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new seedu.addressbook.data.team.TeamName(TeamName.EXAMPLE),"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new Country(Country.EXAMPLE),"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new Sponsor(Sponsor.EXAMPLE),"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new HashSet\u003c\u003e(),"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new HashSet\u003c\u003e(),"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag1\"), new Tag(\"tag2\"), new Tag(\"tag3\")))"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            );"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            throw new RuntimeException(\"test team data should be valid by definition\");"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts team to add command string"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private static String convertTeamToAddTeamString(ReadOnlyTeam team) {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String addTeam \u003d \"addteam \""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                + team.getTeamName().fullName"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                + \" c/\" + team.getCountry().value"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                + \" s/\" + team.getSponsor().value;"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Tag tag : team.getTags()) {"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            addTeam +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return addTeam;"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     * Converts team to add command string"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    private static String convertTeamToEditTeamString(ReadOnlyTeam team) {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        String editTeam \u003d \"editteam 1\""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                + \" n/\" + team.getTeamName().fullName"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                + \" c/\" + team.getCountry().value"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "                + \" s/\" + team.getSponsor().value;"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        for (Tag tag : team.getTags()) {"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "            editTeam +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        return editTeam;"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Test ListFinanceCommand"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void listFinanceCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String input \u003d \"listfinance\";"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        parseAndAssertCommandType(input, ListFinanceCommand.class);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Test RankFinanceCommand"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void rankFinanceCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String input \u003d \"rankfinance\";"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        parseAndAssertCommandType(input, RankFinanceCommand.class);"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Test GetLeagueFinanceCommand"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void getLeagueFinanceCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String input \u003d \"getlf\";"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        parseAndAssertCommandType(input, GetLeagueFinanceCommand.class);"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Test ViewFinanceCommand with single index argument commands"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void viewFinanceCommand_noArgs() {"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String[] inputs \u003d {\"viewfinance\", \"viewfinance \"};"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewFinanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void viewFinanceCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String[] inputs \u003d {\"viewfinance notAnumber \", \"viewfinance 7random12\", \"viewfinance 1 2 3 4 5\"};"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewFinanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void viewFinanceCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final int testIndex \u003d 3;"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String input \u003d \"viewfinance \" + testIndex;"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final ViewFinanceCommand result \u003d parseAndAssertCommandType(input, ViewFinanceCommand.class);"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     * Test GetFinanceCommand with single index argument commands"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "huyidi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void getFinanceCommand_noArgs() {"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String[] inputs \u003d {\"getfinance\", \"getfinance \"};"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "huyidi"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, GetFinanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void getFinanceCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String[] inputs \u003d {\"getfinance notAnumber \", \"getfinance 7random12\", \"getfinance 1 2 3 4 5\"};"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GetFinanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    public void getFinanceCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final int testIndex \u003d 3;"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final String input \u003d \"getfinance \" + testIndex;"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        final GetFinanceCommand result \u003d parseAndAssertCommandType(input, GetFinanceCommand.class);"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "huyidi"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "huyidi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "huyidi"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "     * Utility methods"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that parsing the given inputs will return IncorrectCommand with the given feedback message."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "    private void parseAndAssertIncorrectWithMessage(String feedbackMessage, String... inputs) {"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "            final IncorrectCommand result \u003d parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(result.feedbackToUser, feedbackMessage);"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "     * Utility method for parsing input and asserting the class/type of the returned command object."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input                to be parsed"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed command object"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT extends Command\u003e T parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass) {"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "        final Command result \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "        return (T) result;"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huyidi": 86,
      "warheade": 199,
      "yingrong1996": 295,
      "-": 202
    }
  },
  {
    "path": "test/java/seedu/addressbook/storage/StorageFileTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "warheade"
        },
        "content": "import static seedu.addressbook.util.TestUtil.assertTextFilesEqual;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Age;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Appearance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.GoalsAssisted;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.GoalsScored;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.HealthStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.JerseyNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Nationality;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Player;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.PositionPlayed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.Salary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "warheade"
        },
        "content": "import seedu.addressbook.data.player.TeamName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageFileTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d \"test/data/StorageFileTest\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        new StorageFile(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_noTxtExtension_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        new StorageFile(TEST_DATA_FOLDER + \"/\" + \"InvalidfileName\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_invalidFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // The file contains valid xml data, but does not match the AddressBook class"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getStorage(\"InvalidData.txt\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.load();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_validFormat() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook actualAb \u003d getStorage(\"ValidData.txt\").load();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "        AddressBook expectedAb \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensure loaded AddressBook is properly constructed with test data"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: overwrite equals method in AddressBook class and replace with equals method below"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "warheade"
        },
        "content": "        assertEquals(actualAb.getAllPlayers(), expectedAb.getAllPlayers());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullAddressBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_validAddressBook() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidData.txt\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    // getPath() method in StorageFile class is trivial so it is not tested"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the contents of two storage files are the same."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStorageFilesEqual(StorageFile sf1, StorageFile sf2) throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTextFilesEqual(Paths.get(sf1.getPath()), Paths.get(sf2.getPath()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile getStorage(String fileName) throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile(TEST_DATA_FOLDER + \"/\" + fileName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile getTempStorage() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile(testFolder.getRoot().getPath() + \"/\" + \"temp.txt\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook getTestAddressBook() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "warheade"
        },
        "content": "        ab.addPlayer(new Player(new Name(\"Lionel Messi\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new PositionPlayed(\"RW\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new Age(\"30\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new Salary(\"200\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new GoalsScored(\"30\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new GoalsAssisted(\"20\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new TeamName(\"FC Barcelona\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new Nationality(\"Argentina\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new JerseyNumber(\"10\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new Appearance(\"54\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new HealthStatus(\"Healthy\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                                Collections.emptySet()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "warheade"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "warheade"
        },
        "content": "        ab.addPlayer(new Player(new Name(\"Luis Suarez\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new PositionPlayed(\"Striker\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new Age(\"32\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new Salary(\"200\"),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new GoalsScored(\"30\"),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new GoalsAssisted(\"20\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new TeamName(\"FC Barcelona\"),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new Nationality(\"Uruguay\"),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new JerseyNumber(\"9\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new Appearance(\"54\"),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "warheade"
        },
        "content": "                                new HealthStatus(\"Healthy\"),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                                Collections.emptySet()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "warheade": 39,
      "yingrong1996": 2,
      "-": 91
    }
  },
  {
    "path": "test/java/seedu/addressbook/util/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "  * TestUtil"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yingrong1996"
        },
        "content": "  **/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts whether the text in the two given files are the same. Ignores any"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * differences in line endings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertTextFilesEqual(Path path1, Path path2) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list1 \u003d Files.readAllLines(path1, Charset.defaultCharset());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list2 \u003d Files.readAllLines(path2, Charset.defaultCharset());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.join(\"\\n\", list1), String.join(\"\\n\", list2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yingrong1996": 5,
      "-": 20
    }
  }
]
