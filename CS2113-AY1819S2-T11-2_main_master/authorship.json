[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d Doctor On Call"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:imagesDir: docs/images]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "https://travis-ci.org/cs2113-ay1819s2-t11-2/main[image:https://travis-ci.org/cs2113-ay1819s2-t11-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* It is a Java sample application intended for hospital doctor who has several long-term patients he has to take care of."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* This appication was developed by team T11-2 of CS2113T in National University of Singapore"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "*Useful Links*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "This application is morphed from AddressBook-Level3 project project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Some parts of this sample application was inspired by the excellent"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by Marco Jakob"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "WuPeiHsuan": 7
    }
  },
  {
    "path": "addressbook.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003cAddressBook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        \u003cname\u003eJohn Doe\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ejohnd@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e311, Clementi Ave 2, #02-25 \u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        \u003cappointment\u003e2020 12 11 08 00\u003c/appointment\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        \u003cdoctor\u003eDOCTOR TAN\u003c/doctor\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        \u003cstatus\u003eObservation\u003c/status\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003c/AddressBook\u003e"
      }
    ],
    "authorContributionMap": {
      "matthiaslum": 14
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "//@@author liguanlong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Doctor on Call was developed by team T11-2 of CS2113 in National University of Singapore. It is a desktop address book application designed to facilitate doctors to manage patient information and aims to reduce the inefficient communication between doctors and patients."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d User Interface"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "image:https://raw.githubusercontent.com/cs2113-ay1819s2-t11-2/main/master/docs/images/Ui.png[width\u003d820]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d The Project Team"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d Wu Pei Hsuan "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "image:https://raw.githubusercontent.com/cs2113-ay1819s2-t11-2/main/master/docs/images/wupeihsuan.png[width\u003d128]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "{empty}[https://github.com/WuPeiHsuan[GitHub]] [\u003c\u003cwupeihsuan#, Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d Matthias Lum"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "image:https://raw.githubusercontent.com/cs2113-ay1819s2-t11-2/main/master/docs/images/matthiaslum.png[width\u003d128]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "{empty}[https://github.com/matthiaslum[GitHub]] [\u003c\u003cmatthiaslum#, Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d Teo Xuan Wei"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "image:https://raw.githubusercontent.com/cs2113-ay1819s2-t11-2/main/master/docs/images/shawn-t.png[width\u003d128]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "{empty}[https://github.com/shawn-t[GitHub]] [\u003c\u003cshawn-t#, Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d Li Guanlong"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "image:https://github.com/cs2113-ay1819s2-t11-2/main/blob/master/docs/images/liguanlong.png?raw\u003dtrue[width\u003d128]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "{empty}[https://github.com/liguanlong[GitHub]] [\u003c\u003cliguanlong#, Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liguanlong": 52
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "//@@author liguanlong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2113-ay1819s2-t11-2/main/issues[issue tracker]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "liguanlong": 9
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 9 or later"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* IntelliJ IDE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Importing the project into IntelliJ"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".. If JDK 9 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 9"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `OK`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.addressbook.Main` class (right-click the `Main` class and click `Run Main.main()`) and try executing a few commands"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Run all the tests (right-click the `test` folder, and click `Run \u0027All Tests\u0027`) and ensure that they pass"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open the `StorageFile` file and check for any code errors"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003djava.xml.bind\u0027 to module compiler options`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "//@@author WuPeiHsuan"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "image::ClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "The *_Architecture Diagram_* given above shows a detailed overview of how each class is related/ interacts with each other in the design of our project."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".Simplified Architecture Diagram"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "image::Architecture.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The *_Simplified Architecture Diagram_* above is an abstraction of the first diagram provided. It categorises classes into the respective components by colour. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "`Main` has only one class called link:https://github.com/cs2113-ay1819s2-t11-2/main/blob/master/src/seedu/addressbook/Main.java[`Main`]. It is responsible for,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* At app launch: Initializing the components, and creating the GUI."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* At shut down: Shutting down the components, closing the GUI and exiting the program."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The rest of the App consists of the following eight components:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* \u003c\u003cDesign-AccountManager,*`AccountManager`*\u003e\u003e: Manages the logging in / out of user accounts."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* \u003c\u003cDesign-Command,*`Command`*\u003e\u003e: represents a collection of classes that defines the behaviour of the respective commands."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* \u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* \u003c\u003cDesign-Data,*`Data`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* \u003c\u003cDesign-Parser,*`Parser`*\u003e\u003e: Parses user input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* \u003c\u003cDesign-Ui,*`Ui`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[[Design-AccountManager]]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d AccountManager Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*API* : link:https://github.com/cs2113-ay1819s2-t11-2/main/blob/master/src/seedu/addressbook/accountmanager/AccountManager.java[`AccountManager`] +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "For detailed implementation for AccountManager Component, please refer to \u003c\u003cImplementation,*`Implementation`*\u003e\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[[Design-Data]]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Data Component"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "image::DataComponent.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*API* : link:https://github.com/cs2113-ay1819s2-t11-2/main/blob/master/src/seedu/addressbook/data/AddressBook.java[`AddressBook.java`]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The `AddressBook.java`,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* exposes an unmodifiable `ReadOnlyPerson\u003cPerson\u003e` that can be \u0027read\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*API* : link:https://github.com/cs2113-ay1819s2-t11-2/main/blob/master/src/seedu/addressbook/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".  `Logic` uses the `Parser` class to parse the user command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".  This results in a `Command` object which is executed by the matching Command class (e.g. DeleteCommand class exceutes delete)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".  The command execution can affect the `UniquePersonList` (e.g. deleting a person)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "image::LogicComponent.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[[Design-Parser]]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Parser Component"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*API* : link:https://github.com/cs2113-ay1819s2-t11-2/main/blob/master/src/seedu/addressbook/parser/Parser.java[`Parser.java`]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Storage Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*API* : link:https://github.com/cs2113-ay1819s2-t11-2/main/blob/master/src/seedu/addressbook/storage/jaxb/StorageFile.java[`StorageFile.java`]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* can save the Address Book data in a default .txt file named addressbook.txt and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Ui Component"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*API* : link:https://github.com/cs2113-ay1819s2-t11-2/main/blob/master/src/seedu/addressbook/ui/Gui.java[`Gui.java`]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The `Gui.java` component,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* Listens for changes to `Data` component so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "image::UiComponent.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Command classes"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*API* : link:https://github.com/cs2113-ay1819s2-t11-2/main/blob/master/src/seedu/addressbook/commands[`Commands`]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Classes in this component defines the behaviour of the respective commands. Examples include the SortCommand, ReferCommand, IncorrectCommand class etc, as well as the CommandResult class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*API* : link:https://github.com/cs2113-ay1819s2-t11-2/main/blob/master/src/seedu/addressbook/common[`Common`]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package. In our project, Messages class and Utils class are the only two classes in this package."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.addressbook.common.UtilsTest`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.addressbook.storage.StorageFileTest`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.addressbook.logic.LogicTest`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "//@@author WuPeiHsuan"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d\u003d Sort feature"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "The sort mechanism is facilitated by `UniquePersonList` and `SortCommand`. `UniquePersonList` stores a list of all persons in the address book as an `internalList`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `UniquePersonList#SortByName()` -- Sort `internalList` by name column in alphabetical order"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `SortCommand#getPersonsSortedByDate()` -- Return a list sorted by appointment column in chronological order"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `SortCommand#getPersonsSortedByStatus()` -- Return a list sorted by status column according to the degree of urgency. The sequence of the status in this order is as follows: Critical, Waiting for Surgery, Life Support, Waiting for doctor appointment, Therapy and Observation."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "These operations are exposed in `AddressBook` as `AddressBook#sorted(String attribute)`. Corresponding operation will be called depending on attribute the user wants to sort the list by."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Given below is two examples usage scenario and how the sort mechanism behaves at each step."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Example 1:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 1. The user launches the application for the first time. The `UniquePersonList` will be initialized with the initial address book state."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 2. The user executes `add n/…` to add some new people. These people will be added sequentially to the end of the list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 3. The user then decides to execute the command `list`. Commands that do not modify the address book, such as list, will usually not call `AddressBook#sorted(String attribute)` . Thus, the `internalList` remains unchanged."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 4. The user decides to view the list sorted by their name by executing the `sort name` command. This command will call `AddressBook#sorted(String attribute)` and pass the string “name” to the method. Since the value of parameter is “name”, `SortByName()` will be called. `internalList` will then be sorted by name column in alphabetical order. At last, `internalList` will be returned and displayed to the user."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Example 2:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 1. The user launches the application for the first time. The `UniquePersonList` will be initialized with the initial address book state."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 2. The user executes `add n/…` to add some new people. These people will be added sequentially to the end of the list."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 3. The user then decides to execute the command `list`. Commands that do not modify the address book, such as list, will usually not call `AddressBook#sorted(String attribute)` . Thus, the `internalList` remains unchanged."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 4. The user decides to view the list sorted by their name by executing the `sort appointment` command. This command will call `SortCommand#execute()` and pass the string “appointment” to the method. Since the value of parameter is “appointment”, `SortCommand#getPersonsSortedByDate()` will be called. A list sorted by appointment column in chronological order will be returned and displayed to the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d\u003d Add Status feature"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "the add status feature facilitated by the `Status` class, it implements the following operations:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `status(String)` -- The constructor for the class `Status`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `toString()` -- Returns a String containing the name of the patient\u0027s status."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `isValidStatus()` -- Checks if if a given string is a valid status."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `equals(Object)` -- Checks if two patients\u0027 status are equal."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `isCorrectStatus()` -- Checks if if a given string is any of following status: Critical / Waiting for Surgery / Life Support / Waiting for doctor appointment / Therapy / Observation."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "In addition to the Appointment class, we update the ReadOnlyPerson interface and the Person class (which implements the interface) to ensure that every Person object is constructed with an Appointment class. To be specific, the following operations are added or updated."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `Person(Status status)` --  The class `Person` now requires a Status object during its construction."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `getStatus()` -- The class `Person` implements a method that returns the Status object of a Person."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Refer feature"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The refer feature is facilitated by the ReferCommand class, Logic class, Parser class and AddressBook class, and it implements the following operations:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `prepareRefer()` -- checks if input is valid and splits it at the specific prefix d/ when necessary"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `getPatientToRefer()` -- looks up addressbook and returns target patient to refer"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `toRefer \u003d new Person("
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getName(),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getPhone(),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getEmail(),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getAddress(),"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getAppointment(),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             new Doctor(referraldoctor),"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getStatus(),"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getTags()"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             );` -- Copies and modifies taget patient\u0027s doctor name"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `tagSet.add(new Tag(\"referred\"))` -- adds a refer tag"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `addressBook.removePerson(person)` -- removes target patient"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `addressBook.addPerson(toRefer)` -- adds the newly update patient entry back into the addressbook"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Given below is an example usage scenario and how the refer feature is incorporated at each step. The _Sequence Diagram for referring a patient_ is being provided at the end to further aid in illustrating this example."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 1. The user executes command \"refer john\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 2.Logic class calls Parser class through command `parserCommand(\"refer John\")`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 3. Parser class calls method `prepareRefer(\"John\")` to checks if input is valid and splits it at the specific prefix d/ when necessary."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 4. Parser class calls ReferCommand to start evoke the refer."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 5. ReferComand class calls method `getPatientToRefer(\"John\")` to looks through the Addressbook for all entries containing the keyword \"john\""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 6. If there is only one entry, ReferCommand modifies the entry\u0027s Doctor and adds a new tag \u0027refer\u0027 to the current collection of tags, deletes the old and adds the newly modified patient entry into the addressbook. If there are multiple entires, ReferCommand class prints all entries in the address book with the keyword and prompts user to key unique keyword (Repeats to Step 1)."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step7. The successful execution returns a MESSAGE_SUCCESS along with the patient\u0027s updated particulars."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".Sequence Diagram for referring a patient"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "image::ReferCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Length feature"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The refer feature is facilitated by the LengthCommand class, Logic class, Parser class and AddressBook class, and it implements the following operation:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `addressBook.size()` -- queries and returns the size of the addressbook"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Given below is an example usage scenario and how the length feature is incorporated at each step. The _Sequence Diagram for getting addressbook length_ is being provided at the end to further aid in illustrating this example."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 1. The user executes command \"length\""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 2.Logic class calls Parser class through command `parserCommand(\"length\")`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 3. Parser class calls LengthCommand to query the size of addressbook."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 4. The successful execution returns the length of the address book."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".Sequence Diagram for getting address book length"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "image::LengthCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "//@@author liguanlong"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d Login/Register/Logout Feature"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "The login/register/logout mechanism is facilitated by `AccountManager`, it implements the following operations:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `AccountManager()` -- The constructor for the class `AccountManager`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `getLoginStatus()` -- Returns the login status to the caller."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `getCurrentAccount()` -- Returns the username of the account currently using the application."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `accountCommandHandler(String)` -- Handles the user input, checks if there is a match for username and password match if the user\u0027s command is `login`, trys to regster a new account if the user\u0027s command is `register`, returns a string to indicate the outcome."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `loadAccounts()` -- Loads all the account information from local storage."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `storeAccounts()` -- Stores all the account information to local storage."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `logout()` --  Logs the user out of the system."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `setLoginStatus(boolean)` -- Sets the login status according to the parameter."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `register(String, String)` -- Creates a new account for user."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `weakPassword(String)` -- Check if the password contains at least one lowercase letter, one uppercase letter and one digit."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `doesNotContainDigit(String)` -- Check if the string contains digit, works as a utility function for weakPassword(String)."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Given below is an example usage scenario and how the login/register/logout mechanism behaves at each step."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Step 1. The user launches the application. The `AccountManager` will be initialized, `loadAccounts` will be called to load all the accounts to a `HashMap` from local storage, the `HashMap` is used to keep track of all the account information."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Step2. The user executes `register Doe Doe123` command to register a new account with username Doe and password Doe123. The new username and the corresponding password will be temporarily put into the `HashMap`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Step3. The user executes `login Doe Doe123` command to login to the system, if the login is successful, `setLoginStatus` will be called to set the login status accordingly, and the user will then be able to start using the addressbook."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Step4. The user executes some other commands."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Step5. The user executes `logout` command, `setLoginStatus` will be called to set the login status accordingly, and the user will be directed back to the login page."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Step6. The user terminates the program, `storeAccounts` will be called to store all the account information in the HashMap to the local storage."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "The following sequence diagram shows how the login/register/logout mechanism works:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "image:https://raw.githubusercontent.com/cs2113-ay1819s2-t11-2/main/master/docs/images/Login_Register_Logout_Sequence_Diagram.png[width\u003d800,height\u003d]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "The following activity diagram explains the behaviour of the system during the execution of login/register/logout command."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "image:https://raw.githubusercontent.com/cs2113-ay1819s2-t11-2/main/master/docs/images/Login_Register_Logout_dialog_map.png[width\u003d800,height\u003d]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to keep account information during runtime"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* **Alternative 1 (current choice):** Use a HashMap to keep the username password pairs."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Pros: Higher performance, O(1) for most of the operations."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Cons: Larger memory overhead."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* ** Alternative 2:** Use a TreeMap to keep the username password pairs. "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Pros: Lower performance, O(log(n)) for most of the operations."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Cons: Less memory overhead."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "HashMap is used because memory is not a serious issue for this program as the program is not memory consuming in nature."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "  "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: File format to keep account information in local storage"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* **Alternative 1 (current choice):** Use a Java Properties file to store the username password pairs ."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Pros: High readability, easy to implement as it only requires java.util package to work, small in file size."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Cons: Does not support hierarchical data structure well."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* **Alternative 2:** Use a JSON file to store the username password pairs ."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Pros: Key-vaule pair format, similar to HashMap."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Cons: Large in file size."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* ** Alternative 3:** Use a CSV file to store the username password pairs."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Pros: Small in file size."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Cons: Complicated to convert to/from HashMap. "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* ** Alternative 4:** Use a XML file to store the username password pairs"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Pros: Compatible with HashMap. "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Cons: Large in file size."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author matthiaslum"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d Add Doctor feature"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "the add doctor feature facilitated by the `Doctor` class, it implements the following operations:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `Doctor(String)` -- The constructor for the class `Doctor`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `toString()` -- Returns a String containing the name of the patient\u0027s doctor."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `isValidName()` -- Checks if the date is alphanumeric."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `equals(Object)` -- Checks if two patients\u0027 doctors are equal."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "In addition to the Appointment class, we update the ReadOnlyPerson interface and the Person class (which implements the interface) to ensure that every Person object is constructed with an Appointment class. To be specific, the following operations are added or updated."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `Person(Doctor doctor)` --  The class `Person` now requires a Doctor object during its construction."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getDoctor()` -- The class `Person` implements a method that returns the Doctor object of a Person."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getAsTextShowAll()` -- This operation is updated to allow a person\u0027s doctor to be printed when an addresbook\u0027s lastShownList is printed onto the UI."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The example usage scenario is similar to the scenario of the Add appointment feature below."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d Add Appointment feature "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "the add appointment feature is facilitated by the `Appointment` class, it implements the following operations:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `Appointment(String)` -- The constructor for the class `Appointment`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `toString()` -- Returns a String containing the date of the appointment."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `isValidDate()` -- Checks if the date is alphanumeric."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `equals(Object)` -- Checks if two appointment dates are equal."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "In addition to the Appointment class, we update the ReadOnlyPerson interface and the Person class (which implements the interface) to ensure that every Person object is constructed with an Appointment class. To be specific, the following operations are added or updated."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `Person(Apppointment appointment)` --  The class `Person` now requires an Appointment object during its construction."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getAppointment()` -- The class `Person` implements a method that returns the Appointment object of a Person."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getAsTextShowAll()` -- This operation is updated to allow a person\u0027s appointment date to be printed when an addresbook\u0027s lastShownList is printed onto the UI."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Next, the parser is updated to recognize user input corresponding to the Appointment object of a person. It works together with an updated `Add` Command. When adding a new person through the add command, the user has to write `m/APPOINTMENTDATE\u0027 to signify the `Appointment` portion of a `Person`. "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Given below is an example usage scenario and how the `Appointment` feature is incorporated at each step."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 1. The user executes command `Add NAME [p]p/PHONE [p]e/EMAIL [p]a/ADDRESS m/APPOINTMENT [t/TAG]...\\n\\t\"`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 2. The parser parses the user command, verifying that the APPOINTMENT is of the 24 hour format YYYY MM DD HH MM. Then, it creates the relevant object for `Appointment`, `Address` etc, and a new `Person` object is constructed. The `Logic` class executes the `AddCommand` with the prepared arguments."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 3. The `Addressbook` tries to add the new person into the `uniquePersonList`. But first, the `uniquePersonList` checks if the new Person object is a duplicate of an existing Person object in the Addressbook. If the Person is not a duplicate, it is added into the Addresbook and the Addressbook is saved. Note that two patients cannot have the same appointment timing with the same doctor."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 4. The successful execution returns a MESSAGE_SUCCESS along with the added person. The MainWindow displays the result and prints the added person into the GUI."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d DoctorAppointments feature"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "This is a new feature, that is executed as `appointment DOCTORNAME`. It finds all Persons in the addressbook that are assigned to a doctor with the same name as DOCTORNAME. Then, it prints out a list of them sorted according to Appointment dates. The first person from the top has the earliest appointment date. Let us split the implementation documentation into two parts. (1) Returning a list of persons corresponding to the user input\u0027s name of the doctor in chronological order. (2)Printing only the relevant information of these persons in a neat manner similar to a time-table."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "For the first part, finding and sorting the list of corresponding persons is facilitated by the `DoctorAppointmentsCommand` class and the `Person` class. The following operations are implemented in the `DoctorAppointmentsCommand` class."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `execute()` -- Upon execution, a new `Indicator` class stores information indicating that `DoctorAppointmentsCommand` is the most recently invoked command. Then, the following method `getPersonsWithName(doctor)` is called."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getPersonsWithName(doctor)` -- This method is adapted from the `FindCommand` class method. In addition to the original command, this method utilizes the package on LocalDate and Collections.Sort. This method updates a `LocalDateTime` field in a `Person` object (to be explained in the next paragraph). This method also calls SortDate() which is a separate sorting class that helps to compare `LocalDate` dates and sort them based on chronological order. This method returns an ArrayList of Persons that have the doctor\u0027s name corresponding to the user input\u0027s doctor. The ArrayList is sorted based on their appointment dates."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "We update the `Person` class to contain an additional field `LocalDateTime date` which is originally set to null for every person in the addressbook. Then the following getters and setters are implemented in the `Person` class and their method signatures are updated in the `ReadOnlyPerson` interface."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getLocalDateTime()`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `setLocalDateTime()`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Given below is an example usage scenario and how the Persons corresponding to a certain doctor are sorted and listed in Chronological order."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 1. The user executes command `appointment DOCTORNAME\"`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 2. The parser parses the command and prepares the keyword arguments for the `DoctorAppointmentsCommand` class. "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 3. `DoctorAppointmentsCommand` is executed and the `Indicator` class records that this is the most recently invoked command. The execute command calls `getPersonsWithName(doctor)`. For each Person in the existing addressbook, if the Person\u0027s doctor corresponds to DOCTORNAME, the `LocalDateTime` class parses the person\u0027s appointment date, and the Person\u0027s `LocalDateTime` date field is set to be the parsed appointment date."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 4. The person is added into the matchedPersons list."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 5. The list of matchedPersons are sorted based on the `LocaldateTime` date field in each person."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 6. The sorted list of matchedPersons are returned and displayed in a table format (explained in second part)"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "For the second part of the implementation, we discuss how the list of matchedPersons is formatted to print in a certain manner. To facilitate the printing, we mainly update the format() method of the UI `Formatter` class. "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "To facilitate the update, a new `Indicator` class is created and a new method is implemented in the `ReadonlyPerson` interface."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `Indicator.setLastCommand(String)` --when called, stores a String that records the last invoked user Command."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `Indicator.getLastCommand()` --when called, provides information on the last invoked user Command."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getAsTextNameDateDoctor()` --This is a method of the `ReadOnlyPerson` interface. It is a new String builder that builds a String of information about the Person. The information contains only the name and appointment date of the person. The String is padded on the right with whitespace to ensure a tabular format."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The UI `Formatter` is updated in the following way."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `format(Persons)` --Checks if the last invoked user Command is the `DoctorAppointmentsCommand`. If it is, calls the new String builder method `getAsTextNameDateDoctor()` for each Person to be formatted."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Given below is an example usage scenario and the formatter formats the Person to be printed in a tabular format. It continues from Step 6 above. "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 7. When the display method is called in step 6, the format method in `Formatter` is called."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 8. A separate String builder method getAsTextNameDateDoctor() is called, and the String is padded on the right by whitespace. "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 9. The `MainWindow` displays the newly formatted Persons in neat rows, displaying only the relevant information on Name and Appointment Date."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The sequence diagram below shows the interactions between the various classes when the `appointment DOCTOR` command is executed."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".Appointment Diagram"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "image::DoctorAppointmentsFeature.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author matthiaslum"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d ApptDate feature"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "This feature displays a doctor\u0027s appointment timetable for a specific day."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "This is a new feature, that is executed as `apptDate DOCTORNAME m/YYYY MM DD`."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "When the parser parses the user command that starts with the `apptDate` commandword, it instantiates an object of the class ApptDate."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The user specfied date and doctor\u0027s name are stored as static fields in the class."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Next, the logic class calls this object to be executed."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The method `execute()` is similar in implementation to the `execute()` method of the previous appointment feature."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "In summary, the `execute()` method calls the method `getPersonsWithSameDoctorSameDate()`."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "`getPersonsWithSameDoctorSameDate()` finds all Persons in the addressbook that have the same doctor as the user\u0027s specified doctor."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Then, it traverses the lists of matchedPersons to select only the Persons that have the same appointment date as the user specified date that is of the format YYYY MM DD."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Then, it returns a matchedPersonsList that is used for the Command Result and for the last shown list."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "At the same time, we build a long string called `timetable`. This formatting of this string is tedious."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Some methods involve padding of whitespaces and printing out time-slots of 15min starting from 6am."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "If anyone is confused by the \u0027for\u0027 loop, the iterator \u0027i\u0027 signifies the number of minutes that have elapsed since 00:00 hours of that day."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "We convert the appointment time of each matchedPerson into the number of minutes from 00:00."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "If the iterator \u0027i\u0027 matches the appointment timing of a Person, we print out the Person beside that time-slot."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The UI `Formatter` facilitates the printing of timetable."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `format(Persons)` --Checks if the last invoked user Command is the `ApptDateCommand`. If it is, it retrieves the timetable from the `ApptDate` class,"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "and prints out the neatly formatted timetable."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "* hospital doctor who has several long-term patients he/she has to take care of."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "* manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* To reduce inefficient communication between patients and doctors, so as to reduce the chances of patients having delays in treatment."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "//@@author liguanlong"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|`* * *` |doctor |keep track of current and past appointments with patients that I have for the day |be on time to deliver treatment"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|`* * *` |doctor |have a custom-made address book  |filter out the patients that are not affiliated to me"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|`* * *` |doctor |sort my patient according to my desired attribute |prioritize the allocation of my resources"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|`* * *` |doctor |have good authentication |my patients’ data are protected and not easily disclosed"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|`* * *` |doctor |be able to directly refer patients to respective specialists |focus on attending to patients with medical conditions relevant to my expertise, and ensure that others are properly referred to the correct doctor to attend to their specific medical condition(s)."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|`* * *`|doctor |print out a list of all patients who have appointments with me|keep track of my appointments"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|`* *`|doctor |print my timetable of appointments neatly| manage my appointment more conveniently"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|`* *` |doctor |track the status of all my patients |know the stage of treatment in which the patient is undergoing"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|`* *` |doctor |indicate my patients\u0027 appointment date when I add him/her into addressbook |keep track of their appointment date"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC01 - Login"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". The user opens the addressbook"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". Addressbook prompts’ user for username and password"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". The user inputs the username/password and hits enter"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". Addresbook authenticates the user and displays welcome address"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC02 - Sort entries"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". User requests to sort the list in address book based on specified attribute."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook sorts and prints out all entries sorted by attribute specified by user."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* 1a. The format entered by the user is incorrect."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a1. AddressBook shows an error message and prints the format for user to follow."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a2. User re-enters new patient\u0027s particulars."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* Steps 1a1 - 1a2 are repeated until the correct format is entered by the user."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC03 - Refer patient"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". The user requests to refer patient to another doctor."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook finds patient from the list of entries, and extracts all the relevant particulars of the target patient."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". Addressbook updates the extracted particulars with the new doctor\u0027s name and patient tag."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook deletes the old patient entry from the main list and adds the newly updated one into the main list."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* 1a. The format entered by the user is incorrect."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a1. AddressBook shows an error message and prints the format for user to follow."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a2. User re-enters new patient\u0027s particulars."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* Steps 1a1 - 1a2 are repeated until the correct format is entered by the user."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* 1b. There are multiple entries in the addressbook with the same patient name(s) entered by the user."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1b1. AddressBook prints out all similar patient entries and prompts users to to identify the correct patient."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1b2. User enters correct patient\u0027s full name."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* 1c. The format of the doctor\u0027s name entered by the user is incorrect (non-alphanumeric)."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1c1. AddressBook shows an error message and reminds users that doctor names can only contain alphanumeric characters."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1c2. User enters a valid doctor\u0027s name that follows the condition above."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC04 - Manage appointments"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". The user types a command appointments in the command line"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". The system finds all scheduled appointments and prints them to the screen in chronological order"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". If possible, can print a literal timetable on the screen"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". The expired appointments should be excluded from the timetable if possible"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC05 - Add patient"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". User adds a patient in the address book."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook adds patient to address book and prints the newly added patient\u0027s details."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* 1a. The format entered by the user is incorrect."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a1. AddressBook shows an error message and prints the format for user to follow."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a2. User re-enters new patient\u0027s particulars."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* Steps 1a1 - 1a2 are repeated until the correct format is entered by the user."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC06 - Length of address book"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". User requests for length of address book."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook gets the current length and prints out the number of entries."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC07 - List all entries"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". User requests for list of address book."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook prints out all entries in the address book with their respective particulars that are not private."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC08 - Find patients"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". User requests to find all patients containing any keyword in their name from the list."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook looks through the list and prints out all entries with the keyword specified by user."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* 1a. The format entered by the user is incorrect."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a1. AddressBook shows an error message and prints the format for user to follow."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a2. User re-enters new patient\u0027s particulars."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* Steps 1a1 - 1a2 are repeated until the correct format is entered by the user."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC09 - Delete patient"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". User requests to list patients"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook shows a list of patients"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". User requests to delete a specific patient in the list"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook deletes the patient."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC10 - View patient by index"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". User requests to view patient particulars at a certain index in the list."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook prints out patient with his/ her respective particulars that are not private at the specified index."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* 1a. The format entered by the user is incorrect."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a1. AddressBook shows an error message and prints the format for user to follow."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a2. User re-enters new patient\u0027s particulars."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* Steps 1a1 - 1a2 are repeated until the correct format is entered by the user."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC11 - View all particulars of a patient by index"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". User requests to view patient with ALL particulars at a certain index in the list."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook prints out patient with his/ her respective particulars - including particulars that are private - at the specified index."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* 1a. The format entered by the user is incorrect."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a1. AddressBook shows an error message and prints the format for user to follow."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a2. User re-enters new patient\u0027s particulars."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* Steps 1a1 - 1a2 are repeated until the correct format is entered by the user."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC12 - Clear all entries"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". User requests for list of address book."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook deletes all entries in the address book."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC13 - Exit"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". User requests to exit AddressBook."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook cloese and quits the application."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ". Should work on any \u003c\u003cmainstream-os, mainstream OS\u003e\u003e as long as it has Java 9 or higher installed."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ". Should be able to hold up to 1000 persons."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ". Should come with automated unit tests and open source code."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ". Should favor DOS style commands over Unix-style commands."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with welcome message. The window size may not be optimum."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "//@@author WuPeiHsuan"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d\u003d Sort feature"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Prerequisites: Please add some patient entries. +"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Test case 1: `sort name` +"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected: Prints out a list of all patients sort by name in lexicographically order. +"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Test case 2: `sort status` +"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected: Prints out a list of all patients sort by status according to the degree of urgency. +"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Test case 3: `sort appointment` +"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected: Prints out a list of all patients sort by appointment in chronological order. +"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Other incorrect commands to try: `sort`, `sort abc` + "
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected: An error message: `Invalid command format!` is displayed on the screen, with the displays the correct format below. "
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d\u003d Add Status feature"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Prerequisites: The user has logged in to the system."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Test case 1: `add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2019 12 11 12 30 d/DoctorTan s/Observation` + "
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected: New person added: John Phone: 98765432 Email: john@gmail.com Address: John street, block 123, #01-01  Appointment: 2019 12 11 12 30 Doctor: DoctorTan Status: Observation Tags: "
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Test case 2: `add Amy p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2019 12 11 12 30 d/DoctorTan s/Waiting for Surgery` + "
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected:  New person added: Amy Phone: 98765432 Email: john@gmail.com Address: John street, block 123, #01-01  Appointment: 2019 12 11 12 30 Doctor: DoctorTan Status: Waiting for Surgery Tags: "
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Other incorrect commands to try:  `add Sherry p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2019 12 11 12 30 d/DoctorTan s/nothing` +"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected: An error message: Status should be Observation/ Critical / Waiting for Surgery / Therapy / Life Support / Waiting for doctor appointment"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "//@@author "
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "//@@author liguanlong"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d Login/Register/Logout Feature "
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "The username password pair: `Admin` `Admin123` is registered by default for testing purpose. (This is only valid for the user who has cloned our project repository and starts the application using IDE. For the standalone jar file there is no such default account, and user will have to register a new account before starting to use the application.)"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ". Login"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Prerequisites: The user has not logged in to the system."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Test case: `login Admin Admin321` + "
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: An error message: `Invalid username or password, please try again` is displayed on the screen."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Test case: `login Admin Admin123` +"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: Login succeed."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Other incorrect login commands to try: `login`, `login Admin Admin123 Admin123` +"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: Helping message is displayed on the screen."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ". Register"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Prerequisites: The user has not logged in to the system."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Test case: `register newuser 12345` +"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: An error message: `The password should contain at least one lowercase letter, one uppercase letter, and one digit` is displayed on the screen."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Test case: `register Admin Password123` +"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: An error message: `The username has already been registered, please try a new username` is displayed on the screen."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Test case: `register newuser New123` +"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: Registration succeed."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Other incorrect register commands to try: `register`, `register Admin Admin123 Admin123` +"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: Helping message is displayed on the screen."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ". Logout"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Prerequisites: The user has already logged in to the system."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Test case: `logout` +"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: The user is directed back to the login page."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Other incorrect logout commands to try: `logout123` +"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: Helping message is displayed on the screen."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Refer feature"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Please ensure the following entries have been added into the addressbook before trying the test cases below. If there are not entries in the addressbook, the \u0027no such person\u0027 execption will be shown."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". refer NAME [MORE_NAMES]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Prerequisites: please add the following patient entries being proceeding: +"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2019 12 11 12 30 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add John Doe p/98765432 e/johnd@gmail.com a/JohnD street, block 123, #01-01 m/2019 12 11 12 00 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add John Teo p/98765432 e/johnt@gmail.com a/JohnT street, block 123, #01-01 m/2019 12 11 11 30 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Shawn Tan p/98765432 e/shawnt@gmail.com a/Shawn street, block 123, #01-01 m/2019 12 11 11 00 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Shawn Doe p/98765432 e/shawnd@gmail.com a/ShawnD street, block 123, #01-01 m/2019 12 11 10 30 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Shawn Teo p/98765432 e/shawnteo@gmail.com a/ShawnT street, block 123, #01-01 m/2019 12 11 10 00 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Abigail p/98765432 e/shawnteo@gmail.com a/ShawnT street, block 123, #01-01 m/2019 12 11 09 30 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Abigail Doe p/98765432 e/shawnteo@gmail.com a/Abigail street, block 123, #01-01 m/2019 12 11 09 00 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Betsy Crowe pp/1234567 e/betsycrowe@gmail.com pa/Crowe Newgate m/2019 11 14 08 30 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Betsy Doe pp/1234567 e/betsycrowe@gmail.com pa/Doe Newgate m/2019 11 14 08 00 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 1: `refer` + "
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: An error message: `Invalid command format!` is displayed on the screen, with the displays the correct format below. +"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 2: `refer Shawn` +"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: Prints out full particulars of all 3 patients with the name of `Shawn`, followed by a message: `3 similar entries have been found. Please re-enter patient\u0027s FULL NAME to refer` to prompt for a re-entry of the ful name of the target patient. +"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 3: `refer Shawn Doe` +"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: Prints out success message: `Patient Shawn Doe has been successfully referred to Dr Seuss!! :D`, followed by the patient\u0027s updated entry below. +"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 4: `refer John` +"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: Prints out success message: `Patient John has been successfully referred to Dr Seuss!! :D`, followed by the patient\u0027s updated entry below.  +"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "This is an edge case test. It is a successful refer (unlike test case 2) because there is an entry `John` without any last names in this case - this leads to the patient name being an exact and unique match of the keyword inputted unlike test case 2 where every `Shawn` has a last name (therefore no patient name \u003d\u003d keyword inputted)."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 5: `refer d/Dr Elizabeth p/John` +"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: Prints out success message: `Patient John has been successfully referred to Dr Elizabeth!! :D`, followed by the patient\u0027s updated entry below.  +"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 6: `refer Abigail` +"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: Prints out success message: `Patient Abigail has been successfully referred to Dr Elizabeth!! :D`, followed by the patient\u0027s updated entry below.  +"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The default doctor is Dr Seuss. However, once a new doctor of preferrence is introduced (Dr Elizabeth in this case), the new doctor will be the new default foctor for subsequent refer commands that do not specify a change in referral doctor. Please note that it is part of the feature\u0027s design and not a bug :)."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 7: `refer d/Dr. Tan p/Abigail` +"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "`Doctor\u0027s names should only contain spaces and/or alphanumeric characters +"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Special characters like . ! @ # , etc are not allowed! +"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Please re-enter with an appropriate doctor name.`"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "shawn-t"
        },
        "content": " "
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Length feature"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". length"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Prerequisites: NIL"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 1: `length`"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected:  `Length of the address book is: 10`"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The length will be 10 if the 10 test case inputs from the previous section (refer feature) is not cleared."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 2: `delete 1` +"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "`length`"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected:  `Length of the address book is: 9`"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 3: `clear` +"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "`length`"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected:  `Length of the address book is: 0`"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author matthiaslum"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d Add Appointment feature"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". Invalid appointment value"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Prerequisites: please ensure that the addressbook is cleared. You can do this by the `clear` command. +"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 1: `add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/1800 12 11 12 30 d/DoctorTan s/Observation` +"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: The test case fails because appointments earlier than the current time are not allowed. +"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "`Appointment timings must not be earlier than current time, +"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "must be in the 24hr format of yyyy MM dd hh mm. +"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Additionally appointment slots are in blocks of 15min. +"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Thus, the time in minutes must be 00, 15, 30 or 45. No appointments earlier than 6am.` +"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 2: `add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2020 30 d/DoctorTan s/Observation` +"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: The test case fails because it does not follow the 24hr format required. +"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "that is similar to that of test case 1. +"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 3: `add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2020 100 11 12 30 d/DoctorTan s/Observation` +"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: The test case fails because 100 is not a valid month value. +"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "that is similar to that of test case 1. +"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 4: `add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2020 01 11 01 30 d/DoctorTan s/Observation` +"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: The test case fails because appointments before 6am are not allowed. +"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "that is similar to that of test case 1. +"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 5: `add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2020 01 11 08 22 d/DoctorTan s/Observation` +"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: The test case fails because appointments must be in blocks of 15min slots. 22minutes is not allowed. +"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "that is similar to that of test case 1. +"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". Invalid Doctor\u0027s name"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Prerequisites: please ensure that the addressbook is cleared. You can do this by the `clear` command. +"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 1: `add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2020 12 11 12 30 d/Docto!Tan s/Observation` +"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: The test case fails because the doctor\u0027s name must be alphanumeric. +"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "`Doctor\u0027s names should only contain spaces and/or alphanumeric characters +"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Special characters like . ! @ # , etc are not allowed! +"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Please re-enter with an appropriate doctor name.` +"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". Same appointment timing with the same doctor"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Prerequisites: please ensure that the addressbook is cleared. You can do this by the `clear` command. +"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Then, add the following person before proceeding. +"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "`add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2020 01 11 08 00 d/DoctorTan s/Observation` +"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 1: `add Xiao Ming p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2020 01 11 08 00 d/DoctorTan s/Observation` +"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: Even though Xiao Ming is a different person, the test case fails because two persons cannot have an appointment with the same doctor at the same time +"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Prints out `This person already exists in the address book, or another person has the same appointment time` +"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". Same appointment timing with another Person, but different doctor"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Prerequisites: please ensure that the addressbook is cleared. You can do this by the `clear` command. +"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Then, add the following person before proceeding. +"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "`add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2020 01 11 08 00 d/DoctorTan s/Observation` +"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 1: `add Xiao Ming p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2020 01 11 08 00 d/Dr Seuss s/Observation` +"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: The test case succeeds and the `New Person added...` message is printed. +"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". Duplicate person details but different appointment"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Prerequisites: please ensure that the addressbook is cleared. You can do this by the `clear` command. +"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Then, add the following person before proceeding. +"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "`add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2020 01 11 08 00 d/DoctorTan s/Observation` +"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 1: `add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2020 01 20 08 00 d/DoctorTan s/Observation` +"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: The test case fails because the person John has the same name, phone and email as an existing person."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Prints out `This person already exists in the address book, or another person has the same appointment time` +"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". Successful adding of person"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Prerequisites: please ensure that the addressbook is cleared. You can do this by the `clear` command. +"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 1: `add Xiao Ming p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2020 01 11 08 00 d/Dr Seuss s/Observation` +"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: The test case succeeds and the `New Person added...` message is printed. +"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d DoctorAppointments feature"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". appointment command"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Prerequisites: please clear the addressbook and add the following patient entries being proceeding: +"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2019 12 11 12 30 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "add Xiao ming p/98765432 e/johnd@gmail.com a/JohnD street, block 123, #01-01 m/2019 12 11 12 00 d/doctor tan s/Observation +"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "add kumar  p/98765432 e/johnt@gmail.com a/JohnT street, block 123, #01-01 m/2019 12 11 11 30 d/DOCTOR TAN s/Observation +"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "add Shawn Tan p/98765432 e/shawnt@gmail.com a/Shawn street, block 123, #01-01 m/2019 12 11 11 00 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 1: `appointment` +"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "`Parameters: DOCTOR_NAME +"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Example: appointment DoctorTan.` +"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 2: `appointment DoctorTan` +"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: A table with header columns `Name`,   `Date`  and `Doctor.` +"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Shawn Tan and John should be inside the table. +"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 3: `appointment doctor tan` +"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: A table with header columns `Name`,   `Date`  and `Doctor.` +"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Xiao ming should be inside the table. +"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 4: `appointment DOCTOR TAN` +"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: A table with header columns `Name`,   `Date`  and `Doctor`. +"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Kumar should be inside the table. +"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d ApptDate feature"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". apptDate command"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Prerequisites: please clear the addressbook and add the following patient entries being proceeding: +"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2019 12 11 12 30 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "add Xiao ming p/98765432 e/johnd@gmail.com a/JohnD street, block 123, #01-01 m/2019 12 11 12 00 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "add Shawn Tan p/98765432 e/shawnt@gmail.com a/Shawn street, block 123, #01-01 m/2019 12 11 11 00 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "add kumar  p/98765432 e/johnt@gmail.com a/JohnT street, block 123, #01-01 m/2020 12 11 11 30 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 1: `apptDate` +"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "`Parameters: NAME m/APPOINTMENT +"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Example: appointment DoctorTan.` +"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 2: `apptDate DoctorTan` +"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "`Parameters: NAME m/APPOINTMENT +"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Example: appointment DoctorTan.` +"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 3: `apptDate DoctorTan m/30November` +"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "`Dates must be in the 24hr format of yyyy MM dd.` +"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 4: `apptDate DoctorTan m/2020 12 11` +"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "`Doctor\u0027s names should only contain spaces and/or alphanumeric characters +"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Special characters like . ! @ # , etc are not allowed! +"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Please re-enter with an appropriate doctor name.` +"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 5: `apptDate DoctorTan m/2019 12 11` +"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: `This is your Appointment timetable for the date: 2019-12-11` message followed by timeline +"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Shawn, Xiao ming and John should appear in the timeline, following that that order."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 6: `apptDate DoctorTan m/2020 12 11` +"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: `This is your Appointment timetable for the date: 2019-12-11` message followed by timeline +"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Only Kumar should appear in the timeline at the 11:30 time-slot."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "liguanlong": 119,
      "shawn-t": 464,
      "-": 125,
      "matthiaslum": 290,
      "WuPeiHsuan": 92
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "This product is not meant for end-users and therefore there is no user-friendly installer."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Please refer to the \u003c\u003cDeveloperGuide#setting-up, Setting up\u003e\u003e section to learn how to set up the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Starting the program"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ". Find the project pane (usually located at the left side)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ". Open up `src/seedu.addressbook` folder"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ". Right click on `Main`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Run Main.main()`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". The GUI should appear in a few seconds"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image:https://raw.githubusercontent.com/cs2113-ay1819s2-t11-2/main/master/docs/images/Ui.png[width\u003d800]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Help is also shown if you enter an incorrect command e.g. `abcd`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "//@@author liguanlong"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d Login to the system : `login`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Allow the user to login to the system +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Format: `login username password`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Login is required in order to use the address book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `login Admin Admin123` +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Logged in as Admin if the account and password are correct."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d Register a new account: `register`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Allow the user to register a new account in the system +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Format: `register username password`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "The password should contain at least one lowercase letter, one uppercase letter and one digit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `register Doe Doe12345` +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "A new account is registered if the username chosen has not been registered before."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d Logout from the system : `logout`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Allow the user to logout from the system +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Format: `logout`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `logout` + "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "The user will be logged out."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Format: `add NAME [p]p/PHONE_NUMBER [p]e/EMAIL [p]a/ADDRESS m/APPOINTMENTDATE d/DOCTORNAME s/STATUS [t/TAG]...`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Words in `UPPER_CASE` are the parameters, items in `SQUARE_BRACKETS` are optional,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "items with `...` after them can have multiple instances. Order of parameters are fixed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author matthiaslum"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Note that the appointment date must be in the format of YYYY MM DD HH MM, in other for the DoctorAppointment Command to work."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The hour and minute follows the 24hour clock format. Appointment timings must be in blocks of 15minutes. The accepted minutes are 00, 15, 30, 45."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "No appointments are allowed before 8am or before system current time. Incorrect time formats will throw an error in parsing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Appointments with the same doctor at the same timing is not allowed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The doctor\u0027s name is case sensitive."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "The status must be any of following status: Critical / Waiting for Surgery / Life Support / Waiting for doctor appointment / Therapy / Observation."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Put a `p` before the phone / email / address prefixes to mark it as `private`. `private` details can only"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "be seen using the `viewall` command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Persons can have any number of tags (including 0)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `add John Doe p/98765432 e/johnd@gmail.com a/John street, block 123, #01-01 m/2020 12 11 14 30 d/DoctorTan s/Observation`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `add Betsy Crowe pp/1234567 e/betsycrowe@gmail.com pa/Newgate Prison m/2020 11 04 08 00 d/DoctorTan s/Observation t/criminal t/friend`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d Getting length of the address book : `length`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Shows the number of entries in the address book at the point of query. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Format: `length`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d Referring a patient to a doctor: `refer`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Refers a patient from the address book to a doctor. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Note: This command is overloaded with two formats."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Format 1: `refer NAME [MORE_NAMES]` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Refers target patient to a default doctor and shows a success message with patient\u0027s updated particulars if there is only one unique entry. If there are multiple entries, all patient entries with the target keywords in the addressbook will be printed and user will be prompted to identify the correct patient. If target patient does not exist in the addressbook, an error message will be printed. +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[Note]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Default doctor is the last specified doctor or `Dr Seuss` if never specified before previously."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `refer John` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `refer John Doe` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `refer Doe`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Format 2: `refer d/ DOCTORNAME p/NAME [MORE_NAMES]` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Refers target patient to a doctor specified by the user. Format 2 works exactly like format 1. If input contains an invalid doctor name (non-alphanumeric), an invalid command format message will be printed. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[Note]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "When a refer is successful using this format, the default doctor would be updated as this new doctor specified in the latest format 2 entry."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `refer d/DoctorTan p/John Doe` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `refer d/Dr Tan p/John Doe` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `refer d/Dr Tan p/Doe`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "//@@author WuPeiHsuan"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d Listing all persons in sorted order : `sort`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Shows a list of all persons sorted by desired attribute in alphabetical order in the address book. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Desired attribute must be name, appointment or status. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Format: `sort DESIRED_ATTRIBUTE`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `sort name` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Shows a list of all persons sorted by name in alphabetical order in the address book. "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `sort status` +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Shows a list of all persons sorted by status according to the degree of urgency in the address book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "The sequence of the status in this order is as follows: Critical, Waiting for Surgery, Life-support, Waiting for doctor appointment, Therapy and Observation."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `sort appointment` +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Shows a list of all persons sorted by appointment date in chronological order in the address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author matthiaslum"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d Listing all appointments of a Doctor : `appointment`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Displays a list of all patients who have appointments with a specific doctor."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The list of persons are sorted by on chronological order of their appointment dates."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "For easy-readability, only the name and appointment date of each person is displayed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Format: `appointment DOCTOR_NAME`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `appointment DoctorTan` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Shows a list of all patients who have appointments with DoctorTan."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d Printing out the timetable (day) of a Doctor : `apptDate`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Displays the doctor\u0027s appointment timetable for a specific day."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "A nice timeline will be shown. Can be used for dates older than the current date. (appointment history)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Each time slot is 15 minutes. The timeline shows all the slots in the day, and indicates which slots are available or occupied."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Format: `apptDate DOCTOR_NAME m/YYYY MM DD`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `apptDate DoctorTan m/2020 11 04` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Shows a list of all patients who have appointments with DoctorTan on 4th of November."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d Finding all persons containing any keyword in their name: `find`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. Irreversible. +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d View non-private details of a person : `view`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Displays the non-private details of the specified person. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Views the person at the specified `INDEX`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "`view 2` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "Views the 2nd person in the address book."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "`view 1` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Views the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d View all details of a person : `viewall`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Displays all details (including private details) of the specified person. +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `viewall INDEX`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Views all details of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "`viewall 2` +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Views all details of the 2nd person in the address book."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "`viewall 1` +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Views all details of the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually. Address book data are saved in a file called `addressbook.txt` in the project root folder."
      }
    ],
    "authorContributionMap": {
      "liguanlong": 43,
      "shawn-t": 31,
      "-": 134,
      "matthiaslum": 43,
      "WuPeiHsuan": 20
    }
  },
  {
    "path": "docs/team/liguanlong.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "//@@author liguanlong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d Li Guanlong - Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d PROJECT: Doctor on Call"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Doctor on Call is a desktop address book application designed to facilitate doctors to manage patient information. It aims to reduce the inefficient communication between doctors and patients.The programming language used is Java."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#\u003dundefined\u0026search\u003dliguanlong[the link to the RepoSense report page]]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* *Major enhancement*: added login/register/logout feature to the address book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** What it does: This featrue allows users to register and login using an account, and also allows the user to logout from the system."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Justification: This feature is implemented to ensure authentication."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Project management: "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "*** Set up the organization and main repository for the project group"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "*** Created and wrote the group\u0027s AboutUs and ContactUs page"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "*** Reviewed the Pull requests of other students"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "*** Utilized Java Properties file to store account information"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "---"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d Contributions to the User Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d Login to the system : `login`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Allow the user to login to the system +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Format: `login username password`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Login is required in order to use the address book"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `login Admin Admin123` +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Logged in as Admin if the account and password are correct."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d Register a new account: `register`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Allow the user to register a new account in the system +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Format: `register username password`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "The password should contain at least one lowercase letter, one uppercase letter and one digit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `register Doe Doe12345` +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "A new account is registered if the username chosen has not been registered before."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d Logout from the system : `logout`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Allow the user to logout from the system +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Format: `logout`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `logout` + "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "The user will be logged out."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "---"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d Login/Register/Logout Feature "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "The login/register/logout mechanism is facilitated by `AccountManager`, it implements the following operations:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `AccountManager()` -- The constructor for the class `AccountManager`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `getLoginStatus()` -- Returns the login status to the caller."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `getCurrentAccount()` -- Returns the username of the account currently using the application."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `accountCommandHandler(String)` -- Handles the user input, checks if there is a match for username and password match if the user\u0027s command is `login`, trys to regster a new account if the user\u0027s command is `register`, returns a string to indicate the outcome."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `loadAccounts()` -- Loads all the account information from local storage."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `storeAccounts()` -- Stores all the account information to local storage."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `logout()` --  Logs the user out of the system."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `setLoginStatus(boolean)` -- Sets the login status according to the parameter."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `register(String, String)` -- Creates a new account for user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `weakPassword(String)` -- Check if the password contains at least one lowercase letter, one uppercase letter and one digit."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* `doesNotContainDigit(String)` -- Check if the string contains digit, works as a utility function for weakPassword(String)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Given below is an example usage scenario and how the login/register/logout mechanism behaves at each step."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Step 1. The user launches the application. The `AccountManager` will be initialized, `loadAccounts` will be called to load all the accounts to a `HashMap` from local storage, the `HashMap` is used to keep track of all the account information."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Step2. The user executes `register Doe Doe123` command to register a new account with username Doe and password Doe123. The new username and the corresponding password will be temporarily put into the `HashMap`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Step3. The user executes `login Doe Doe123` command to login to the system, if the login is successful, `setLoginStatus` will be called to set the login status accordingly, and the user will then be able to start using the addressbook."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Step4. The user executes some other commands."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Step5. The user executes `logout` command, `setLoginStatus` will be called to set the login status accordingly, and the user will be directed back to the login page."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Step6. The user terminates the program, `storeAccounts` will be called to store all the account information in the HashMap to the local storage."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "The following sequence diagram shows how the login/register/logout mechanism works:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "image:https://raw.githubusercontent.com/cs2113-ay1819s2-t11-2/main/master/docs/images/Login_Register_Logout_Sequence_Diagram.png[width\u003d800,height\u003d]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "The following activity diagram explains the behaviour of the system during the execution of login/register/logout command."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "image:https://raw.githubusercontent.com/cs2113-ay1819s2-t11-2/main/master/docs/images/Login_Register_Logout_dialog_map.png[width\u003d800,height\u003d]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to keep account information during runtime"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* **Alternative 1 (current choice):** Use a HashMap to keep the username password pairs."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Pros: Higher performance, O(1) for most of the operations."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Cons: Larger memory overhead."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* ** Alternative 2:** Use a TreeMap to keep the username password pairs. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Pros: Lower performance, O(log(n)) for most of the operations."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Cons: Less memory overhead."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "HashMap is used because memory is not a serious issue for this program as the program is not memory consuming in nature."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "  "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: File format to keep account information in local storage"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* **Alternative 1 (current choice):** Use a Java Properties file to store the username password pairs ."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Pros: High readability, easy to implement as it only requires java.util package to work, small in file size."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Cons: Does not support hierarchical data structure well."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* **Alternative 2:** Use a JSON file to store the username password pairs ."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Pros: Key-vaule pair format, similar to HashMap."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Cons: Large in file size."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* ** Alternative 3:** Use a CSV file to store the username password pairs."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Pros: Small in file size."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Cons: Complicated to convert to/from HashMap. "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "* ** Alternative 4:** Use a XML file to store the username password pairs"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Pros: Compatible with HashMap. "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "** Cons: Large in file size."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "---"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "\u003d\u003d\u003d Login/Register/Logout Feature "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "The username password pair: `Admin` `Admin123` is registered by default for testing purpose. (This is only valid for the user who has cloned our project repository and starts the application using IDE. For the standalone jar file there is no such default account, and user will have to register a new account before starting to use the application.)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ". Login"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Prerequisites: The user has not logged in to the system."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Test case: `login Admin Admin321` + "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: An error message: `Invalid username or password, please try again` is displayed on the screen."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Test case: `login Admin Admin123` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: Login succeed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Other incorrect login commands to try: `login`, `login Admin Admin123 Admin123` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: Helping message is displayed on the screen."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ". Register"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Prerequisites: The user has not logged in to the system."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Test case: `register newuser 12345` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: An error message: `The password should contain at least one lowercase letter, one uppercase letter, and one digit` is displayed on the screen."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Test case: `register Admin Password123` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: An error message: `The username has already been registered, please try a new username` is displayed on the screen."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Test case: `register newuser New123` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: Registration succeed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Other incorrect register commands to try: `register`, `register Admin Admin123 Admin123` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: Helping message is displayed on the screen."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ". Logout"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Prerequisites: The user has already logged in to the system."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Test case: `logout` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: The user is directed back to the login page."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ".. Other incorrect logout commands to try: `logout123` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "Expected: Helping message is displayed on the screen."
      }
    ],
    "authorContributionMap": {
      "liguanlong": 198
    }
  },
  {
    "path": "docs/team/matthiaslum.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d Matthias Lum - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ":imagesDir: ../images/matthiaslum.png"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d PROJECT: Doctor on Call"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Doctor on Call is a secure desktop address book application used for doctors to keep records of their patients\u0027 details, status and appointment details. The doctor logs in with his username and password. He interacts with it using a CLI and can  print a timetable showing him a list of all patients who have appointments with him. He is also able to refer patients to other doctors. Do note that the \"person\" in the traditional addresbook shall now be named patient."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* *First Major enhancement*: added an `appointment` feature that generates a timetable for the doctor, displaying in chronological order the appointments he has."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "** What it does: First, it searches for all patients who are patients of this doctor. Then, it sorts them by their appointment date. Lastly, it removes the unimportant information of the patient and displays it on the UI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "** Justification: This feature improves the productivity and time management skills of a doctor because in one glance, he is able to see all the appointments that he has. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "** Highlights: This enhancement required the implementation of new attributes to a person. Two new columns were added to store the information about the doctor and the appointment date. It required changes to the existing add command and in-depth analysis of the parser, logic, person and mainwindow classes. The implementation of this command utilized several methods and packages such as the LocalDateTime package. The methods used to implement the new classes here were studied and used by other team members, especially for the `SortAppointment` command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* *Second Major enhancement*: added a `apptDate` feature that prints out the timetable for a doctor on a specific day."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "** What it does: First, it searches for all patients who are patients of this doctor. Then, it sorts them by their appointment date. Lastly, it traverses this list of persons to select only those who have appointments on the specified date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "** Justification: This feature allows doctor to see a beautiful timeline of his appointments for that day."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "** Highlights: Its a beautiful timeline that was tedious to implement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "** Credits: _{utilized the Java package LocalDateTime, and adapted much code from the name class corresponding to a person}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* *Minor enhancement*: added two new columns that allows a doctor to add appointment date and doctors corresponding to a patient."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#\u003dundefined\u0026search\u003dmatthiaslum[Reposense]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "*** Booked group study rooms for weekly meetings and helped organize timings to meet."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "***Created the two classes on doctor and appointment, of which various other commands and sorts require these classes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "*** Did tweaks to the user guide and developer guide."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "*** Reviewed the Pull requests of other members"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "*** Reported bugs and fixed them for v1.3"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "*** Integrated a java package LocalDateTime."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Adds a person to the address book. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Format: `add NAME [p]p/PHONE_NUMBER [p]e/EMAIL [p]a/ADDRESS m/APPOINTMENTDATE d/DOCTORNAME s/STATUS [t/TAG]...`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "****"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Words in `UPPER_CASE` are the parameters, items in `SQUARE_BRACKETS` are optional,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "items with `...` after them can have multiple instances. Order of parameters are fixed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Note that the appointment date must be in the format of YYYY MM DD HH MM, in other for the DoctorAppointment Command to work."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The hour and minute follows the 24hour clock format. Appointment timings must be in blocks of 15minutes. The accepted minutes are 00, 15, 30, 45."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "No appointments are allowed before 8am or before system current time. Incorrect time formats will throw an error in parsing."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Appointments with the same doctor at the same timing is not allowed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The doctor\u0027s name is case sensitive."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The status must be any of following status: Critical / Waiting for Surgery / Life Support / Waiting for doctor appointment / Therapy / Observation."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Put a `p` before the phone / email / address prefixes to mark it as `private`. `private` details can only"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "be seen using the `viewall` command."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Persons can have any number of tags (including 0)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "****"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `add John Doe p/98765432 e/johnd@gmail.com a/John street, block 123, #01-01 m/2020 12 11 14 30 d/DoctorTan s/Observation`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `add Betsy Crowe pp/1234567 e/betsycrowe@gmail.com pa/Newgate Prison m/2020 11 04 08 00 d/DoctorTan s/Observation t/criminal t/friend`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author matthiaslum"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d Listing all appointments of a Doctor : `appointment`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Displays a list of all patients who have appointments with a specific doctor."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The list of persons are sorted by on chronological order of their appointment dates."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "For easy-readability, only the name and appointment date of each person is displayed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Format: `appointment DOCTOR_NAME`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `appointment DoctorTan` +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Shows a list of all patients who have appointments with DoctorTan."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d Printing out the timetable (day) of a Doctor : `apptDate`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Displays the doctor\u0027s appointment timetable for a specific day."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "A nice timeline will be shown. Can be used for dates older than the current date. (appointment history)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Each time slot is 15 minutes. The timeline shows all the slots in the day, and indicates which slots are available or occupied."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Format: `apptDate DOCTOR_NAME m/YYYY MM DD`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `apptDate DoctorTan m/2020 11 04` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Shows a list of all patients who have appointments with DoctorTan on 4th of November."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author matthiaslum"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d Add Doctor feature"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "the add doctor feature facilitated by the `Doctor` class, it implements the following operations:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `Doctor(String)` -- The constructor for the class `Doctor`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `toString()` -- Returns a String containing the name of the patient\u0027s doctor."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `isValidName()` -- Checks if the date is alphanumeric."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `equals(Object)` -- Checks if two patients\u0027 doctors are equal."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "In addition to the Appointment class, we update the ReadOnlyPerson interface and the Person class (which implements the interface) to ensure that every Person object is constructed with an Appointment class. To be specific, the following operations are added or updated."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `Person(Doctor doctor)` --  The class `Person` now requires a Doctor object during its construction."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getDoctor()` -- The class `Person` implements a method that returns the Doctor object of a Person."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getAsTextShowAll()` -- This operation is updated to allow a person\u0027s doctor to be printed when an addresbook\u0027s lastShownList is printed onto the UI."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The example usage scenario is similar to the scenario of the Add appointment feature below."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d Add Appointment feature"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "the add appointment feature is facilitated by the `Appointment` class, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `Appointment(String)` -- The constructor for the class `Appointment`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `toString()` -- Returns a String containing the date of the appointment."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `isValidDate()` -- Checks if the date is alphanumeric."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `equals(Object)` -- Checks if two appointment dates are equal."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "In addition to the Appointment class, we update the ReadOnlyPerson interface and the Person class (which implements the interface) to ensure that every Person object is constructed with an Appointment class. To be specific, the following operations are added or updated."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `Person(Apppointment appointment)` --  The class `Person` now requires an Appointment object during its construction."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getAppointment()` -- The class `Person` implements a method that returns the Appointment object of a Person."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getAsTextShowAll()` -- This operation is updated to allow a person\u0027s appointment date to be printed when an addresbook\u0027s lastShownList is printed onto the UI."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Next, the parser is updated to recognize user input corresponding to the Appointment object of a person. It works together with an updated `Add` Command. When adding a new person through the add command, the user has to write `m/APPOINTMENTDATE\u0027 to signify the `Appointment` portion of a `Person`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Given below is an example usage scenario and how the `Appointment` feature is incorporated at each step."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 1. The user executes command `Add NAME [p]p/PHONE [p]e/EMAIL [p]a/ADDRESS m/APPOINTMENT [t/TAG]...\\n\\t\"`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 2. The parser parses the user command, verifying that the APPOINTMENT is of the 24 hour format YYYY MM DD HH MM. Then, it creates the relevant object for `Appointment`, `Address` etc, and a new `Person` object is constructed. The `Logic` class executes the `AddCommand` with the prepared arguments."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 3. The `Addressbook` tries to add the new person into the `uniquePersonList`. But first, the `uniquePersonList` checks if the new Person object is a duplicate of an existing Person object in the Addressbook. If the Person is not a duplicate, it is added into the Addresbook and the Addressbook is saved. Note that two patients cannot have the same appointment timing with the same doctor."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 4. The successful execution returns a MESSAGE_SUCCESS along with the added person. The MainWindow displays the result and prints the added person into the GUI."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d DoctorAppointments feature"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "This is a new feature, that is executed as `appointment DOCTORNAME`. It finds all Persons in the addressbook that are assigned to a doctor with the same name as DOCTORNAME. Then, it prints out a list of them sorted according to Appointment dates. The first person from the top has the earliest appointment date. Let us split the implementation documentation into two parts. (1) Returning a list of persons corresponding to the user input\u0027s name of the doctor in chronological order. (2)Printing only the relevant information of these persons in a neat manner similar to a time-table."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "For the first part, finding and sorting the list of corresponding persons is facilitated by the `DoctorAppointmentsCommand` class and the `Person` class. The following operations are implemented in the `DoctorAppointmentsCommand` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `execute()` -- Upon execution, a new `Indicator` class stores information indicating that `DoctorAppointmentsCommand` is the most recently invoked command. Then, the following method `getPersonsWithName(doctor)` is called."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getPersonsWithName(doctor)` -- This method is adapted from the `FindCommand` class method. In addition to the original command, this method utilizes the package on LocalDate and Collections.Sort. This method updates a `LocalDateTime` field in a `Person` object (to be explained in the next paragraph). This method also calls SortDate() which is a separate sorting class that helps to compare `LocalDate` dates and sort them based on chronological order. This method returns an ArrayList of Persons that have the doctor\u0027s name corresponding to the user input\u0027s doctor. The ArrayList is sorted based on their appointment dates."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "We update the `Person` class to contain an additional field `LocalDateTime date` which is originally set to null for every person in the addressbook. Then the following getters and setters are implemented in the `Person` class and their method signatures are updated in the `ReadOnlyPerson` interface."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getLocalDateTime()`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `setLocalDateTime()`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Given below is an example usage scenario and how the Persons corresponding to a certain doctor are sorted and listed in Chronological order."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 1. The user executes command `appointment DOCTORNAME\"`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 2. The parser parses the command and prepares the keyword arguments for the `DoctorAppointmentsCommand` class."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 3. `DoctorAppointmentsCommand` is executed and the `Indicator` class records that this is the most recently invoked command. The execute command calls `getPersonsWithName(doctor)`. For each Person in the existing addressbook, if the Person\u0027s doctor corresponds to DOCTORNAME, the `LocalDateTime` class parses the person\u0027s appointment date, and the Person\u0027s `LocalDateTime` date field is set to be the parsed appointment date."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 4. The person is added into the matchedPersons list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 5. The list of matchedPersons are sorted based on the `LocaldateTime` date field in each person."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 6. The sorted list of matchedPersons are returned and displayed in a table format (explained in second part)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "For the second part of the implementation, we discuss how the list of matchedPersons is formatted to print in a certain manner. To facilitate the printing, we mainly update the format() method of the UI `Formatter` class."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "To facilitate the update, a new `Indicator` class is created and a new method is implemented in the `ReadonlyPerson` interface."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `Indicator.setLastCommand(String)` --when called, stores a String that records the last invoked user Command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `Indicator.getLastCommand()` --when called, provides information on the last invoked user Command."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `getAsTextNameDateDoctor()` --This is a method of the `ReadOnlyPerson` interface. It is a new String builder that builds a String of information about the Person. The information contains only the name and appointment date of the person. The String is padded on the right with whitespace to ensure a tabular format."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The UI `Formatter` is updated in the following way."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `format(Persons)` --Checks if the last invoked user Command is the `DoctorAppointmentsCommand`. If it is, calls the new String builder method `getAsTextNameDateDoctor()` for each Person to be formatted."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Given below is an example usage scenario and the formatter formats the Person to be printed in a tabular format. It continues from Step 6 above."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 7. When the display method is called in step 6, the format method in `Formatter` is called."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 8. A separate String builder method getAsTextNameDateDoctor() is called, and the String is padded on the right by whitespace."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Step 9. The `MainWindow` displays the newly formatted Persons in neat rows, displaying only the relevant information on Name and Appointment Date."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The sequence diagram below shows the interactions between the various classes when the `appointment DOCTOR` command is executed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "image:https://raw.githubusercontent.com/cs2113-ay1819s2-t11-2/main/master/docs/images/DoctorAppointmentsFeature.png[width\u003d800,height\u003d]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author matthiaslum"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d ApptDate feature"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "This feature displays a doctor\u0027s appointment timetable for a specific day."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "This is a new feature, that is executed as `apptDate DOCTORNAME m/YYYY MM DD`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "When the parser parses the user command that starts with the `apptDate` commandword, it instantiates an object of the class ApptDate."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The user specfied date and doctor\u0027s name are stored as static fields in the class."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Next, the logic class calls this object to be executed."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The method `execute()` is similar in implementation to the `execute()` method of the previous appointment feature."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "In summary, the `execute()` method calls the method `getPersonsWithSameDoctorSameDate()`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "`getPersonsWithSameDoctorSameDate()` finds all Persons in the addressbook that have the same doctor as the user\u0027s specified doctor."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Then, it traverses the lists of matchedPersons to select only the Persons that have the same appointment date as the user specified date that is of the format YYYY MM DD."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Then, it returns a matchedPersonsList that is used for the Command Result and for the last shown list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "At the same time, we build a long string called `timetable`. This formatting of this string is tedious."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Some methods involve padding of whitespaces and printing out time-slots of 15min starting from 6am."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "If anyone is confused by the \u0027for\u0027 loop, the iterator \u0027i\u0027 signifies the number of minutes that have elapsed since 00:00 hours of that day."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "We convert the appointment time of each matchedPerson into the number of minutes from 00:00."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "If the iterator \u0027i\u0027 matches the appointment timing of a Person, we print out the Person beside that time-slot."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "The UI `Formatter` facilitates the printing of timetable."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "* `format(Persons)` --Checks if the last invoked user Command is the `ApptDateCommand`. If it is, it retrieves the timetable from the `ApptDate` class,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "and prints out the neatly formatted timetable."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author matthiaslum"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d Add Appointment feature"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". Invalid appointment value"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Prerequisites: please ensure that the addressbook is cleared. You can do this by the `clear` command. +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ".. Test case 1: `add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/1800 12 11 12 30 d/DoctorTan s/Observation` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Expected: The test case fails because appointments earlier than the current time are not allowed. +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "`Appointment timings must not be earlier than current time, +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "must be in the 24hr format of yyyy MM dd hh mm. +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Additionally appointment slots are in blocks of 15min. +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "Thus, the time in minutes must be 00, 15, 30 or 45. No appointments earlier than 6am.` +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". Invalid Doctor\u0027s name"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". Same appointment timing with the same doctor"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". Same appointment timing with another Person, but different doctor"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". Duplicate person details but different appointment"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". Successful adding of person"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d DoctorAppointments feature"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". appointment command"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "\u003d\u003d\u003d ApptDate feature"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ". apptDate command"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "matthiaslum": 297
    }
  },
  {
    "path": "docs/team/shawn-t.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d Teo Xuan Wei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d PROJECT: Doctor On Call"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d Overview:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "DoctorOnCall is a Java sample application intended for doctors with long-term patients and have to track their patients\u0027 appointment details as well as particulars."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "This application was developed by team T11-2 of CS2113T in National University of Singapore."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d Summary of Contributions:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dshawn-t\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-14\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d Features implemented: Refer Patient (major/ main feature), length (minor feature)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* *Major enhancement*: added a refer command that allows user to directly refer a patient within the addressbook and automatically update the relevant particulars"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** What it does: Allows user to do a direct patient refer to another doctor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** Justification: On the same database where patients\u0027 particulars are stored, having this features allows for a quick and easy way to refer patients without the need to swap to another dsatabase/ update the addressbook manually."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** Highlights: The challenge of this implementation is to analysize existing commands - Add, Delete and Find - understand the concepts behind these working commands and extracting only the relevant parts to make this feature possible."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* *Minor enhancement*: added a length command that returns the nuber of entries in the addressbook"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** What it does: Allows user to query the number of entries without having to see the full list with every patient\u0027s particulars (when using list command)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** Justification: Users would like a quick access to how many patients they have. This feature hides all other information and only outputs the number of entries."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** Highlights: The challenge of this implementation is understanding how the command list works and modelling its implementation and only getting the parameteres required (size)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** Project management: Managed releases v1.1 - v1.4, as well as raise and resolve issues on issues tracker."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** Documentation: Did cosmetic tweaks to original template by formatting Use Cases for the existing commands of the Developer Guide as well as the DeveloperGuide\u0027s design section. For my contributions to the Design Section, please refer to https://github.com/cs2113-ay1819s2-t11-2/main/blob/master/docs/DeveloperGuide.adoc#design"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d Getting length of the address book : `length`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Shows the number of entries in the address book at the point of query. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Format: `length`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d Referring a patient to a doctor: `refer`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Refers a patient from the address book to a doctor. +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Note: This command is overloaded with two formats."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Format 1: `refer NAME [MORE_NAMES]` +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Refers target patient to a default doctor and shows a success message with patient\u0027s updated particulars if there is only one unique entry. If there are multiple entries, all patient entries with the target keywords in the addressbook will be printed and user will be prompted to identify the correct patient. If target patient does not exist in the addressbook, an error message will be printed. +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[Note]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Default doctor is the last specified doctor or `Dr Seuss` if never specified before previously."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `refer John` +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `refer John Doe` +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `refer Doe`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Format 2: `refer d/ DOCTORNAME p/NAME [MORE_NAMES]` +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Refers target patient to a doctor specified by the user. Format 2 works exactly like format 1. If input contains an invalid doctor name (non-alphanumeric), an invalid command format message will be printed. +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[Note]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "When a refer is successful using this format, the default doctor would be updated as this new doctor specified in the latest format 2 entry."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `refer d/DoctorTan p/John Doe` +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `refer d/Dr Tan p/John Doe` +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `refer d/Dr Tan p/Doe`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "For my contributions to the Design Section, please refer to https://github.com/cs2113-ay1819s2-t11-2/main/blob/master/docs/DeveloperGuide.adoc#design"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Refer feature"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The refer feature is facilitated by the ReferCommand class, Logic class, Parser class and AddressBook class, and it implements the following operations:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `prepareRefer()` -- checks if input is valid and splits it at the specific prefix d/ when necessary"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `getPatientToRefer()` -- looks up addressbook and returns target patient to refer"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `toRefer \u003d new Person("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getName(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getPhone(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getEmail(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getAddress(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getAppointment(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             new Doctor(referraldoctor),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getStatus(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             person.getTags()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "             );` -- Copies and modifies taget patient\u0027s doctor name"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `tagSet.add(new Tag(\"referred\"))` -- adds a refer tag"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `addressBook.removePerson(person)` -- removes target patient"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `addressBook.addPerson(toRefer)` -- adds the newly update patient entry back into the addressbook"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Given below is an example usage scenario and how the refer feature is incorporated at each step. The _Sequence Diagram for referring a patient_ is being provided at the end to further aid in illustrating this example."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 1. The user executes command \"refer john\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 2.Logic class calls Parser class through command `parserCommand(\"refer John\")`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 3. Parser class calls method `prepareRefer(\"John\")` to checks if input is valid and splits it at the specific prefix d/ when necessary."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 4. Parser class calls ReferCommand to start evoke the refer."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 5. ReferComand class calls method `getPatientToRefer(\"John\")` to looks through the Addressbook for all entries containing the keyword \"john\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 6. If there is only one entry, ReferCommand modifies the entry\u0027s Doctor and adds a new tag \u0027refer\u0027 to the current collection of tags, deletes the old and adds the newly modified patient entry into the addressbook. If there are multiple entires, ReferCommand class prints all entries in the address book with the keyword and prompts user to key unique keyword (Repeats to Step 1)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step7. The successful execution returns a MESSAGE_SUCCESS along with the patient\u0027s updated particulars."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".Sequence Diagram for referring a patient"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "image::ReferCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Length feature"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The refer feature is facilitated by the LengthCommand class, Logic class, Parser class and AddressBook class, and it implements the following operation:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* `addressBook.size()` -- queries and returns the size of the addressbook"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Given below is an example usage scenario and how the length feature is incorporated at each step. The _Sequence Diagram for getting addressbook length_ is being provided at the end to further aid in illustrating this example."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 1. The user executes command \"length\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 2.Logic class calls Parser class through command `parserCommand(\"length\")`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 3. Parser class calls LengthCommand to query the size of addressbook."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Step 4. The successful execution returns the length of the address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".Sequence Diagram for getting address book length"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "image::LengthCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC03 - Refer patient"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". The user requests to refer patient to another doctor."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook finds patient from the list of entries, and extracts all the relevant particulars of the target patient."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". Addressbook updates the extracted particulars with the new doctor\u0027s name and patient tag."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook deletes the old patient entry from the main list and adds the newly updated one into the main list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* 1a. The format entered by the user is incorrect."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a1. AddressBook shows an error message and prints the format for user to follow."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1a2. User re-enters new patient\u0027s particulars."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* Steps 1a1 - 1a2 are repeated until the correct format is entered by the user."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* 1b. There are multiple entries in the addressbook with the same patient name(s) entered by the user."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1b1. AddressBook prints out all similar patient entries and prompts users to to identify the correct patient."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1b2. User enters correct patient\u0027s full name."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "* 1c. The format of the doctor\u0027s name entered by the user is incorrect (non-alphanumeric)."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1c1. AddressBook shows an error message and reminds users that doctor names can only contain alphanumeric characters."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "** 1c2. User enters a valid doctor\u0027s name that follows the condition above."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Use case: UC06 - Length of address book"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "*Main success scenario:*"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". User requests for length of address book."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". AddressBook gets the current length and prints out the number of entries."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "+"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Refer feature"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Please ensure the following entries have been added into the addressbook before trying the test cases below. If there are not entries in the addressbook, the \u0027no such person\u0027 execption will be shown."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". refer NAME [MORE_NAMES]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Prerequisites: please add the following patient entries being proceeding: +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2019 12 11 12 30 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add John Doe p/98765432 e/johnd@gmail.com a/JohnD street, block 123, #01-01 m/2019 12 11 12 00 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add John Teo p/98765432 e/johnt@gmail.com a/JohnT street, block 123, #01-01 m/2019 12 11 11 30 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Shawn Tan p/98765432 e/shawnt@gmail.com a/Shawn street, block 123, #01-01 m/2019 12 11 11 00 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Shawn Doe p/98765432 e/shawnd@gmail.com a/ShawnD street, block 123, #01-01 m/2019 12 11 10 30 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Shawn Teo p/98765432 e/shawnteo@gmail.com a/ShawnT street, block 123, #01-01 m/2019 12 11 10 00 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Abigail p/98765432 e/shawnteo@gmail.com a/ShawnT street, block 123, #01-01 m/2019 12 11 09 30 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Abigail Doe p/98765432 e/shawnteo@gmail.com a/Abigail street, block 123, #01-01 m/2019 12 11 09 00 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Betsy Crowe pp/1234567 e/betsycrowe@gmail.com pa/Crowe Newgate m/2019 11 14 08 30 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "add Betsy Doe pp/1234567 e/betsycrowe@gmail.com pa/Doe Newgate m/2019 11 14 08 00 d/DoctorTan s/Observation +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 1: `refer` + "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: An error message: `Invalid command format!` is displayed on the screen, with the displays the correct format below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 2: `refer Shawn` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: Prints out full particulars of all 3 patients with the name of `Shawn`, followed by a message: `3 similar entries have been found. Please re-enter patient\u0027s FULL NAME to refer` to prompt for a re-entry of the ful name of the target patient. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 3: `refer Shawn Doe` +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: Prints out success message: `Patient Shawn Doe has been successfully referred to Dr Seuss!! :D`, followed by the patient\u0027s updated entry below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 4: `refer John` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: Prints out success message: `Patient John has been successfully referred to Dr Seuss!! :D`, followed by the patient\u0027s updated entry below.  +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "This is an edge case test. It is a successful refer (unlike test case 2) because there is an entry `John` without any last names in this case - this leads to the patient name being an exact and unique match of the keyword inputted unlike test case 2 where every `Shawn` has a last name (therefore no patient name \u003d\u003d keyword inputted)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 5: `refer d/Dr Elizabeth p/John` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: Prints out success message: `Patient John has been successfully referred to Dr Elizabeth!! :D`, followed by the patient\u0027s updated entry below.  +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 6: `refer Abigail` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: Prints out success message: `Patient Abigail has been successfully referred to Dr Elizabeth!! :D`, followed by the patient\u0027s updated entry below.  +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The default doctor is Dr Seuss. However, once a new doctor of preferrence is introduced (Dr Elizabeth in this case), the new doctor will be the new default foctor for subsequent refer commands that do not specify a change in referral doctor. Please note that it is part of the feature\u0027s design and not a bug :)."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 7: `refer d/Dr. Tan p/Abigail` +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected: Prints out `Invalid command format!` message followed by a reminder +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "`Doctor\u0027s names should only contain spaces and/or alphanumeric characters +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Special characters like . ! @ # , etc are not allowed! +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Please re-enter with an appropriate doctor name.`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shawn-t"
        },
        "content": " "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//@@author shawn-t"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "\u003d\u003d\u003d Length feature"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ". length"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Prerequisites: NIL"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 1: `length`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected:  `Length of the address book is: 10`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "The length will be 10 if the 10 test case inputs from the previous section (refer feature) is not cleared."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 2: `delete 1` +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "`length`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected:  `Length of the address book is: 9`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ".. Test case 3: `clear` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "`length`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "Expected:  `Length of the address book is: 0`"
      }
    ],
    "authorContributionMap": {
      "shawn-t": 255
    }
  },
  {
    "path": "docs/team/wupeihsuan.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Wu Pei Hsuan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: Doctor On Call"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Doctor On Call is a application intended for hospital doctor who has several long-term patients he has to take care of."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "It is written in Java."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to sort the list by different attributes*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to view the list sorted by desired attribute. The attribute can be name, status or appointment."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user might need to sort his patient according to his desired attribute so that he can prioritize the allocation of his resources."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects the internalList only when user sort by name. It also required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* *Minor enhancement*: added a status column that allows the user to track the status of all the patients so that the user can know the stage of treatment in which the patient is undergoing. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#\u003dundefined\u0026search\u003dwupeihsuan[RepoSense]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.1` - `v1.3` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Create milestones and set deadlines"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "*** Updated tests for existing features "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote the README page."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "*** Drew the class diagram."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Enable Travis CI for the team repo."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Listing all persons in sorted order : `sort`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons sorted by desired attribute in alphabetical order in the address book. +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Desired attribute could be name, appointment or status. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `sort DESIRED_ATTRIBUTE`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* `sort name` +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons sorted by name in alphabetical order in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* `sort status` +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons sorted by status according to the degree of urgency in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence of the status in this order is as follows: Critical, Waiting for Surgery, Life-support, Waiting for doctor appointment, Therapy and Observation."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* `sort appointment` +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons sorted by appointment date in chronological order in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "image::ClassDiagram.png[]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "e.g. `seedu.addressbook.common.UtilsTest`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "e.g. `seedu.addressbook.storage.StorageFileTest`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "e.g. `seedu.addressbook.logic.LogicTest`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Sort feature"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "The sort mechanism is facilitated by `UniquePersonList` and `SortCommand`. `UniquePersonList` stores a list of all persons in the address book as an `internalList`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* `UniquePersonList#SortByName()` -- Sort `internalList` by name column in alphabetical order"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `SortCommand#getPersonsSortedByDate()` -- Return a list sorted by appointment column in chronological order"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `SortCommand#getPersonsSortedByStatus()` -- Return a list sorted by status column according to the degree of urgency. The sequence of the status in this order is as follows: Critical, Waiting for Surgery, Life Support, Waiting for doctor appointment, Therapy and Observation."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in `AddressBook` as `AddressBook#sorted(String attribute)`. Corresponding operation will be called depending on attribute the user wants to sort the list by."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Given below is two examples usage scenario and how the sort mechanism behaves at each step."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Example 1:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 1. The user launches the application for the first time. The `UniquePersonList` will be initialized with the initial address book state."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 2. The user executes `add n/…` to add some new people. These people will be added sequentially to the end of the list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 3. The user then decides to execute the command `list`. Commands that do not modify the address book, such as list, will usually not call `AddressBook#sorted(String attribute)` . Thus, the `internalList` remains unchanged."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user decides to view the list sorted by their name by executing the `sort name` command. This command will call `AddressBook#sorted(String attribute)` and pass the string “name” to the method. Since the value of parameter is “name”, `SortByName()` will be called. `internalList` will then be sorted by name column in alphabetical order. At last, `internalList` will be returned and displayed to the user."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Example 2:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 1. The user launches the application for the first time. The `UniquePersonList` will be initialized with the initial address book state."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 2. The user executes `add n/…` to add some new people. These people will be added sequentially to the end of the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 3. The user then decides to execute the command `list`. Commands that do not modify the address book, such as list, will usually not call `AddressBook#sorted(String attribute)` . Thus, the `internalList` remains unchanged."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Step 4. The user decides to view the list sorted by their name by executing the `sort appointment` command. This command will call `SortCommand#execute()` and pass the string “appointment” to the method. Since the value of parameter is “appointment”, `SortCommand#getPersonsSortedByDate()` will be called. A list sorted by appointment column in chronological order will be returned and displayed to the user."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d\u003d Add Status feature"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "the add status feature facilitated by the `Status` class, it implements the following operations:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `status(String)` -- The constructor for the class `Status`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `toString()` -- Returns a String containing the name of the patient\u0027s status."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `isValidStatus()` -- Checks if if a given string is a valid status."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `equals(Object)` -- Checks if two patients\u0027 status are equal."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `isCorrectStatus()` -- Checks if if a given string is any of following status: Critical / Waiting for Surgery / Life Support / Waiting for doctor appointment / Therapy / Observation."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "In addition to the Appointment class, we update the ReadOnlyPerson interface and the Person class (which implements the interface) to ensure that every Person object is constructed with an Appointment class. To be specific, the following operations are added or updated."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `Person(Status status)` --  The class `Person` now requires a Status object during its construction."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "* `getStatus()` -- The class `Person` implements a method that returns the Status object of a Person."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "//@@author WuPeiHsuan"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d\u003d Sort feature"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Prerequisites: Please add some patient entries. +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Test case 1: `sort name` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected: Prints out a list of all patients sort by name in lexicographically order. +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Test case 2: `sort status` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected: Prints out a list of all patients sort by status according to the degree of urgency. +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Test case 3: `sort appointment` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected: Prints out a list of all patients sort by appointment in chronological order. +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Other incorrect commands to try: `sort`, `sort abc` + "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected: An error message: `Invalid command format!` is displayed on the screen, with the displays the correct format below. "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "\u003d\u003d\u003d Add Status feature"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Prerequisites: The user has logged in to the system."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Test case 1: `add John p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2019 12 11 12 30 d/DoctorTan s/Observation` + "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected: New person added: John Phone: 98765432 Email: john@gmail.com Address: John street, block 123, #01-01  Appointment: 2019 12 11 12 30 Doctor: DoctorTan Status: Observation Tags: "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Test case 2: `add Amy p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2019 12 11 12 30 d/DoctorTan s/Waiting for Surgery` + "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected:  New person added: Amy Phone: 98765432 Email: john@gmail.com Address: John street, block 123, #01-01  Appointment: 2019 12 11 12 30 Doctor: DoctorTan Status: Waiting for Surgery Tags: "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ".. Other incorrect commands to try:  `add Sherry p/98765432 e/john@gmail.com a/John street, block 123, #01-01 m/2019 12 11 12 30 d/DoctorTan s/nothing` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "Expected: An error message: Status should be Observation/ Critical / Waiting for Surgery / Therapy / Life Support / Waiting for doctor appointment"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "//@@author "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 93,
      "WuPeiHsuan": 104
    }
  },
  {
    "path": "src/seedu/addressbook/Main.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.ui.Gui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.ui.Stoppable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Main entry point to the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application implements Stoppable{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Version info of the program. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static final String VERSION \u003d \"AddressBook Level 3 - Version 1.4\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Gui gui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) throws Exception{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        gui \u003d new Gui(new Logic(), VERSION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        gui.start(primaryStage, this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super.stop();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shawn-t": 1,
      "-": 38
    }
  },
  {
    "path": "src/seedu/addressbook/accountmanager/AccountManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "//@@author liguanlong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "package seedu.addressbook.accountmanager;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "public class AccountManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private boolean loginStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private String currentAccount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private Map\u003cString, String\u003e accounts \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    // All the string constants used in the class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    public static final String LOGIN_PROMPT \u003d \"Please login or register in order to use the address book\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    public static final String LOGOUT_MESSAGE_USAGE \u003d \"logout\" + \":\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            + \"Log the current user out.\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            + \"Example: \" + \"logout\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private static final String SUCCESS \u003d \"Login Success, loading...\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private static final String REGISTRATION_SUCCEED \u003d \"Registration succeed, please login using the username and password\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private static final String INVALID_USERNAME_OR_PASSWORD \u003d \"Invalid username or password, please try again\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private static final String INVALID_FORMAT \u003d \"Please login or register using: \" + \"\\n\" + \"login username password\" + \"\\n\" + \"register username password\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private static final String USERNAME_REGISTERED \u003d \"The username has already been registered, please try a new username\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private static final String WEAK_PASSWORD \u003d \"The password should contain at least one lowercase letter, one uppercase letter, and one digit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    public AccountManager(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        this.loginStatus \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        loadAccounts();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    public boolean getLoginStatus(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        return loginStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    public String getCurrentAccount(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        return currentAccount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    public String accountCommandHandler(String userCommandText){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        String[] accountInfo \u003d userCommandText.split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            // check if command is exit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            if (accountInfo.length \u003d\u003d 1 \u0026\u0026 accountInfo[0].equals(\"exit\")){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                storeAccounts();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            // check if command is login"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            if (accountInfo.length \u003d\u003d 3 \u0026\u0026 accountInfo[0].equals(\"login\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                // check if username and password are correct"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                if (this.accounts.containsKey(accountInfo[1]) \u0026\u0026 this.accounts.get(accountInfo[1]).equals(accountInfo[2])) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                    this.currentAccount \u003d accountInfo[1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                    setLoginStatus(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                    return SUCCESS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                    return INVALID_USERNAME_OR_PASSWORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            // check if command is register"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            if (accountInfo.length \u003d\u003d 3 \u0026\u0026 accountInfo[0].equals(\"register\")){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                String username \u003d accountInfo[1];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                // if the username has already been registered"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                if (this.accounts.containsKey(accountInfo[1])) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                    return USERNAME_REGISTERED;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                String password \u003d accountInfo[2];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                // if the password does not contain at least one lowercase letter, one uppercase letter and one digit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                if (weakPassword(password)){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                    return WEAK_PASSWORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                register(username, password);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                return REGISTRATION_SUCCEED;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            // if no match with any command, return invalid format message"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            return INVALID_FORMAT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        } catch (Exception e){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            return INVALID_FORMAT;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    // load all the accounts from accounts.properties to the HashMap accounts"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private void loadAccounts() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            Properties accountsFile \u003d new Properties();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            accountsFile.load(new FileInputStream(\"accounts.properties\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            for (String key : accountsFile.stringPropertyNames()){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                this.accounts.put(key, accountsFile.get(key).toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        }catch (IOException e)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    // store all the accounts in HashMap accounts to accounts.properties"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    public void storeAccounts() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            Properties accountsFile \u003d new Properties();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            for (Map.Entry\u003cString, String\u003e entry: this.accounts.entrySet()){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                accountsFile.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            accountsFile.store(new FileOutputStream(\"accounts.properties\"), null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        } catch (IOException e)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    public void logout(){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        setLoginStatus(false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        storeAccounts();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    public void setLoginStatus(boolean status){"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        this.loginStatus \u003d status;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private void register(String username, String password){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        this.accounts.put(username, password);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        storeAccounts();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private boolean weakPassword(String password){"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        return password.toLowerCase().equals(password) || password.toUpperCase().equals(password) || doesNotContainDigit(password);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private boolean doesNotContainDigit(String password){"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        for (char character : password.toCharArray()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            if (Character.isDigit(character)){"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liguanlong": 140
    }
  },
  {
    "path": "src/seedu/addressbook/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a person to the address book. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Contact details can be marked private by prepending \u0027p\u0027 to the prefix.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: NAME [p]p/PHONE [p]e/EMAIL [p]a/ADDRESS m/APPOINTMENT d/DOCTOR s/STATUS [t/TAG]...\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \" John Doe p/98765432 e/johnd@gmail.com a/311, Clementi Ave 2, #02-25 m/2020 12 11 08 00 d/DOCTOR TAN s/Observation t/friends t/owesMoney\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book, or another person has the same appointment time\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(String name,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                      String phone, boolean isPhonePrivate,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                      String email, boolean isEmailPrivate,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                      String address, boolean isAddressPrivate,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                      String appointment,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                      String doctor,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                      String status,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                      Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toAdd \u003d new Person("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new Name(name),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(phone, isPhonePrivate),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(email, isEmailPrivate),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(address, isAddressPrivate),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                new Appointment(appointment),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                new Doctor(doctor),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                new Status(status),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                tagSet"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person toAdd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyPerson getPerson() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            System.out.println(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            System.out.println((String.format(MESSAGE_SUCCESS, toAdd)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (UniquePersonList.DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "matthiaslum": 8
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ApptDateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author matthiaslum"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": " * Displays the appointment timetable for a doctor on a single day."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "public class ApptDateCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"apptDate\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String MESSAGE_INVALID_DOCTOR_NAME \u003d \"Doctor\u0027s names should only contain spaces and/or alphanumeric characters\\nSpecial characters like . ! @ # , etc are not allowed!\\nPlease re-enter with an appropriate doctor name.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Dates must be in the 24hr format of yyyy MM dd.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Displays the doctor\u0027s appointment timetable for a specific day. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"A nice timeline will be shown. Can be used for dates older than the current date. (appointment history) \\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"Parameters: NAME m/APPOINTMENT \\n\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \" John Doe m/2020 12 11\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy MM dd\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public DateTimeFormatter formatterTime \u003d DateTimeFormatter.ofPattern(\"yyyy MM d kk mm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public String doctor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public LocalDate date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static String timetable;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    int year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    int month;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    int day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    private static int hourTimesMin;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    private static int counter;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    private static LocalDateTime currentPersonDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public ApptDateCommand(String doctor, String userdate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.doctor\u003ddoctor.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(userdate, formatter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.year\u003ddate.getYear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.month\u003ddate.getMonthValue();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.day\u003ddate.getDayOfMonth();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e personsFound \u003d getPersonsWithSameDoctorSameDate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Indicator.setLastCommand(\"ApptDate\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return new CommandResult(getMessageForAppointmentsShownSummary(personsFound, this.doctor), personsFound);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * Retrieve all Persons in the address book whose doctor\u0027s name is the same, and has an appointment with the doctor"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * on the date specified by the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * At the same time, formats a nice timeline to be printed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * @return list of persons found."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    private List\u003cReadOnlyPerson\u003e getPersonsWithSameDoctorSameDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e matchedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            String doctorName \u003d person.getDoctor().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            if (doctorName.equals(this.doctor)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                LocalDateTime date \u003d LocalDateTime.parse(person.getAppointment().toString(), formatterTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                person.setLocalDateTime(date);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                if (date.getYear() \u003d\u003d this.year \u0026 date.getMonthValue() \u003d\u003d this.month \u0026 date.getDayOfMonth() \u003d\u003d this.day){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    matchedPersons.add(person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Collections.sort(matchedPersons, new SortDate());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        //Different pathway if its zero matched persons."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        if (matchedPersons.isEmpty()){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            this.timetable \u003d \"\\t\\tYou have no appointments for the date:  \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    + date"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    + \"\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            for (int i \u003d360; i \u003c1440; i+\u003d15) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                timetable \u003d timetable"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                        + \"   \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                        + String.format(\"%5d%s%d\", (i / 60), \":\", (i % 60));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                if (i % 60 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    timetable \u003d timetable + 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                timetable \u003d timetable + String.format(\"%32s\", \"\\t*\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            return matchedPersons;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        //add a duplicated fake person! So that the counter will not go out of index."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        matchedPersons.add(matchedPersons.get(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        String timetable \u003d\"\\t\\tThis is your Appointment timetable for the date: \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                + date"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.counter\u003d0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.currentPersonDate \u003d matchedPersons.get(this.counter).getLocalDateTime();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.hourTimesMin \u003d currentPersonDate.getHour() * 60 + currentPersonDate.getMinute();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        for (int i \u003d360; i \u003c1440; i+\u003d15) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            timetable\u003d timetable"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    +\"   \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    + String.format(\"%5d%s%d\", (i/60), \":\", (i%60));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            if (i%60 \u003d\u003d0){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                timetable \u003d timetable + 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            if (i \u003d\u003d this.hourTimesMin) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                timetable \u003d timetable"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                        + String.format(\"%32s\", \"\\t**\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                        + String.format(\"%s\", \"*****     \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                        + String.format(\"%-70s\", matchedPersons.get(this.counter).getName().toString())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                this.counter \u003d this.counter + 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                this.currentPersonDate \u003d matchedPersons.get(this.counter).getLocalDateTime();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                this.hourTimesMin \u003d currentPersonDate.getHour() * 60 +  (currentPersonDate.getMinute());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                timetable \u003d timetable +String.format(\"%32s\", \"\\t*\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        //removing the duplicated person from the method called."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        matchedPersons.remove(this.counter);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return matchedPersons;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Boolean indicator \u003d true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            LocalDate.parse(test, formatter);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            indicator \u003d false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return (indicator);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "matthiaslum": 139
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.ui.Gui.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook addressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param targetIndex last visible listing index of the target person"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command(int targetIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setTargetIndex(targetIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of persons."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param personsDisplayed used to generate summary"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return summary message for persons displayed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getMessageForPersonListShownSummary(List\u003c? extends ReadOnlyPerson\u003e personsDisplayed) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, personsDisplayed.size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static String getMessageForPersonReferShownSummary(List\u003c? extends ReadOnlyPerson\u003e personsDisplayed) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        return String.format(Messages.MESSAGE_SELECT_PATIENT, personsDisplayed.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static String getMessageForAppointmentsShownSummary(List\u003c? extends ReadOnlyPerson\u003e personsDisplayed, String doctor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return String.format(Messages.MESSAGE_NUMBER_OF_APPOINTMENTS, doctor, personsDisplayed.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    //@@author WuPeiHsuan"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static String getMessageForPersonSortShownSummary(List\u003c? extends ReadOnlyPerson\u003e personsDisplayed, String column) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        column \u003d column.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        switch(column){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case \"name\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                return String.format(Messages.MESSAGE_SORT_NAME_OVERVIEW, personsDisplayed.size(), column);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case \"appointment\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                return String.format(Messages.MESSAGE_SORT_APPOINTMENT_OVERVIEW, personsDisplayed.size(), column);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        return String.format(Messages.MESSAGE_SORT_STATUS_OVERVIEW, personsDisplayed.size(), column);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        //return String.format(Messages.MESSAGE_PERSON_SORTED_OVERVIEW, personsDisplayed.size(), column);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public CommandResult execute() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new UnsupportedOperationException(\"This method should be implement in child classes\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //Note: it is better to make the execute() method abstract, by replacing the above method with the line below:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    //public abstract CommandResult execute();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Supplies the data the command will operate on."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(AddressBook addressBook, List\u003c? extends ReadOnlyPerson\u003e relevantPersons) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.addressBook \u003d addressBook; //passes a reference to the same object, so editing that object will store it directly."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the the target person in the last shown list from the given arguments."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    protected ReadOnlyPerson getTargetPerson() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return relevantPersons.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTargetIndex(int targetIndex) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-t": 7,
      "-": 71,
      "matthiaslum": 5,
      "WuPeiHsuan": 14
    }
  },
  {
    "path": "src/seedu/addressbook/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The feedback message to be shown to the user. Contains a description of the execution result */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The list of persons that was produced by the command */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        relevantPersons \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, List\u003c? extends ReadOnlyPerson\u003e relevantPersons) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns list of persons relevant to the command command result, if any."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e getRelevantPersons() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.ofNullable(relevantPersons);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-t": 1,
      "-": 35
    }
  },
  {
    "path": "src/seedu/addressbook/commands/DoctorAppointmentsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author matthiaslum"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": " * Displays all the appointments that a given doctor has, ignoring expired appointments"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "public class DoctorAppointmentsCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy MM d kk mm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"appointment\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String MESSAGE_INVALID_DOCTOR_NAME \u003d \"Doctor\u0027s names should only contain spaces and/or alphanumeric characters\\nSpecial characters like . ! @ # , etc are not allowed!\\nPlease re-enter with an appropriate doctor name.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Displays a list of all patients who have appointments with a certain doctor, in chronological order of appointments.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"Past appointments are not shown (based on current time).\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"Parameters: DOCTOR_NAME\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" DoctorTan\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    private final String doctorName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public DoctorAppointmentsCommand(String doctorName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.doctorName \u003d doctorName.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e personsFound \u003d getPersonsWithName(doctorName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Indicator.setLastCommand(\"DoctorAppointments\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return new CommandResult(getMessageForAppointmentsShownSummary(personsFound, doctorName), personsFound);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * Retrieve all patients in the address book whose doctor\u0027s name is the same as the one specified by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * @return list of persons found."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    private List\u003cReadOnlyPerson\u003e getPersonsWithName(String doctorName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e matchedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            final String doctor \u003d person.getDoctor().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            if (doctorName.equals(doctor)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                LocalDateTime date \u003d LocalDateTime.parse(person.getAppointment().toString(), formatter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                person.setLocalDateTime(date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                if (date.compareTo(LocalDateTime.now()) \u003e 0){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    matchedPersons.add(person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Collections.sort(matchedPersons, new SortDate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return matchedPersons;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "matthiaslum": 57
    }
  },
  {
    "path": "src/seedu/addressbook/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "import seedu.addressbook.accountmanager.AccountManager;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" +\"Shows program usage instructions.\\n\\t\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String MESSAGE_ALL_USAGES \u003d \"Here is a list of commands:\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + DoctorAppointmentsCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + ApptDateCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + ClearCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + FindCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + LengthCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + ReferCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + SortCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + ViewCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + ViewAllCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + ExitCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            + \"\\n\\n\" + AccountManager.LOGOUT_MESSAGE_USAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liguanlong": 1,
      "-": 18,
      "matthiaslum": 16
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Indicator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author matthiaslum"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "public class Indicator {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static String lastCommand \u003d null;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static void setLastCommand(String command){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Indicator.lastCommand \u003d command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static String getLastCommand(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return Indicator.lastCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "matthiaslum": 15
    }
  },
  {
    "path": "src/seedu/addressbook/commands/LengthCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "public class LengthCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"length\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Returns the current length of the address book at the point of query.\\n\\t\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Length of the address book is: \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + addressBook.size());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-t": 13
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ReferCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "public class ReferCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"refer\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Refers patient specified to a default doctor (format 1) or a specific doctor (format 2)\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            + \"If there are multiple entries, prints them out and prompts user to re-enter full name of the target patient.\\n\\t\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            + \"Example of format 1: \" + COMMAND_WORD + \" John Doe\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            + \"Example of format 2: \" + COMMAND_WORD + \" d/Dr Wong p/ John Doe\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static final String MESSAGE_REFER_SUCCESS \u003d \"Patient %2$s has been successfully referred to %3$s!! :D\\n\\n********************************************************************************************************\\n%1$s \\n********************************************************************************************************\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_PERSON \u003d \"%1$s\\nThis patient does not exists in the address book records.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static final String MESSAGE_INVALID_DOCTOR_NAME \u003d \"Doctor\u0027s names should only contain spaces and/or alphanumeric characters\\nSpecial characters like . ! @ # , etc are not allowed!\\nPlease re-enter with an appropriate doctor name.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    private static volatile String referraldoctor \u003d \"Dr Seuss\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    String params[];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    Set\u003cString\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    private Person toRefer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    int count \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    String string;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    String str;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    String strName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public ReferCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public ReferCommand(String name, String doctorname) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        final String[] names \u003d name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        final Set\u003cString\u003e keywords \u003d new HashSet\u003c\u003e(Arrays.asList(names));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        referraldoctor \u003d doctorname;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        string \u003d String.join(\" \", keywords);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e personsFound \u003d getPatientToRefer(keywords);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NO_SUCH_PERSON, string));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            try { // add updated entry"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                addressBook.addPerson(toRefer);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            } catch (UniquePersonList.DuplicatePersonException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_REFER_SUCCESS, toRefer, toRefer.getName(), toRefer.getDoctor()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        return new CommandResult(getMessageForPersonReferShownSummary(personsFound), personsFound);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     * Retrieve all persons in the address book whose names contain some of the specified keywords."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     * @return list of persons found"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    private List\u003cReadOnlyPerson\u003e getPatientToRefer(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        count \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e matchedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e emptyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(person.getName().getWordsInName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                if (wordsInName.equals(keywords)) { // if a full name match is found, it is THE entry"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    Set\u003cTag\u003e tagSet \u003d person.getTags(); // get all current tags"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                        tagSet.add(new Tag(\"referred\")); // add a refer tag"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    try {  // store particulars of target entry"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                        toRefer \u003d new Person("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                person.getName(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                person.getPhone(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                person.getEmail(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                person.getAddress(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                person.getAppointment(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                new Doctor(referraldoctor),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                person.getStatus(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                tagSet"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                        );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    try { // remove target entry"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                        addressBook.removePerson(person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    } catch (UniquePersonList.PersonNotFoundException e) { // exception for person not found"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    count \u003d 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    return emptyList; // exit method"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                if (count \u003d\u003d 1) { // the first matched entry"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    try {  // store particulars of the first matched entry"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                        toRefer \u003d new Person("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                person.getName(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                person.getPhone(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                person.getEmail(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                person.getAddress(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                person.getAppointment(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                new Doctor(referraldoctor),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                person.getStatus(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                                person.getTags()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                        );"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                matchedPersons.add(person); // add patient into set of matching entries"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(person.getName().getWordsInName());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    try { // remove old entry"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                        addressBook.removePerson(person);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    } catch (UniquePersonList.PersonNotFoundException e) { // exception for person not found"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            return emptyList;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        else"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            return matchedPersons;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-t": 159
    }
  },
  {
    "path": "src/seedu/addressbook/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.lang.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "//@@author WuPeiHsuan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": " * Lists all persons in the address book in sorted order to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            + \"Displays all persons in the address book as a list sorted by desired column with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            + \"Parameters: name / appointment / status\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" name\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public final String attribute;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy MM d kk mm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public SortCommand(String attribute) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        addressBook.sorted(attribute);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        List\u003cReadOnlyPerson\u003e allPersons \u003d addressBook.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        if(attribute.equals(\"status\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            final List\u003cReadOnlyPerson\u003e personsSortedByStatus \u003d getPersonsSortedByStatus();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            return new CommandResult(getMessageForPersonSortShownSummary(personsSortedByStatus, attribute), personsSortedByStatus );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }else if(attribute.equals(\"appointment\")){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            final List\u003cReadOnlyPerson\u003e personsSortedByDate \u003d getPersonsSortedByDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            return new CommandResult(getMessageForPersonSortShownSummary(personsSortedByDate, attribute), personsSortedByDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        return new CommandResult(getMessageForPersonSortShownSummary(allPersons, attribute), allPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    private List\u003cReadOnlyPerson\u003e getPersonsSortedByStatus() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e matchedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            final String getStatus \u003d person.getStatus().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            if (getStatus.equals(\"Critical\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                matchedPersons.add(person);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            final String getStatus \u003d person.getStatus().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            if (getStatus.equals(\"Waiting for Surgery\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                matchedPersons.add(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            final String getStatus \u003d person.getStatus().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            if (getStatus.equals(\"Life Support\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                matchedPersons.add(person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            final String getStatus \u003d person.getStatus().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            if (getStatus.equals(\"Waiting for doctor appointment\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                matchedPersons.add(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            final String getStatus \u003d person.getStatus().toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            if (getStatus.equals(\"Therapy\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                matchedPersons.add(person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            final String getStatus \u003d person.getStatus().toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            if (getStatus.equals(\"Observation\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                matchedPersons.add(person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        return matchedPersons;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    private List\u003cReadOnlyPerson\u003e getPersonsSortedByDate() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e matchedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                LocalDateTime date \u003d LocalDateTime.parse(person.getAppointment().toString(), formatter);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                person.setLocalDateTime(date);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                matchedPersons.add(person);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        Collections.sort(matchedPersons, new SortDate());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        return matchedPersons;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "matthiaslum": 1,
      "WuPeiHsuan": 96
    }
  },
  {
    "path": "src/seedu/addressbook/commands/SortDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "public class SortDate implements Comparator\u003cReadOnlyPerson\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public int compare(ReadOnlyPerson a, ReadOnlyPerson b){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return a.getLocalDateTime().compareTo(b.getLocalDateTime());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthiaslum": 13
    }
  },
  {
    "path": "src/seedu/addressbook/common/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_IN_ADDRESSBOOK \u003d \"Person could not be found in address book\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SORT_NAME_OVERVIEW \u003d \"%1$d persons sorted by %2$s in lexicographically order!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SORT_APPOINTMENT_OVERVIEW \u003d \"%1$d persons sorted by %2$s in chronological order!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SORT_STATUS_OVERVIEW \u003d \"%1$d persons sorted by %2$s according to the degree of urgency!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE \u003d \"Launch command format: \" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \"java seedu.addressbook.Main [STORAGE_FILE_PATH]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Welcome to Doctor On Call!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USING_STORAGE_FILE \u003d \"Using storage file : %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static final String MESSAGE_SELECT_PATIENT \u003d \"%1$d similar entries have been found. Please re-enter patient\u0027s FULL NAME to refer\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String MESSAGE_NUMBER_OF_APPOINTMENTS \u003d \"%1$s you have %2$d appointments!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-t": 2,
      "-": 18,
      "matthiaslum": 2
    }
  },
  {
    "path": "src/seedu/addressbook/data/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.DuplicatePersonException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the entire address book. Contains the data of the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList allPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook empty() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an address book with the given data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons external changes to this will not affect this address book"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(UniquePersonList persons) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allPersons \u003d new UniquePersonList(persons);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if an equivalent person exists in the address book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsPerson(ReadOnlyPerson key) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.contains(key);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the address book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such Person could be found."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.remove(toRemove);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    //@@author WuPeiHsuan"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     * Sorts all persons from the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public void sorted(String attribute) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        attribute \u003d attribute.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        switch (attribute) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case \"name\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                allPersons.SortByName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case \"appointment\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                allPersons.SortByAppointment();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case \"status\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                allPersons.SortByStatus();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons from the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.clear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        return allPersons.size();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Defensively copied UniquePersonList of all persons in the address book at the time of the call."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList getAllPersons() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniquePersonList(allPersons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.allPersons.equals(((AddressBook) other).allPersons));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-t": 4,
      "-": 86,
      "WuPeiHsuan": 20
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Appointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//@@author matthiaslum"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "public class Appointment implements Comparable\u003cAppointment\u003e{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String EXAMPLE \u003d \"2020 11 10 08 00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String MESSAGE_APPOINTMENT_CONSTRAINTS \u003d \"Appointment timings must not be earlier than current time, must be in the 24hr format of yyyy MM dd hh mm. Additionally appointment slots are in blocks of 15min. Thus, the time in minutes must be 00, 15, 30 or 45. No appointments earlier than 6am.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static DateTimeFormatter formatterTime \u003d DateTimeFormatter.ofPattern(\"yyyy MM dd kk mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public final String appointmentDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * Validates given appointment."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * @throws IllegalValueException if given date string is invalid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public Appointment(String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        date \u003d date.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        if (!isValidDate(date)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            throw new IllegalValueException(MESSAGE_APPOINTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.appointmentDate \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * Returns true if a given string is a valid person name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Boolean indicator \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            LocalDateTime time \u003d LocalDateTime.parse(test, formatterTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            if (time.getHour() \u003c6 | time.getMinute() %15 !\u003d 0 | time.compareTo(LocalDateTime.now()) \u003c0 ){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                indicator \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            indicator \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return (test.matches(NAME_VALIDATION_REGEX) \u0026 indicator);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public List\u003cString\u003e getWordsInDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return Arrays.asList(appointmentDate.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return appointmentDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                || (other instanceof Appointment // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \u0026\u0026 this.appointmentDate.equals(((Appointment) other).appointmentDate)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return appointmentDate.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    //@@author WuPeiHsuan"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    /**compare name for sorting function*/"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public int compareTo(Appointment appointment) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        return this.appointmentDate.compareTo(appointment.appointmentDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthiaslum": 79,
      "WuPeiHsuan": 7
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Doctor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "public class Doctor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author matthiaslum"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String EXAMPLE \u003d \"John Doe\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Doctor\u0027s names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public String doctorName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * @throws IllegalValueException if given doctor string is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public Doctor(String doctor) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        doctor \u003d doctor.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        if (!isValidName(doctor)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.doctorName \u003d doctor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * Returns true if a given string is a valid person name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return Arrays.asList(doctorName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    //@@author shawn-t"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    // to change doctor name"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public void ReferTo (String newDoctor) throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        newDoctor \u003d newDoctor.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        if (!isValidName(newDoctor)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        this.doctorName \u003d newDoctor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author matthiaslum"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return doctorName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                || (other instanceof Doctor // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \u0026\u0026 this.doctorName.equals(((Doctor) other).doctorName)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return doctorName.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shawn-t": 12,
      "matthiaslum": 65
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name implements Comparable\u003cName\u003e{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"John Doe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Person names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidName(name)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.asList(fullName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public int getNameLength(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return this.fullName.length();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**compare name for sorting function*/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Name name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.fullName.compareTo(name.fullName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "matthiaslum": 4
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person implements ReadOnlyPerson {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    private Appointment appointment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    private Doctor doctor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public LocalDateTime date \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Appointment appointment, Doctor doctor, Status status, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.doctor \u003ddoctor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getAppointment(), source.getDoctor(), source.getStatus(),  source.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public int nameLength(){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return name.getNameLength();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public Appointment getAppointment() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return appointment;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public Doctor getDoctor() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return doctor;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces this person\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.addAll(replacement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ReadOnlyPerson // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return Objects.hash(name, phone, email, address, appointment, doctor, status,  tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public LocalDateTime getLocalDateTime(){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void setLocalDateTime(LocalDateTime date){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static Person Refer () {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        this.doctorName \u003d Doctor(\"Dr. Teo\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    public void Refer (Doctor newDoctor) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        this.doctor \u003d newDoctor;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-t": 9,
      "-": 94,
      "matthiaslum": 35
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/ReadOnlyPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A read-only immutable interface for a Person in the addressbook."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyPerson {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    int nameLength();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Phone getPhone();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Email getEmail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Address getAddress();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    Appointment getAppointment();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    Doctor getDoctor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    LocalDateTime getLocalDateTime();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    void setLocalDateTime(LocalDateTime date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Status getStatus();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The returned {@code Set} is a deep copy of the internal {@code Set},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * changes on the returned list will not affect the person\u0027s internal tags."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyPerson other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                || (other.getAppointment().equals(this.getAppointment())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \u0026\u0026 other.getDoctor().equals(this.getDoctor())) //same appointment time with same doctor not allowed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getAddress().equals(this.getAddress()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats the person as text, showing all contact details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String detailIsPrivate \u003d \"(private) \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (getPhone().isPrivate()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(detailIsPrivate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getPhone())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (getEmail().isPrivate()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(detailIsPrivate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getEmail())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (getAddress().isPrivate()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(detailIsPrivate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        builder.append(getAddress()).append(\" Appointment: \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        builder.append(getAppointment());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        builder.append(\" Doctor: \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        builder.append(getDoctor());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        builder.append(\" Status: \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getStatus())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    default String getAsTextNameDateDoctor() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        int num \u003d 30 - nameLength();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        System.out.println(nameLength());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//        int initial \u003d 30;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//        while (num \u003c\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//            num \u003d initial - nameLength();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//            initial \u003d initial + 5;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        builder.append(String.format(\"%1$-\" + num + \"s\", getName()) + \"\\t\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        builder.append(\" Appointment: \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        builder.append(getAppointment() + \"\\t\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        builder.append(\" Doctor: \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        builder.append(getDoctor());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats a person as text, showing only non-private contact details."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    default String getAsTextHidePrivate() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getPhone().isPrivate()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\" Phone: \").append(getPhone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getEmail().isPrivate()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\" Email: \").append(getEmail());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getAddress().isPrivate()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\" Address: \").append(getAddress());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        builder.append(\"Appointment: \").append(getAppointment());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        builder.append(\" Doctor: \").append(getDoctor());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\" Status: \").append(getStatus());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "matthiaslum": 33
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Status.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "//@@author WuPeiHsuan"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "public class Status implements Comparable\u003cStatus\u003e{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static final String EXAMPLE \u003d \"Observation\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static final String MESSAGE_STATUS_CONSTRAINTS \u003d \"Status should be Observation/ Critical / Waiting for Surgery \" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            \"/ Therapy / Life Support / Waiting for doctor appointment\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static final String OBSERVATION \u003d \"Observation\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static final String THERAPY \u003d \"Therapy\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static final String SURGERY \u003d \"Waiting for Surgery\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static final String LIFE_SUPPORT \u003d \"Life Support\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static final String CRITICAL \u003d \"Critical\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static final String APPOINTMENT \u003d \"Waiting for doctor appointment\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public final String status;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     * Validates given status."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     * @throws IllegalValueException if given status string is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public Status(String status) throws IllegalValueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        status \u003d status.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        if (!isValidStatus(status)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            throw new IllegalValueException(MESSAGE_STATUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        if(!isCorrectStatus(status)){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            throw new IllegalValueException(MESSAGE_STATUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     * Returns true if a given string is a valid status."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static boolean isValidStatus(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public static boolean isCorrectStatus(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        switch (test){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case OBSERVATION:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case THERAPY:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case SURGERY:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case LIFE_SUPPORT:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case CRITICAL:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case APPOINTMENT:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                || (other instanceof Status // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                \u0026\u0026 this.status.equals(((Status) other).status)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        return status.hashCode();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    /**compare status for sorting function*/"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public int compareTo(Status status) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        return this.status.compareTo(status.status);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "WuPeiHsuan": 83
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#equals(Object)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class DuplicatePersonException extends DuplicateDataException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        protected DuplicatePersonException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation targeting a specified person in the list would fail because"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * there is no such matching person in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class PersonNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cPerson\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs empty person list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a person list with the given persons."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(Person... persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cPerson\u003e initialTags \u003d Arrays.asList(persons);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons a collection of persons"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the {@code persons} contains duplicate persons"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(Collection\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Utils.elementsAreUnique(persons)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(persons);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(UniquePersonList source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyPerson}s."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e immutableListView() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(ReadOnlyPerson toCheck) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personFoundAndDeleted) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons in list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     * New method to get size of address book :D"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     * Returns the number of persons in the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    //@@author WuPeiHsuan"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     * Sorts all persons in list by name."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public void SortByName(){"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        Comparator\u003cPerson\u003e person \u003d (p1, p2) -\u003e {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            Name name1 \u003d p1.getName();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            Name name2 \u003d p2.getName();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            return name1.compareTo(name2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        Collections.sort(internalList, person);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public void SortByAppointment(){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        Comparator\u003cPerson\u003e person \u003d (p1, p2) -\u003e {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            Appointment appointment1 \u003d p1.getAppointment();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            Appointment appointment2 \u003d p2.getAppointment();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            return appointment1.compareTo(appointment2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        Collections.sort(internalList, person);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public void SortByStatus(){"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        Comparator\u003cPerson\u003e person \u003d (p1, p2) -\u003e {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            Status status1 \u003d p1.getStatus();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            Status status2 \u003d p2.getStatus();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            return status1.compareTo(status2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        Collections.sort(internalList, person);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.internalList.equals("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                        ((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-t": 8,
      "-": 141,
      "WuPeiHsuan": 32
    }
  },
  {
    "path": "src/seedu/addressbook/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import seedu.addressbook.data.person.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "import seedu.addressbook.data.person.Doctor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern PERSON_INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e.+)\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern KEYWORDS_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003ckeywords\u003e\\\\S+(?:\\\\s+\\\\S+)*)\"); // one or more keywords separated by whitespace"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public static final Pattern PERSON_REFER_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            Pattern.compile(\"d/(?\u003cdoctor\u003e[^/]+)\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    + \"p/(?\u003ckeywords\u003e\\\\S+(?:\\\\s+\\\\S+)*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//            Pattern.compile(\"(?\u003ckeywords\u003e\\\\S+(?:\\\\s+\\\\S+)*)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//                    + \"d/(?\u003cdoctor\u003e[^/]+)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern PERSON_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisPhonePrivate\u003ep?)p/(?\u003cphone\u003e[^/]+)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisEmailPrivate\u003ep?)e/(?\u003cemail\u003e[^/]+)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisAddressPrivate\u003ep?)a/(?\u003caddress\u003e[^/]+)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    + \"m/(?\u003cappointment\u003e[^/]+)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    + \"d/(?\u003cdoctor\u003e[^/]+)\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"s/(?\u003cstatus\u003e[^/]+)\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final Pattern APPT_DATE_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    + \"m/(?\u003cdate\u003e[^/]+)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public static final Pattern DOCTORS_APPOINTMENT_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the user input could not be parsed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class ParseException extends Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ParseException(String message) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareAdd(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareDelete(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareFind(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            case DoctorAppointmentsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                return prepareFindDoctor(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            case LengthCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                return new LengthCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            case ReferCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                return prepareRefer(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareView(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            case ViewAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareViewAll(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                return prepareSort(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            case ApptDateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                return  prepareAppt(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD:// Fallthrough"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the add person command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author matthiaslum"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    private Command prepareAppt(String args){"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final Matcher matcher \u003d APPT_DATE_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        if (!matcher.matches())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ApptDateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        String doctor \u003d matcher.group(\"name\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        String appointment \u003d matcher.group(\"date\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        if (!Doctor.isValidName(doctor)){"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    ApptDateCommand.MESSAGE_INVALID_DOCTOR_NAME));        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        if (!ApptDateCommand.isValidDate(appointment)){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    ApptDateCommand.MESSAGE_DATE_CONSTRAINTS));        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return new ApptDateCommand("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                matcher.group(\"name\"),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                matcher.group(\"date\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    private Command prepareFindDoctor(String args) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final Matcher matcher \u003d DOCTORS_APPOINTMENT_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    DoctorAppointmentsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final String doctorName \u003d matcher.group(\"name\").trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        if (!Doctor.isValidName(doctorName)){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    DoctorAppointmentsCommand.MESSAGE_INVALID_DOCTOR_NAME));        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return new DoctorAppointmentsCommand(doctorName);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareAdd(String args){"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d PERSON_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"phone\"),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isPhonePrivate\")),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"email\"),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isEmailPrivate\")),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"address\"),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isAddressPrivate\")),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    matcher.group(\"appointment\"),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    matcher.group(\"doctor\"),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"status\"),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    //@@author WuPeiHsuan"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    private Command prepareSort(String args) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        switch (args) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case \"name\":"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case \"appointment\":"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            case \"status\":"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                return new SortCommand(args.trim());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the private prefix of a contact detail in the add command\u0027s arguments string is present."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isPrivatePrefixPresent(String matchedPrefix) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        return matchedPrefix.equals(\"p\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the new person\u0027s tags from the add command\u0027s tag arguments string."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Merges duplicate tag strings."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Set\u003cString\u003e getTagsFromArgs(String tagArguments) throws IllegalValueException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagArguments.isEmpty()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.emptySet();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // replace first delimiter prefix, then split"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        final Collection\u003cString\u003e tagStrings \u003d Arrays.asList(tagArguments.replaceFirst(\" t/\", \"\").split(\" t/\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tagStrings);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the delete person command."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareDelete(String args) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the view command."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareView(String args) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewCommand(targetIndex);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the view all command."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareViewAll(String args) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewAllCommand(targetIndex);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args arguments string to parse as index number"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed index number"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if no region of the args string could be found for the index"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NumberFormatException the args string region is not a valid number"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    private int parseArgsAsDisplayedIndex(String args) throws ParseException, NumberFormatException {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d PERSON_INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(\"Could not find index number to parse\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the find person command."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareFind(String args) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(keywordSet);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     * Parses arguments in the context of the refer patient command."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    //@@author shawn-t"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    private Command prepareRefer(String args) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        final Matcher matcherWithDoctorName \u003d PERSON_REFER_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        if (!matcherWithDoctorName.matches()) { // if doctor name is not present,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            final Matcher matcherWithOnlyKeywords \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            if (!matcherWithOnlyKeywords.matches()) { // and keywords are not in the correct form,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                        ReferCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            // if keywords are in the correct form"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            // keywords delimited by whitespace"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            final String[] keywords \u003d matcherWithOnlyKeywords.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            return new ReferCommand(keywordSet);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        // if doctor name is present,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        String doctorToReferTo \u003d matcherWithDoctorName.group(\"doctor\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        doctorToReferTo \u003d doctorToReferTo.trim();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        if (!Doctor.isValidName(doctorToReferTo)) { // if doctor name is invalid,"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                    ReferCommand.MESSAGE_INVALID_DOCTOR_NAME));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        return new ReferCommand("
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                matcherWithDoctorName.group(\"keywords\"),"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                matcherWithDoctorName.group(\"doctor\")"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        );"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shawn-t": 56,
      "-": 235,
      "matthiaslum": 53,
      "WuPeiHsuan": 17
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted person data holder class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdaptedPerson {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AdaptedContactDetail {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        @XmlValue"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        public String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        @XmlAttribute(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isPrivate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private AdaptedContactDetail phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private AdaptedContactDetail email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private AdaptedContactDetail address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    private String appointment;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    private String doctor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedPerson() {}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedPerson"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedPerson(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.isPrivate \u003d source.getPhone().isPrivate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.value \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        email.isPrivate \u003d source.getEmail().isPrivate();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        email.value \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        address.isPrivate \u003d source.getAddress().isPrivate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        address.value \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        appointment \u003d source.getAppointment().appointmentDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        doctor \u003d source.getDoctor().doctorName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        status \u003d source.getStatus().status;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.add(new AdaptedTag(tag));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tag.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // second call only happens if phone/email/address are all not null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return Utils.isAnyNull(name, phone, email, address)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                || Utils.isAnyNull(phone.value, email.value, address.value);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the Person object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone.value, this.phone.isPrivate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email email \u003d new Email(this.email.value, this.email.isPrivate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address address \u003d new Address(this.address.value, this.address.isPrivate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final Appointment appointment \u003d new Appointment(this.appointment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final Doctor doctor \u003d new Doctor(this.doctor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final Status status \u003d new Status(this.status);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        return new Person(name, phone, email, address, appointment, doctor, status, tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 109,
      "matthiaslum": 11
    }
  },
  {
    "path": "src/seedu/addressbook/ui/Formatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import seedu.addressbook.commands.ApptDateCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "import seedu.addressbook.commands.Indicator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Used for formatting text for display. e.g. for adding text decorations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A decorative prefix added to the beginning of lines printed by AddressBook */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LINE_PREFIX \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Format of indexed list item */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INDEXED_LIST_ITEM \u003d \"\\t%1$d. %2$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given strings for displaying to the user. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String format(String... messages) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String m : messages) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(LINE_PREFIX + m.replace(\"\\n\", LS + LINE_PREFIX) + LS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given list of persons for displaying to the user. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String format(List\u003c? extends ReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cString\u003e formattedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        if (Indicator.getLastCommand() \u003d\u003d \"ApptDate\"){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            Indicator.setLastCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            return ApptDateCommand.timetable;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        if (Indicator.getLastCommand() \u003d\u003d \"DoctorAppointments\"){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            for (ReadOnlyPerson person : persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                formattedPersons.add(person.getAsTextNameDateDoctor());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            for (ReadOnlyPerson person : persons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedPersons.add(person.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return format(asIndexedList(formattedPersons));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author matthiaslum"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    /** Formats a list of strings as an indexed list. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    private static String asIndexedList(List\u003cString\u003e listItems) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final StringBuilder formatted \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        int displayIndex \u003d 0 + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        for (String listItem : listItems) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            formatted.append(getIndexedListItem(displayIndex, listItem)).append(\"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        if (Indicator.getLastCommand() \u003d\u003d \"DoctorAppointments\"){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            Indicator.setLastCommand(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            return \"         NAME\" + String.format(\"%1$\" + 32+ \"s\", \"DATE\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    + String.format(\"%1$\" + 44+ \"s\", \"DOCTOR\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    + \"------------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    + formatted.toString()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    + \"------------------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            return formatted.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats a string as an indexed list item."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param visibleIndex index for this listing"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getIndexedListItem(int visibleIndex, String listItem) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_INDEXED_LIST_ITEM, visibleIndex, listItem);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "matthiaslum": 35
    }
  },
  {
    "path": "src/seedu/addressbook/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "import seedu.addressbook.accountmanager.AccountManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Main Window of the GUI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stoppable mainApp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private AccountManager accountManager \u003d new AccountManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogic(Logic logic){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setMainApp(Stoppable mainApp){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mainApp \u003d mainApp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea outputConsole;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandInput;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void onCommand(ActionEvent event) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            // utilize accountManager to handle login/register"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String userCommandText \u003d commandInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            String loginResult \u003d accountManager.accountCommandHandler(userCommandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            CommandResult msg \u003d new CommandResult(loginResult);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            displayResult(msg);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            clearCommandInput();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            if(accountManager.getLoginStatus()) // if logged in"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                String[] accountInfo \u003d userCommandText.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                if(accountInfo.length \u003d\u003d 1 \u0026\u0026 accountInfo[0].equals(\"logout\")){ // if the command is logout"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                    accountManager.logout();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                else{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    CommandResult result \u003d logic.execute(userCommandText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    if(isExitCommand(result)){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                        exitApp();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    displayResult(result);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    clearCommandInput();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            display(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void exitApp() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        accountManager.storeAccounts();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        mainApp.stop();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns true of the result given is the result of an exit command */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isExitCommand(CommandResult result) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return result.feedbackToUser.equals(ExitCommand.MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears the command input box */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void clearCommandInput() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        commandInput.setText(\"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears the output display area */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearOutputConsole(){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Displays the result of a command execution to the user. */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayResult(CommandResult result) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clearOutputConsole();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e resultPersons \u003d result.getRelevantPersons();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if(resultPersons.isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            display(resultPersons.get());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        display(result.feedbackToUser);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayWelcomeMessage(String version, String storageFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String storageFileInfo \u003d String.format(MESSAGE_USING_STORAGE_FILE, storageFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        display(MESSAGE_WELCOME, version, AccountManager.LOGIN_PROMPT, MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE, storageFileInfo);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the list of persons in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void display(List\u003c? extends ReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        display(new Formatter().format(persons));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the given messages on the output display area, after formatting appropriately."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void display(String... messages) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.setText(outputConsole.getText() + new Formatter().format(messages));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liguanlong": 20,
      "-": 109
    }
  },
  {
    "path": "test/data/StorageFileTest/ValidData.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAddressBook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eJohn Doe\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ejohnd@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003eJohn street, block 123, #01-01\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        \u003cappointment\u003e2021 12 15 13 00\u003c/appointment\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        \u003cdoctor\u003eDoctorTan\u003c/doctor\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstatus\u003eObservation\u003c/status\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBetsy Crowe\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"true\"\u003e1234567\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ebetsycrowe@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"true\"\u003eNewgate Prison\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        \u003cappointment\u003e2021 12 15 13 15\u003c/appointment\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        \u003cdoctor\u003eDoctorTan\u003c/doctor\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstatus\u003eObservation\u003c/status\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriend\u003c/tagged\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003ecriminal\u003c/tagged\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AddressBook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "matthiaslum": 4
    }
  },
  {
    "path": "test/java/seedu/addressbook/accountmanager/AccountManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "//@@author liguanlong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "package seedu.addressbook.accountmanager;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "import static org.junit.Assert.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "public class AccountManagerTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    // all the expected outputs"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private static final String SUCCESS \u003d \"Login Success, loading...\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private static final String INVALID_USERNAME_OR_PASSWORD \u003d \"Invalid username or password, please try again\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private static final String REGISTRATION_SUCCEED \u003d \"Registration succeed, please login using the username and password\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private static final String INVALID_FORMAT \u003d \"Please login or register using: \" + \"\\n\" + \"login username password\" + \"\\n\" + \"register username password\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private static final String USERNAME_REGISTERED \u003d \"The username has already been registered, please try a new username\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    private static final String WEAK_PASSWORD \u003d \"The password should contain at least one lowercase letter, one uppercase letter, and one digit\";    private AccountManager accountManager \u003d new AccountManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    public void setLoginStatus() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        accountManager.setLoginStatus(true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        assertEquals(accountManager.getLoginStatus(), true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    public void getLoginStatus() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        accountManager.setLoginStatus(false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        assertEquals(accountManager.getLoginStatus(), false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    public void checkLoginInfo() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "      "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        // all the inputs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        final String input1 \u003d \"login Admin Admin123\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        final String input2 \u003d \"some_random_string\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        final String input3 \u003d \"login wrong_username wrong_password\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        final String input4 \u003d \"register new new123\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        final String input5 \u003d \"register new New\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        final String input6 \u003d \"register new NEW123\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        final String input7 \u003d \"register new New123\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        final String input8 \u003d \"register Admin Admin345\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        final String input9 \u003d \"login new New123\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liguanlong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        // check if the actual outputs are equal to expected outputs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        assertEquals(accountManager.accountCommandHandler(input1), SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        assertEquals(accountManager.accountCommandHandler(input2), INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        assertEquals(accountManager.accountCommandHandler(input3), INVALID_USERNAME_OR_PASSWORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        assertEquals(accountManager.accountCommandHandler(input4), WEAK_PASSWORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        assertEquals(accountManager.accountCommandHandler(input5), WEAK_PASSWORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        assertEquals(accountManager.accountCommandHandler(input6), WEAK_PASSWORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        assertEquals(accountManager.accountCommandHandler(input7), REGISTRATION_SUCCEED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        assertEquals(accountManager.accountCommandHandler(input8), USERNAME_REGISTERED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "        assertEquals(accountManager.accountCommandHandler(input9), SUCCESS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liguanlong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liguanlong": 55
    }
  },
  {
    "path": "test/java/seedu/addressbook/logic/LogicTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * See https://github.com/junit-team/junit4/wiki/rules#temporaryfolder-rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile saveFile;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFile \u003d new StorageFile(saveFolder.newFile(\"testSaveFile.txt\").getPath());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFile.save(addressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new Logic(saveFile, addressBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        //Constructor is called in the setup() method which executes before every test, no need to call it here again."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the last shown list is empty"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastShownList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalid() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"       \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(invalidCommand,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that the result message is correct."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(String, String, AddressBook, boolean, List)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedMessage, AddressBook.empty(),false, Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the storage file content matches data in {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                                      AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                                      boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                                      List\u003c? extends ReadOnlyPerson\u003e lastShownList) throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, r.feedbackToUser);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(r.getRelevantPersons().isPresent(), isRelevantPersonsExpected);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if(isRelevantPersonsExpected){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(lastShownList, r.getRelevantPersons().get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, addressBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(lastShownList, logic.getLastShownList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBook, saveFile.load());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_unknownCommandWord() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String unknownCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(unknownCommand, HelpCommand.MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"help\", HelpCommand.MESSAGE_ALL_USAGES);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"exit\", ExitCommand.MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_clear() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(helper.generatePerson(1, true));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(helper.generatePerson(2, true));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(helper.generatePerson(3, true));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"clear\", ClearCommand.MESSAGE_SUCCESS, AddressBook.empty(), false, Collections.emptyList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add wrong args wrong args\", expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"add Valid Name 12345 e/valid@email.butNoPhonePrefix a/valid, address m/2011 11 03 08 00 d/Doctor\", expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"add Valid Name p/12345 valid@email.butNoPrefix a/valid, address m/2011 11 03 08 00 d/Doctor\", expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"add Valid Name p/12345 e/valid@email.butNoAddressPrefix valid, address m/2011 11 03 08 00 d/Doctor\", expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"add Valid Name p/12345 e/valid@email a/valid, address but no appointment, d/DoctorTan s/Observation\", expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"add Valid Name p/12345 e/valid@email a/valid, address but no doctor, m/2021 12 15 13 30 s/Observation\", expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author matthiaslum"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void execute_add_invalidPersonData() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"add []\\\\[;] p/12345 e/valid@e.mail a/valid, address, m/2021 12 15 13 00, d/DoctorTan s/Observation\", Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"add Valid Name p/not_numbers e/valid@e.mail a/valid, address, m/2021 12 15 13 15, d/DoctorTan s/Observation\", Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"add Valid Name p/12345 e/notAnEmail a/valid, address, m/2021 12 15 13 30, d/DoctorTan s/Observation\", Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"add Valid Name p/12345 e/valid@e.mail a/valid, address, m/2021 12 15 13 45, d/DoctorTan, s/Observation, t/invalid_-[.tag\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"add Valid Name p/12345 e/valid@e.mail a/valid, address, m/2021231231, d/DoctorTan s/Observation\", Appointment.MESSAGE_APPOINTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"add Valid Name p/12345 e/valid@e.mail a/valid, address, m/30nov, d/DoctorTan s/Observation\", Appointment.MESSAGE_APPOINTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"add Valid Name p/12345 e/valid@e.mail a/valid, address, m/2021 12 15 13 01, d/DoctorTan s/Observation\", Appointment.MESSAGE_APPOINTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"add Valid Name p/12345 e/valid@e.mail a/valid, address, m/1800 12 15 13 00, d/DoctorTan s/Observation\", Appointment.MESSAGE_APPOINTMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_add_successful() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toBeAdded \u003d helper.adam();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d new AddressBook();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                              String.format(AddCommand.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                              expectedAB,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                              false,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                              Collections.emptyList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author matthiaslum"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void execute_add_same_doctor_diff_name_diff_appt_successful() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person toBeAdded \u003d helper.generatePersonWithNameAppt(\"Rimmy\", \"2023 01 12 08 00\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person newPerson \u003d helper.generatePersonWithNameAppt(\"Rimmy JR\", \"2023 01 12 09 00\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        AddressBook expectedAB \u003d new AddressBook();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        expectedAB.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        addressBook.addPerson(toBeAdded); // person already in internal address book"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        expectedAB.addPerson(newPerson);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior(helper.generateAddCommand(newPerson),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, newPerson),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_addDuplicate_notAllowed() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toBeAdded \u003d helper.adam();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d new AddressBook();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(toBeAdded); // person already in internal address book"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author matthiaslum"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void execute_add_SameAppointment_notAllowed() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person toBeAdded \u003d helper.generatePersonWithNameAppt(\"Matthias\", \"2021 04 03 09 00\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        AddressBook expectedAB \u003d new AddressBook();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        expectedAB.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        addressBook.addPerson(toBeAdded); // person already in internal address book"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person DifferentNameSameAppointment \u003d helper.generatePersonWithNameAppt(\"Jacky\", \"2021 04 03 09 00\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                helper.generateAddCommand(DifferentNameSameAppointment),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_list_showsAllPersons() throws Exception {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(false, true);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d expectedAB.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, false, true);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"list\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                              Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                              expectedAB,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                              true,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                              expectedList);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view \", expectedMessage);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"view\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * targeting a single person in the last shown list, using visible index."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandWord to test assuming it targets a single person in the last shown list based on visible index."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInvalidIndexBehaviorForCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(false, true);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(commandWord + \" -1\", expectedMessage, AddressBook.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(commandWord + \" 0\", expectedMessage, AddressBook.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(commandWord + \" 3\", expectedMessage, AddressBook.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_view_onlyShowsNonPrivate() throws Exception {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(lastShownList);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                              String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getAsTextHidePrivate()),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                              expectedAB,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                              false,"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                              lastShownList);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 2\","
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                              String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getAsTextHidePrivate()),"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "                              expectedAB,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "                              false,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                              lastShownList);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_tryToViewMissingPerson_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d new AddressBook();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(p2);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(p2);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "                              Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                              expectedAB,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "                              false,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "                              lastShownList);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall \", expectedMessage);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author matthiaslum"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void execute_appointment_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoctorAppointmentsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior(\"appointment\", expectedMessage);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void execute_apptDate_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ApptDateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior(\"apptDate \", expectedMessage);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior(\"apptDate Matthias \", expectedMessage);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"viewall\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_viewAll_alsoShowsPrivate() throws Exception {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(lastShownList);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 1\","
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "                            String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getAsTextShowAll()),"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "                            expectedAB,"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "                            false,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "                            lastShownList);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "                            String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getAsTextShowAll()),"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "                            expectedAB,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "                            false,"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "                            lastShownList);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_tryToViewAllPersonMissingInAddressBook_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d new AddressBook();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.addPerson(p1);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "                                Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedAB,"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "                                false,"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "                                lastShownList);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete \", expectedMessage);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"delete\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_removesCorrectPerson() throws Exception {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.removePerson(p2);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "                                String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, p2),"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedAB,"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "                                false,"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "                                threePersons);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_delete_missingInAddressBook() throws Exception {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedAB.removePerson(p2);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(p2);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "                                Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedAB,"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "                                false,"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "                                threePersons);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_invalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find \", expectedMessage);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_onlyMatchesFullWordsInNames() throws Exception {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithNameAppt(\"bla bla KEY bla\", \"2022 04 03 08 00\");"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithNameAppt(\"bla KEY bla bceofeia\", \"2022 04 03 08 15\");"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithNameAppt(\"KE Y\", \"2022 04 03 08 30\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithNameAppt(\"KEYKEYKEY sduauo\", \"2022 04 03 08 45\");"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "                                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedAB,"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "                                true,"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedList);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_isCaseSensitive() throws Exception {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithNameAppt(\"bla bla KEY bla\", \"2022 04 03 08 00\");"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithNameAppt(\"bla KEY bla bceofeia\" , \"2022 04 03 08 15\" );"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithNameAppt(\"key key\", \"2022 04 03 08 30\");"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithNameAppt(\"KEy sduauo\", \"2022 04 03 08 45\");"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "                                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedAB,"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "                                true,"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedList);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_find_matchesIfAnyKeywordPresent() throws Exception {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithNameAppt(\"bla bla KEY bla\", \"2022 04 03 08 00\");"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithNameAppt(\"bla rAnDoM bla bceofeia\", \"2022 04 03 08 15\");"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithNameAppt(\"key key\", \"2022 04 03 08 30\");"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithNameAppt(\"KEy sduauo\", \"2022 04 03 08 45\");"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY rAnDoM\","
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "                                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedAB,"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "                                true,"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "                                expectedList);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author matthiaslum"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void appointment_sorts_persons_chronologoically() throws Exception {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithNameAppt(\"Kumar\", \"2021 01 10 11 00\");"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithNameAppt(\"Betty\", \"2021 01 10 09 00\");"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p3 \u003d helper.generatePersonWithNameAppt(\"Somali\", \"2021 01 10 10 00\");"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p4 \u003d helper.generatePersonWithNameAppt(\"Xiao ming\", \"2021 01 08 11 00\");"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p5 \u003d helper.generatePersonWithNameAppt(\"Lily\", \"2021 01 01 17 15\");"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        List\u003cPerson\u003e fivePersons \u003d helper.generatePersonList(p1, p2, p3, p4, p5);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(fivePersons);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(p5, p4, p2, p3, p1);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        helper.addToAddressBook(addressBook, fivePersons);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior(\"appointment DoctorTan\","
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                Command.getMessageForAppointmentsShownSummary(expectedList, \"DoctorTan\"),"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void apptDate_sorts_persons_chronologoically() throws Exception {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithNameAppt(\"Kumar\", \"2021 01 10 11 00\");"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithNameAppt(\"Betty\", \"2021 01 10 09 00\");"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p3 \u003d helper.generatePersonWithNameAppt(\"Somali\", \"2021 01 10 10 00\");"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p4 \u003d helper.generatePersonWithNameAppt(\"Xiao ming\", \"2021 01 10 17 30\");"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p5 \u003d helper.generatePersonWithNameAppt(\"Lily\", \"2021 01 10 17 00\");"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        List\u003cPerson\u003e fivePersons \u003d helper.generatePersonList(p1, p2, p3, p4, p5);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(fivePersons);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(p2, p3, p1, p5, p4);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        helper.addToAddressBook(addressBook, fivePersons);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior(\"apptDate DoctorTan m/2021 01 10\","
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                Command.getMessageForAppointmentsShownSummary(expectedList, \"DoctorTan\"),"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void execute_appointment_isDoctorCaseSensitive() throws Exception {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithNameApptDoctor(\"Person1\", \"2022 04 03 08 00\", \"doctor tan\");"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithNameApptDoctor(\"Person2\" , \"2022 04 03 08 15\", \"doctor tan\" );"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithNameApptDoctor(\"Person3\", \"2022 04 03 08 30\", \"DOCTOR TAN\");"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithNameApptDoctor(\"Person4\", \"2022 04 03 08 45\", \"DOCTOR TAN\");"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior(\"appointment doctor tan\","
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                Command.getMessageForAppointmentsShownSummary(expectedList, \"doctor tan\"),"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void execute_apptDate_isDoctorCaseSensitive() throws Exception {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithNameApptDoctor(\"Person1\", \"2022 04 03 08 00\", \"doctor tan\");"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithNameApptDoctor(\"Person2\" , \"2022 04 03 08 15\", \"doctor tan\" );"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithNameApptDoctor(\"Person3\", \"2022 04 03 08 30\", \"DOCTOR TAN\");"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithNameApptDoctor(\"Person4\", \"2022 04 03 08 45\", \"DOCTOR TAN\");"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        AddressBook expectedAB \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        assertCommandBehavior(\"apptDate doctor tan m/2022 04 03\","
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                Command.getMessageForAppointmentsShownSummary(expectedList, \"doctor tan\"),"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                expectedAB,"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "     * A utility class to generate test data."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "    class TestDataHelper{"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "        Person adam() throws Exception {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(\"Adam Brown\");"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone privatePhone \u003d new Phone(\"111111\", true);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d new Email(\"adam@gmail.com\", false);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "            Address privateAddress \u003d new Address(\"111, alpha street\", true);"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            Appointment appointment \u003d new Appointment(\"2021 12 15 13 00\");"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            Doctor doctor \u003d new Doctor(\"DoctorTan\");"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "            Status status \u003d new Status(\"Observation\");"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(tag1, tag2));"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            return new Person(name, privatePhone, email, privateAddress, appointment, doctor, status, tags);"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates a valid person using the given seed."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "         * Running this function with the same parameter values guarantees the returned person will have the same state."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "         * Each unique seed will generate a unique Person object."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param seed used to generate the person data field values"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isAllFieldsPrivate determines if private-able fields (phone, email, address) will be private"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "        Person generatePerson(int seed, boolean isAllFieldsPrivate) throws Exception {"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            String minute \u003d String.valueOf(seed*15);"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            System.out.println(minute);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Name(\"Person \" + seed),"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Phone(\"\" + Math.abs(seed), isAllFieldsPrivate),"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Email(seed + \"@email\", isAllFieldsPrivate),"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"House of \" + seed, isAllFieldsPrivate),"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    new Appointment((\"2021 12 15 13 \" + minute) ),"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    new Doctor(\"DoctorTan\"),"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Status(\"Observation\"),"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag\" + Math.abs(seed)), new Tag(\"tag\" + Math.abs(seed + 1))))"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Generates the correct add command based on the person given */"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "        String generateAddCommand(Person p) {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "            StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add(\"add\");"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add(p.getName().toString());"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add((p.getPhone().isPrivate() ? \"pp/\" : \"p/\") + p.getPhone());"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "            cmd.add((p.getEmail().isPrivate() ? \"pe/\" : \"e/\") + p.getEmail());"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            cmd.add((p.getAddress().isPrivate() ? \"pa/\" : \"a/\") + p.getAddress() + \"m/\"+p.getAppointment() + \"d/\"+p.getDoctor() + \"s/\"+p.getStatus());"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d p.getTags();"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "            for(Tag t: tags){"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "                cmd.add(\"t/\" + t.tagName);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "            return cmd.toString();"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates an AddressBook with auto-generated persons."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "         *                          private."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook generateAddressBook(Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "            addToAddressBook(addressBook, isPrivateStatuses);"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates an AddressBook based on the list of Persons given."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook generateAddressBook(List\u003cPerson\u003e persons) throws Exception{"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "            addToAddressBook(addressBook, persons);"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "            return addressBook;"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "         * Adds auto-generated Person objects to the given AddressBook"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param addressBook The AddressBook to which the Persons will be added"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isPrivateStatuses flags to indicate if all contact details of generated persons should be set to"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "         *                          private."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "        void addToAddressBook(AddressBook addressBook, Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "            addToAddressBook(addressBook, generatePersonList(isPrivateStatuses));"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "         * Adds the given list of Persons to the given AddressBook"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        void addToAddressBook(AddressBook addressBook, List\u003cPerson\u003e personsToAdd) throws Exception{"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "            for(Person p: personsToAdd){"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBook.addPerson(p);"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "         * Creates a list of Persons based on the give Person objects."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e generatePersonList(Person... persons) throws Exception{"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "            for(Person p: persons){"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "                personList.add(p);"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "            return personList;"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "         * Generates a list of Persons based on the flags."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "         *                          private."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e generatePersonList(Boolean... isPrivateStatuses) throws Exception{"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "            for(Boolean p: isPrivateStatuses){"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "                persons.add(generatePerson(i++, p));"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "         * Generates a Person object with given name and given appointment. Other fields will have some dummy values."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person generatePersonWithNameAppt(String name, String appointment) throws Exception {"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Name(name),"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Phone(\"1\", false),"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Email(\"1@email\", false),"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"House of 1\", false),"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    new Appointment(appointment),"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    new Doctor(\"DoctorTan\"),"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Status(\"Observation\"),"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "                    Collections.singleton(new Tag(\"tag\"))"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        //@@author matthiaslum"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "         * Generates a Person object with given name, given appointment, and given doctor. Other fields will have some dummy values."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "         */"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        Person generatePersonWithNameApptDoctor(String name, String appointment, String doctor) throws Exception {"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    new Name(name),"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    new Phone(\"1\", false),"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    new Email(\"1@email\", false),"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    new Address(\"House of 1\", false),"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    new Appointment(appointment),"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    new Doctor(doctor),"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    new Status(\"Observation\"),"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                    Collections.singleton(new Tag(\"tag\"))"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "            );"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 561,
      "matthiaslum": 213
    }
  },
  {
    "path": "test/java/seedu/addressbook/parser/ParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyInput_returnsIncorrect() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] emptyInputs \u003d { \"\", \"  \", \"\\n  \\n\" };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, emptyInputs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void unknownCommandWord_returnsHelp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"unknowncommandword arguments arguments\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test 0-argument commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"clear\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ClearCommand.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void listCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"list\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ListCommand.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void exitCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"exit\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test ingle index argument commands"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_noArgs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"delete\", \"delete \" };"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"delete notAnumber \", \"delete 8*wh12\", \"delete 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"delete \" + testIndex;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final DeleteCommand result \u003d parseAndAssertCommandType(input, DeleteCommand.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_noArgs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"view\", \"view \" };"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"view notAnumber \", \"view 8*wh12\", \"view 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 2;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"view \" + testIndex;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final ViewCommand result \u003d parseAndAssertCommandType(input, ViewCommand.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_noArgs() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"viewall\", \"viewall \" };"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"viewall notAnumber \", \"viewall 8*wh12\", \"viewall 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 3;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"viewall \" + testIndex;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final ViewAllCommand result \u003d parseAndAssertCommandType(input, ViewAllCommand.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test find persons by keyword in name command"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_invalidArgs() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                \"find\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \"find \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_validArgs_parsedCorrectly() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"find \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_duplicateKeys_parsedCorrectly() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // duplicate every keyword"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"find \" + String.join(\" \", keySet) + \" \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test add person command"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_invalidArgs() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add\","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add \","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add wrong args format\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                // no phone prefix"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(\"add $s $s e/$s a/$s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                // no email prefix"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(\"add $s p/$s $s a/$s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                // no address prefix"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(\"add $s p/$s e/$s $s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_invalidPersonDataInArgs() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidName \u003d \"[]\\\\[;]\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validName \u003d Name.EXAMPLE;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidPhoneArg \u003d \"p/not__numbers\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validPhoneArg \u003d \"p/\" + Phone.EXAMPLE;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidEmailArg \u003d \"e/notAnEmail123\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validEmailArg \u003d \"e/\" + Email.EXAMPLE;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidTagArg \u003d \"t/invalid_-[.tag\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // address can be any string, so no invalid address"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        final String addCommandFormatString \u003d \"add $s $s $s a/\" + Address.EXAMPLE;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // test each incorrect person data field argument individually"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid name"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, invalidName, validPhoneArg, validEmailArg),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid phone"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, invalidPhoneArg, validEmailArg),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid email"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, invalidEmailArg),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid tag"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, validEmailArg) + \" \" + invalidTagArg"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_validPersonData_parsedCorrectly() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        final Person testPerson \u003d generateTestPerson();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d convertPersonToAddCommandString(testPerson);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        final AddCommand result \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getPerson(), testPerson);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_duplicateTags_merged() throws IllegalValueException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        final Person testPerson \u003d generateTestPerson();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d convertPersonToAddCommandString(testPerson);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : testPerson.getTags()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            // create duplicates by doubling each tag"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            input +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        final AddCommand result \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getPerson(), testPerson);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person generateTestPerson() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                new Name(Name.EXAMPLE),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(Phone.EXAMPLE, true),"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(Email.EXAMPLE, false),"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(Address.EXAMPLE, true),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                new Appointment(Appointment.EXAMPLE),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                new Doctor(Doctor.EXAMPLE),"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                new Status(Status.EXAMPLE),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag1\"), new Tag(\"tag2\"), new Tag(\"tag3\")))"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(\"test person data should be valid by definition\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String convertPersonToAddCommandString(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d \"add \""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                + person.getName().fullName"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                + (person.getPhone().isPrivate() ? \" pp/\" : \" p/\") + person.getPhone().value"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                + (person.getEmail().isPrivate() ? \" pe/\" : \" e/\") + person.getEmail().value"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                + (person.getAddress().isPrivate() ? \" pa/\" : \" a/\") + person.getAddress().value"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                +(\"m/\")+person.getAppointment().appointmentDate"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                +(\"d/\")+person.getDoctor().doctorName"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                +(\"s/\")+person.getStatus().status;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : person.getTags()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            addCommand +\u003d \" t/\" + tag.tagName;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    //@@author WuPeiHsuan"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     * Test sort command"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public void sortCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String input \u003d \"sort name\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        parseAndAssertCommandType(input, SortCommand.class);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public void sortCommand_invalidArgs() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                \"sort\","
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                \"sort address\","
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                \"sort 123\","
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                \"sort Appointment\""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     * Test invalid status"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    public void addCommand_invalidStatus() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String validName \u003d Name.EXAMPLE;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String validPhoneArg \u003d \"p/\" + Phone.EXAMPLE;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String validEmailArg \u003d \"e/\" + Email.EXAMPLE;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String anyAddress \u003d \"a/\" + Address.EXAMPLE;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String addCommandFormatString \u003d \"add $s $s $s $s $s $s $s\";"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String validAppointmentArg \u003d \"m/\" + Appointment.EXAMPLE;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String validDoctorArg \u003d \"p/\" + Doctor.EXAMPLE;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String invalidStatus1 \u003d \"s/\";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String invalidStatus2 \u003d \"s/abc\";"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String invalidStatus3 \u003d \"s/critical\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        // test each incorrect person data field argument individually"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                // invalid status 1"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, validEmailArg, anyAddress, validAppointmentArg, validDoctorArg, invalidStatus1),"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                // invalid status 2"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, validEmailArg, anyAddress, validAppointmentArg, validDoctorArg, invalidStatus2),"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                // invalid status 3"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, validEmailArg, anyAddress, validAppointmentArg, validDoctorArg, invalidStatus3)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "WuPeiHsuan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     * Test refer person command"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    // @@author shawn-t"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public void referCommand_invalidArgs() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                \"refer\","
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                \"refer \""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        };"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReferCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author matthiaslum"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void appointmentCommand_invalidArgs() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"appointment\","
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"appointment  \""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        };"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoctorAppointmentsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void apptDateCommand_invalidArgs() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"apptDate validname r23r2\","
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"apptDate  \","
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"apptDate\","
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"apptDate NODATE\","
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        };"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ApptDateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    //@@author shawn-t"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    public void referCommand_invalidDoctorNameInArgs() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                // invalid doctor names"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                \"refer d/Dr. p/John Doe\","
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                \"refer d/Dr, p/John Doe\","
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                \"refer d/Dr! p/John Doe\","
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                \"refer d/Dr@ p/John Doe\","
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "                \"refer d/#@! p/John Doe\""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        };"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReferCommand.MESSAGE_INVALID_DOCTOR_NAME);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author matthiaslum"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void appointmentCommand_invalidDoctorNameInArgs() {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                // invalid doctor names"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"appointment Dr.\","
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"appointment Dr,\","
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"appointment Dr!\","
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"appointment Dr@\","
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"appointment #@!\""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        };"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoctorAppointmentsCommand.MESSAGE_INVALID_DOCTOR_NAME);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void apptDateCommand_invalidDoctorNameInArgs() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                // invalid doctor names"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"apptDate Dr. m/2020 11 12\","
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"apptDate Dr, m/2020 11 12\","
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"apptDate Dr! m/2020 11 12\","
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"apptDate Dr@ m/2020 11 12\","
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"apptDate #@! m/2020 11 12\""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        };"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ApptDateCommand.MESSAGE_INVALID_DOCTOR_NAME);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    public void apptDateCommand_invalidDateInArgs() {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                // invalid doctor names"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"apptDate Dr m/2020 11 12 21\","
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"apptDate Dr m/2020 100 22\","
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"apptDate Dr m/30Nov\","
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                \"apptDate Dr m/223232322323232233223\","
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        };"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ApptDateCommand.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    public void referCommand_validArgs_parsedCorrectly() {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        final String input \u003d \"refer \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        final ReferCommand result \u003d"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//                parseAndAssertCommandType(input, ReferCommand.class);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    public void referCommand_duplicateKeys_parsedCorrectly() {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        // duplicate every keyword"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        final String input \u003d \"refer \" + String.join(\" \", keySet) + \" \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        final ReferCommand result \u003d"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//                parseAndAssertCommandType(input, ReferCommand.class);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    public void referCommand_validPersonData_parsedCorrectly() {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        final String referArgsString \u003d generateTestRefer();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        final ReferCommand result1 \u003d parseAndAssertCommandType(referArgsString, ReferCommand.class);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        assertEquals(result1, referArgsString);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        final String referArgsStringWithDoctorName \u003d generateTestReferWithDoctorName();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        final ReferCommand result2 \u003d parseAndAssertCommandType(referArgsStringWithDoctorName, ReferCommand.class);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        assertEquals(result2, referArgsStringWithDoctorName);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    private static String generateTestRefer() {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//            return \"refer \" + new Name(Name.EXAMPLE).toString();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//            throw new RuntimeException(\"test person data should be valid by definition\");"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    private static String generateTestReferWithDoctorName() {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//            return \"refer d/\" + new Doctor(Doctor.EXAMPLE).toString() + \" p/\" + new Name(Name.EXAMPLE).toString();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//            throw new RuntimeException(\"test person data should be valid by definition\");"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "shawn-t"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "shawn-t"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "     * Utility methods"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that parsing the given inputs will return IncorrectCommand with the given feedback message."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "    private void parseAndAssertIncorrectWithMessage(String feedbackMessage, String... inputs) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "            final IncorrectCommand result \u003d parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(result.feedbackToUser, feedbackMessage);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "     * Utility method for parsing input and asserting the class/type of the returned command object."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input to be parsed"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed command object"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT extends Command\u003e T parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "        final Command result \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        return (T) result;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-t": 81,
      "-": 304,
      "matthiaslum": 73,
      "WuPeiHsuan": 59
    }
  },
  {
    "path": "test/java/seedu/addressbook/storage/StorageFileTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.util.TestUtil.assertTextFilesEqual;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageFileTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d \"test/data/StorageFileTest\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        new StorageFile(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_noTxtExtension_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        new StorageFile(TEST_DATA_FOLDER + \"/\" + \"InvalidfileName\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_invalidFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // The file contains valid xml data, but does not match the AddressBook class"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getStorage(\"InvalidData.txt\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.load();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_validFormat() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook actualAB \u003d getStorage(\"ValidData.txt\").load();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAB \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensure loaded AddressBook is properly constructed with test data"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: overwrite equals method in AddressBook class and replace with equals method below"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(actualAB.getAllPersons(), expectedAB.getAllPersons());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullAddressBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_validAddressBook() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidData.txt\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    // getPath() method in StorageFile class is trivial so it is not tested"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the contents of two storage files are the same."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStorageFilesEqual(StorageFile sf1, StorageFile sf2) throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTextFilesEqual(Paths.get(sf1.getPath()), Paths.get(sf2.getPath()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile getStorage(String fileName) throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile(TEST_DATA_FOLDER + \"/\" + fileName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile getTempStorage() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile(testFolder.getRoot().getPath() + \"/\" + \"temp.txt\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook getTestAddressBook() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        ab.addPerson(new Person(new Name(\"John Doe\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Phone(\"98765432\", false),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Email(\"johnd@gmail.com\", false),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Address(\"John street, block 123, #01-01\", false),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                                new Appointment(\"2021 12 15 13 00\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                                new Doctor(\"DoctorTan\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Status(\"Observation\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                                Collections.emptySet()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ab.addPerson(new Person(new Name(\"Betsy Crowe\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Phone(\"1234567\", true),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Email(\"betsycrowe@gmail.com\", false),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Address(\"Newgate Prison\", true),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                                new Appointment(\"2021 12 15 13 15\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthiaslum"
        },
        "content": "                                new Doctor(\"DoctorTan\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Status(\"Observation\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"friend\"), new Tag(\"criminal\")))));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 109,
      "matthiaslum": 4
    }
  }
]
