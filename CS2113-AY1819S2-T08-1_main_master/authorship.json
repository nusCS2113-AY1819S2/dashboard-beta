[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Address Book (Level 4)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "articstranger"
        },
        "content": "https://travis-ci.com/cs2113-ay1819s2-t08-1/main[image:https://travis-ci.com/cs2113-ay1819s2-t08-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "articstranger"
        },
        "content": "//https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "articstranger"
        },
        "content": "//https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "articstranger"
        },
        "content": "//https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "articstranger"
        },
        "content": "Hello! Welcome to VolunCheer, a new desktop volunteer management application. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "articstranger"
        },
        "content": "This application aims to help project managers within voluntary organisations manage their responsibilities easily."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "articstranger"
        },
        "content": "Features include:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "articstranger"
        },
        "content": "* Easy adding/removing of people/projects"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "articstranger"
        },
        "content": "* Calendar to keep track of project dates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "articstranger"
        },
        "content": "For more information, please visit the User Guide below."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "articstranger"
        },
        "content": "* The original source of the code was adapted from the AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "articstranger": 16,
      "-": 28
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "      \"githubId\": \"ndhuu\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "      \"displayName\": \"NGU...HUU\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "      \"authorNames\": [\"ndhuu\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "      \"githubId\": \"articstranger\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "      \"displayName\": \"WON...EMY\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "      \"authorNames\": [\"articstranger\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "      \"githubId\": \"swalahlah\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "      \"displayName\": \"LIO...HUI\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "      \"authorNames\": [\"swalahlah\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "      \"githubId\": \"quinnzzzzz\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "      \"displayName\": \"ZHA... RU\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "      \"authorNames\": [\"quinnzzzzz\", \"Quinn Zhao\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 25
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.vintage\u0027, name: \u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    archiveName \u003d \u0027VolunCHeer.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.robot\u0027   : \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.order\u0027    : \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.text\u0027     : \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            linkcss             : true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stylesheet          : \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            icons               : \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            experimental        : true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            sectlinks           : true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            idprefix            : \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            idseparator         : \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-root\u0027         : \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-name\u0027         : \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-githuburl\u0027    : \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-seedu\u0027        : true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from(\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 236,
      "ndhuu": 1
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "        \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"file\" value\u003d\"config/checkstyle/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Required for SuppressionCommentFilter to work --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"FileContentsHolder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        IMPORT CHECKS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          1. STATIC: static imports"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        An import statement is redundant if:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "          * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "          * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "          * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        An import statement is unused if:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "          It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        NAMING CHECKS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "          Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "          C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "              if {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "              } else"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/pre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpre\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "              if {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "              }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "              else"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/pre\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!--"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            else if {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "              return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (true)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "              return 1; // Not allowed"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"UpperEll\"/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        ORDER CHECKS"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "             @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "          1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "          2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "          3. Constructors"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "          4. Methods"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                 8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                 public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                 synchronized, native, strictfp"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "              --\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        WHITESPACE CHECKS"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                 This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                 by regular or curly braces."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                 This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "                 \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "                 \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                   e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                 \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                   e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                 This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "             a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "             a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "                 a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "                 a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "                 /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                 a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                 a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "                 /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "                 This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        JAVADOC CHECKS"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks public methods that have more than 1 line of code."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "              Single line of code methods are often due to refactor for readability."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cproperty name\u003d\"allowedAnnotations\""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                      value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that every non-trivial private method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks private methods that have more than 3 lines of code."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "              We define methods that have more than 3 lines of code as non-trivial."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"minLineCount\" value\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cproperty name\u003d\"allowedAnnotations\""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                      value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"scope\" value\u003d\"private\"/\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 416,
      "ndhuu": 4
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "We are a group of students from AY 18/19, team 08-1, currently studying in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "As part of our software engineering module, CS2113T, **VolunCHeer** was developed with the aim to help project managers to manage multiple projects efficiently and effectively."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d\u003d Zhao Jun Ru"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "image::quinnzzzzz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "{empty}[https://github.com/quinnzzzzz[github]][\u003c\u003cZhaoJunRu#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "Role: Team Lead/Developer +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "Responsibilities: Deadline \u0026 Deliverables, Scheduling and Tracking, Documentation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d\u003d Wong Kai Wen Jeremy"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "image::articstranger.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "{empty}[http://github.com/articstranger[github]][\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "Role: Git expert/Travis CI/Developer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "Responsibilities: Handle Git Hub PRs, Travis Build"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d\u003d Nguyen Dang Huu"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "image::ndhuu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "{empty}[http://github.com/ndhuu[github]][\u003c\u003cHuu#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "Role: Head Developer +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "Responsibilities: Integration, Code quality"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d\u003d Liow Zhu Hui"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "image::swalahlah.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "{empty}[http://github.com/swalahlah[github]][\u003c\u003cZhuhui#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "Role: Developer/Tester +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "Responsibilities: UI/UX design, Testing"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "swalahlah": 22,
      "-": 28
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/cs2113-ay1819s2-t08-1/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "* *Email* : If you have any enquires, please do connect with us at `WeAreVolunCHeer@gmail.com`"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d Voluncheer - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ":repoURL: https://github.com/cs2113-ay1819s2-t08-1/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "By: `CS2113T T08-01`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/Voluncheer/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/Voluncheer/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ". Run the `seedu.Voluncheer.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/Voluncheer/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `deleteVolunteer 1`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ".Component interactions for `deleteVolunteer 1` command"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/Voluncheer/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/Voluncheer/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "link:{repoURL}/src/main/java/seedu/Voluncheer/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ".  `Logic` uses the `VoluncheerBookParser` class to parse the user command."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a volunteer)."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/Voluncheer/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* stores the Volunteer Book, Beneficiary Book, Project Book data."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* manages the interaction and relationship between different objects (Vounteer, Beneficiary, Project)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cObject\u003e` that can be \u0027observed\u0027 (Object can be Vounteer, Beneficiary, Project). e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/Voluncheer/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* can save the Voluncheer Book data in json format and read it back."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Classes used by multiple components are in the `seedu.voluncheerbook.commons` package."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "// tag::[recommendationCommandLine][]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d [Proposed] Command Line Recommendation feature"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "The command line recommendation feature is facilitated by the `CommandLineParser`. It imports the \u0027CliSyntax.Java\u0027"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "and stores internally the `UserClosestInput` and `CommandUsed`. It updates the `UserClosestInput` and process to"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "give suggestions."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Given below is an example usage scenario and how the command line recommendation feature behaves at each step."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Step 1: The user types in a command keyword then type [space], the CommandLineParser is initialized which stores the"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "`UserClosestInput` and `CommandUsed`. Then the command line show the command syntax."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Step 2: The user continues to type, `UserClosestInput` takes the input and stores. There are 2 alternatives:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* If the user types a slash [\\] the `UserClosestInput` waits for syntax and when syntax match, shows the recommandation"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "list for that particular slash sub syntax."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* If the user types without the slash [\\] the example remains."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Step 3: After the users type [Enter] the class is cleared."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "image::CommandLineRecommendationSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How often should the `UserClosestInput` refreshs itself"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* **Alternative 1 (current choice):** Everytime the [space] key is used."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Cons: Unable to dynamicly support the user."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* **Alternative 2:** Everytime a new character is type."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Pros: Very dynamic in the UI and supporting the user."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Cons: Potential to cause lagging, harder to implement."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect (proposed): Choices for user to quickly choose the recommendation"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* **Alternative 1 (current choice):** [tab] when only 1 choice left."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Cons: Unoptimized for this particular purpose."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* **Alternative 2:** Arrow key."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Pros: Good for user experiences."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Cons: Might be difficult to implement."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "// end::recommendationCommandLine[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "articstranger"
        },
        "content": "// tag::filterexport[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "articstranger"
        },
        "content": "\u003d\u003d\u003d Filtered Export feature"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "articstranger"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "articstranger"
        },
        "content": "To facilitate the filtering mechanism, a new `points` integer field is added to the `Volunteer` class:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "articstranger"
        },
        "content": ".Volunteer class with new points field"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "articstranger"
        },
        "content": "image::Volunteerclasswithpoints.jpg[width\u003d\"800\"]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "articstranger"
        },
        "content": "`points` was implemented as a integer instead of a class for ease of access. Also, it is not directly influenced by"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "articstranger"
        },
        "content": "any input from the user, as input has been checked by the the other classes in `Volunteer`. Hence, no accompanying"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "articstranger"
        },
        "content": "methods are necessary."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "articstranger"
        },
        "content": "This feature revolves around 3 commands:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "articstranger"
        },
        "content": ". `map` Command"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "articstranger"
        },
        "content": ". `sort` Command"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "articstranger"
        },
        "content": ". `exportV` Command"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "articstranger"
        },
        "content": "For the `map` command, the user inputs the specific criteria to map `Volunteers` on, as well as the points."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "articstranger"
        },
        "content": "Upon execution of the `map` command, the following sequence diagram shows how the map command works:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "articstranger"
        },
        "content": ".Sequence diagram of the map command"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "articstranger"
        },
        "content": "image::MapSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "articstranger"
        },
        "content": "`MapCommandParser` will check the given arguments for correctness, such as proper points or valid comparator."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "articstranger"
        },
        "content": "It then creates a `MapObject` and stores the given arguments in a `Pair` of \u003cpoints, conditions\u003e and passes it to `MapCommand`, which passes it to `Model`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "articstranger"
        },
        "content": "by calling `mapAllVolunteers`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "articstranger"
        },
        "content": "Within the model, `mapAllVolunteers()` is as shown:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "articstranger"
        },
        "content": "----"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "articstranger"
        },
        "content": "public void mapAllVolunteer(MapObject map) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        versionedAddressBook.getVolunteerList().forEach(volunteer -\u003e {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            volunteer.resetPoints();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            volunteer.addPoints(checkAge(map, volunteer));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            volunteer.addPoints(checkRace(map, volunteer));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            volunteer.addPoints(checkRace(map, volunteer));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        });"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "articstranger"
        },
        "content": "----"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "articstranger"
        },
        "content": "The `checkAge`, `checkRace` and `checkRace` methods check each `Volunteer` and"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "articstranger"
        },
        "content": "return the given points for that criteria,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "articstranger"
        },
        "content": "which `addPoints` adds to them."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "articstranger"
        },
        "content": "[large]*`Sort` Command*"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "articstranger"
        },
        "content": "For the `Sort` command, the `Model` calls the `UniqueVolunteerList` internal `sortByPoints` method."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "articstranger"
        },
        "content": "This method uses the standard `FXCollections.sort` on the `internalList`,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "articstranger"
        },
        "content": "which immediately reflects in the UI."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "articstranger"
        },
        "content": "----"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public void sortByPoints() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        FXCollections.sort(internalList, (new Comparator\u003cVolunteer\u003e() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            public int compare (Volunteer s1, Volunteer s2) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                return s2.getPoints() - s1.getPoints();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "articstranger"
        },
        "content": "----"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "articstranger"
        },
        "content": "The custom comparator sorts `Volunteers` in descending order of points."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "articstranger"
        },
        "content": "[large]*`Export` Command*"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "articstranger"
        },
        "content": "The `exportV` command writes certain parts of volunteers data based on provided crtieria."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "articstranger"
        },
        "content": "It takes on various parameters such as [NUMBER OF VOLUNTEERS],"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "articstranger"
        },
        "content": "[PREFIX OF DATA REQUIRED 1][PREFIX OF DATA REQUIRED 2] ... ."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "articstranger"
        },
        "content": "The `ExportVolunteerCommandParser` checks that at least 1 type of data and the number of `Volunteers`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "articstranger"
        },
        "content": "is given. It then stores the prefixes in a list called `prefixToBePrinted` and returns the the list and the number of volunteers"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "articstranger"
        },
        "content": "as a `Pair` to `ExportVolunteer`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "articstranger"
        },
        "content": "The code snippet below shows how the main command is implemented."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "articstranger"
        },
        "content": "----"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "articstranger"
        },
        "content": "File output \u003d new File(\"Export.csv\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        List\u003cString[]\u003e volunteerData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        volunteerData \u003d model.addData(numVolunteers, prefixToBePrinted);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        try (PrintWriter pw \u003d new PrintWriter(output)) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            volunteerData.stream()"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    .map(this::toCsv)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    .forEach(pw::println);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            throw new CommandException(\"Error writing to file\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "articstranger"
        },
        "content": "----"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "articstranger"
        },
        "content": "A `List` of `String` arrays is used to store each line of `Volunteer`. The `addData` method goes through the `Volunteer`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "articstranger"
        },
        "content": "list and collects the specified fields into a `String` array, which is appended to another `List` of `String` arrays"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "articstranger"
        },
        "content": "and returned. The `toCsv` method formats the data into CSV-friendly data."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "articstranger"
        },
        "content": "Below are certain considerations made when designing the filtered export feature."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "articstranger"
        },
        "content": "[width\u003d\"100%\", cols\u003d\"1, 1, 1 \"options\u003d\"header\",]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "articstranger"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "articstranger"
        },
        "content": "| Aspect | Alternatives | Pros (+)/ Cons(-)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "articstranger"
        },
        "content": ".1+| Sorting the internal volunteer list"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "articstranger"
        },
        "content": "| *Using a SortedList wrapper around the unmodifiable list*"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "articstranger"
        },
        "content": "| + : Easy to implement. + Will not affect the actual data."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    {empty} +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "articstranger"
        },
        "content": " - :  The new SortedList has to be added to the UI, or constantly swapped around with"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "articstranger"
        },
        "content": " the usual list of volunteers."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "articstranger"
        },
        "content": ".1+| Using PrintWriter to write out data to CSV"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "articstranger"
        },
        "content": "| *Using an open-source library such as openCSV to handle the writing.*"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "articstranger"
        },
        "content": "| + : Easier to understand and code for any new developers. + openCSV will handle special characters in data."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    {empty} +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "articstranger"
        },
        "content": " - : External library is required to be installed. - Data to be written is already checked and cleaned to be free of"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "articstranger"
        },
        "content": " special characters, hence it is not necessary."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "articstranger"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "articstranger"
        },
        "content": "// end::filterexport[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedVoluncheerBook`."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "It extends `VoluncheerBook` with an undo/redo history, stored internally as an `voluncheerBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* `VersionedVoluncheerBook#commit()` -- Saves the current Voluncheer book state in its history."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* `VersionedVoluncheerBook#undo()` -- Restores the previous Voluncheer book state from its history."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* `VersionedVoluncheerBook#redo()` -- Restores a previously undone Voluncheer book state from its history."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitVoluncheerBook()`, `Model#undoVoluncheerBook()` and `Model#redoVoluncheerBook()` respectively."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedVoluncheerBook` will be initialized with the initial Voluncheer book state, and the `currentStatePointer` pointing to that single Voluncheer book state."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Step 2. The user executes `deleteVolunteer 5` command to delete the 5th Volunteer in the Voluncheer book. The `deleteVolunteer` command calls `Model#commitVoluncheerBook()`, causing the modified state of the Voluncheer book after the `delete 5` command executes to be saved in the `VoluncheerBookStateList`, and the `currentStatePointer` is shifted to the newly inserted Voluncheer book state."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new volunteer. The `add` command also calls `Model#commitVoluncheerBook()`, causing another modified Voluncheer book state to be saved into the `VoluncheerBookStateList`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "If a command fails its execution, it will not call `Model#commitVoluncheerBook()`, so the Voluncheer book state will not be saved into the `VoluncheerBookStateList`."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Step 4. The user now decides that adding the volunteer was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoVoluncheerBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous Voluncheer book state, and restores the Voluncheer book to that state."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial Voluncheer book state, then there are no previous Voluncheer book states to restore. The `undo` command uses `Model#canUndoVoluncheerBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoVoluncheerBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the Voluncheer book to that state."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "If the `currentStatePointer` is at index `VoluncheerBookStateList.size() - 1`, pointing to the latest Voluncheer book state, then there are no undone Voluncheer book states to restore. The `redo` command uses `Model#canRedoVoluncheerBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the Voluncheer book, such as `list`, will usually not call `Model#commitVoluncheerBook()`, `Model#undoVoluncheerBook()` or `Model#redoVoluncheerBook()`. Thus, the `VoluncheerBookStateList` remains unchanged."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitVoluncheerBook()`. Since the `currentStatePointer` is not pointing at the end of the `VoluncheerBookStateList`, all Voluncheer book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire Voluncheer book."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Pros: Will use less memory (e.g. for `deleteVolunteer`, just save the volunteer being deleted)."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of Voluncheer book states."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedVoluncheerBook`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "// tag::projectcalendar[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d\u003d [Proposed] Project Calendar"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "_{The projectcalendar mechanism takes the projectTitle and projectDate attribute of the project list and apply them into - Google Calendar API such that the UI now"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " includes a calendar interface and projects sorted according to date."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " The API has a dependency on Google API Client Library and build.gradle file compiles \u0027com.google.api-client:google-api-client:1.25.0\u0027."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "// tag::deleteProject[]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d\u003d [Proposed] Delete Project"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "_{The deleteProject is facilitated by DeleterProjectCommand Parser. deleteProject(index) removes the project with index, alongside with date attribute but beneficiary remains."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "if the project index is not found, DeleteProjectCommand throws ParseException."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "// end::deleteProject[]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.Voluncheer.ui` package."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "e.g. `seedu.Voluncheer.commons.StringUtilTest`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "e.g. `seedu.Voluncheer.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "e.g. `seedu.Voluncheer.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/Voluncheer/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "A project often depends on third-party libraries. For example, Voluncheer Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* manager of a volunteer organization such as shool\u0027s CCAs, CIP office"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* has a need to manage significant number of volunteers but not attached exclusively to any other volunteering program"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* has a need to manage a significant number of interested beneficiaries who want to connect to the volunteers"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* has a need to manage multiple projects"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* manage volunteers, beneficiaries, projects\u0027 details faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer manager |add a new volunteer |have their information in the system to manage and distribute them"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer manager |delete an existing volunteer |remove the volunteer that no longer needs"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer manager |edit a volunteer |update information of volunteer"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer mangager |find a volunteer by name |locate details of the volunteer without having to go through the entire list"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer manager |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer manager |sort volunteer list by name |locate a the volunteer easily"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer manager |add a beneficiary |have their infomation in the system to manage"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer manager |add beneficiary\u0027s description |have a description of beneficiary to refer to"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* ` |volunteer manager |highlight details/ keywords in the beneficiary\u0027s description |read and scan through the information easily"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer manager |delete a beneficiary |remove beneficary"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer manager |edit a beneficiary |update details if there is any changes"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer manager |sort the beneficiary by name or more |easily manange the list of beneficiary"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer manager |add a new project with specific details |manage the project and allocate volunteers in the project"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer manager |edit a project |change details of the project if needed"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* * *` |volunteer manager |delete a project |remove projects that is abundant, cancelled or outdated"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* *` |volunteer manager |take attendance of volunteers for a project |keep track of volunteers\u0027s attendance"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* *` |volunteer manager |remind the most prioritised/ closed to dealine project |remind me to work of pay special attention to that project\u0027s progress"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`*` |volunteer manager |have a calendar of projects on the GUI |easily visualize the timeline of work and projects"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* *` |volunteer manager |have a recommendation list of volunteer based on several factors |easily adding relevant volunteers in a project"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* *` |volunteer manager |import, export data |easily transfer the data to other machines to use"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* *` |volunteer manager |undo, redo |go back to my preferred state if I make a mistake"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "|`* *` |volunteer manager |have autofill function on command line |type faster"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "(For all use cases below, the *System* is the `VoluncheerBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Use case 1: Delete volunteer"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "1.  User requests to list volunteers"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "2.  VoluncheerBook shows a list of volunteers"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "3.  User requests to delete a specific volunteer in the list"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "4.  VoluncheerBook deletes the volunteer"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 3a1. VoluncheerBook shows an error message."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Use case 2: Add volunteer"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "1.  User requests to add a volunteer, including name, age, email, address, etc."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "2.  VoluncheerBook shows the successful add message"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2a. The volunteer has existed, show edit option"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 3a. The given command line is invalid."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 3a1. VoluncheerBook shows an error message."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Use case 3: Edit volunteer"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "1.  Users requests to find a volunteer."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "2.  User requests to edit the volunteer."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "3.  VoluncheerBook shows the successful edit message."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 1a. The volunteer cannot be found"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2a. Given index for edit command is invalid."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 2a1. VoluncheerBook shows an error message."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Use case 4: Add Project"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "1.  Users requests to add a project."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "2.  VoluncheerBook shows the successful add message."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2a. The command line is invalid."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 2a1. VoluncheerBook shows an error message."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2b. The beneficiary is not existed."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 2b1. VoluncheerBook shows an error message."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2b. The date is invalid."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 2b1. VoluncheerBook shows an error message."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2c. The project is existed."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 2c1. VoluncheerBook shows edit option."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Use case 5: Edit Project"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "1.  Users requests to edit a project."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "2.  VoluncheerBook shows the successful edit message."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2a. The project is not existed."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 2a1. VoluncheerBook shows an error message."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Use case 5: Find volunteer"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "1.  Users requests to find (a) volunteer/volunteers by name."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "2.  VoluncheerBook shows the list of volunteers who share the name."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2a. There is no volunteer with that name."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 2a1. VoluncheerBook returns an empty list."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Use case 6: Delete Project"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "1.  User requests to delete a specific project by name"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "2.  VoluncheerBook deletes the project"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2a. project is not existed."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 2a1. VoluncheerBook shows an error message."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Use case 7: export volunteer list"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "1.  User requests to import a volunteer file"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "2.  VoluncheerBook imports the volunteer file to the volunteer list"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2a. file cannot be found."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 2a1. VoluncheerBook shows an error message."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Use case 8: export volunteer list"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "1.  User requests to export a volunteer file"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "2.  VoluncheerBook exports new volunteer data file"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2a. the file has existed."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 2a1. VoluncheerBook overwritten the file."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Use case 9: export volunteer list"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "1.  User requests to export a volunteer file"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "2.  VoluncheerBook exports new volunteer data file"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2a. the file has existed."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 2a1. VoluncheerBook overwritten the file."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Use case 10: Add beneficiary"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "1.  User requests to add a beneficiary."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "2.  VoluncheerBook shows the successful add message"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2a. The beneficiary has existed, show edit option"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 3a. The given command line is invalid."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 3a1. VoluncheerBook shows an error message."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Use case 11: Sort volunteers based on PRIORITY_SCORE"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "1.  User uses \"map\" command to calculate PRIORITY_SCORE."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "2.  User requests to make a sorted list of volunteers based on PRIORITY_SCORE."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "3.  VoluncheerBook shows the successful sorted list."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* 2a. Invalid map features."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** 2b1. VoluncheerBook shows error message."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ".  Should be able to hold up to 1000 volunteers without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*Voluncheer*"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Deleting a volunteer"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ". Deleting a volunteer while all volunteers are listed"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ".. Prerequisites: List all volunteers using the `list` command. Multiple volunteers in the list."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ".. Test case: `deleteVolunteer 1` +"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ".. Test case: `deleteVolunteer 0` +"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "   Expected: No volunteer is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ".. Other incorrect delete commands to try: `deleteVolunteer`, `deleteVolunteer x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 10,
      "articstranger": 114,
      "-": 647,
      "ndhuu": 323
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d VolunCHeer - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `CS2113T T08-01`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "VolunCheer is a desktop application for project managers who wish to keep track of their ongoing / upcoming projects as"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "well as their beneficiary and volunteer pool."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "You can also use VolunCHeer to filter out suitable volunteers based on their data stored in the system. VolunCHeer is"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "The VolunCHeer Application is for project managers or directors who require a system to *keep track of their"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "ongoing projects and the volunteer pool*. VolunCheer is optimised for users who prefer a *Command Line Interface (CLI)* while"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "still being able to view important data on the *Graphical User Interface(GUI)*. VolunCHeer will save you the need for multiple documents"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "and folders just to store volunteer/beneficiary information. It also removes the need to track large amount of volunteer data to fit selection criterias using traditional methods such"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "as Excel."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Wish to know more? Click on link:{https://github.com/cs2113-ay1819s2-t08-1/main/blob/master/docs/UserGuide.adoc#quick-start}/[Section 2. \"Quick Start\"] to get started."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Shown below is a quick overview of our VolunCHeer application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "1. Command Box:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "This is where you type your commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "2. Command Result:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "This shows the result of command execution, useful tips and error messages are also shown here."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "3. Project List:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "This shows the list of projects currently in VolunCHeer."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "4. Beneficiary List:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "This shows the list of beneficiaries currently in VolunCHeer."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".  Download the latest `VolunCHeer.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for our VolunCHeer Application."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* **`addProject`** n/Project Sunshine d/20190320: adds a project named \"Project Sunshine\" in the project list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* **`deleteProject`**`2` : deletes the 2nd project portfolio in the current list of projects."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a project: `addProject`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Adds a new project +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Format: `addProject n/PROJECT_NAME d/DATE`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Please enter DATE in yyyymmdd format."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Project Title should not have duplicates in the project list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* `addProject n/Charity Run d/081219`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a volunteer: `addVolunteer`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a volunteer to the volunteer pool +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "Format: `addVolunteer n/NAME y/AGE g/gender r/race rg/religion a/ADDRESS e/EMAIL p/PHONE_NUMBER"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "ec/EMERGENCY_CONTACT dp/DIETARY_PREFERENCE m/MEDICAL CONDITION [t/TAG]...`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* \"Add Successful!\" message is prompted upon successfully adding a volunteer"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* Otherwise, if the volunteer already exists, show edit option to update portfolio"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "* Dietary Preference, Medical Condition is set to NIL by default"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "A volunteer can have any number of tags (including 0)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "* `addVolunteer n/John Doe y/18 g/male r/eurasian rg/nil a/John street, block 123, #01-01 e/johnd@example.com"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "p/98765432 ec/Mary, Mother, 92221111 dp/vegetarian m/asthma`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "* `addVolunteer n/Sarah Soh y/22 g/female r/chinese rg/buddhist a/betsy ave 6, 02-08 e/sarah08@example.com"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "p/92345678 ec/Johnny, Husband, 81234568"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a beneficiary: `addBeneficiary`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Adds a beneficiary to the list of Beneficiaries +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Format: `addBeneficiary n/NAME a/ADDRESS e/EMAIL p/PHONE_NUMBER `"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* \"New beneficiary added: Orphanage Phone: 98765432 Email: Orphanage@example.com Address: 311, Clementi Ave 2,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " #02-25Attached Project List: []\" message is prompted upon successfully adding a beneficiary"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* `addBeneficiary n/Orphanage p/98765432 e/Orphanage@example.com a/311, Clementi Ave 2, #02-25`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Consideration:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* The beneficiary will be used to assign to a project, this means that the project will benefit this beneficiary,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "i.e. Orphanage Home, Nursing home, etc."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* When add a new beneficiary, the project lists assigned to it will be empty. You can assign projects to it by assign"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "command stated below."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Editing a beneficiary: `editBeneficiary`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Edits a beneficiary to the list of Beneficiaries +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Format: `editBeneficiary  INDEX (must be a positive integer) [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] `"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "****"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* \"Edited Beneficiary: Old Folk Home Phone: 91234567 Email: Orphanage@example.com Address: 311, Clementi Ave 2,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " #02-25Attached Project List: []\" message is prompted upon successfully editing a beneficiary"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "****"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* `editBeneficiary 1 n/Old Folk Home p/91234567`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Consideration:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* When a beneficiary is edited, the data of the beneficiary in its attached projects is in sync, meaning that that data"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "is automatically updated in the mentioned projects."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Listing all beneficiary: `listBeneficiary`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Shows a list of all Beneficiaries in the beneficiary pool. +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Format: `listBeneficiary`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Consideration:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* The command can be used to get back to full list after several commands changing the list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Locating beneficiaries by name: `findBeneficiary`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Finds beneficiaries whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Format: `findBeneficiary KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "****"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* The search is case insensitive. e.g `orphanage` will match `Orphanage`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* The order of the keywords does not matter. e.g. `Orphanage Nursing` will match `Nursing Orphanage`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* Only full words will be matched e.g. `Orphan` will not match `Orphanage`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* beneficiaries matching at least one keyword will be returned (i.e. `OR` search). e.g. `Orphanage Nursing` will return"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " `Orphanage Rainbow`, `Nursing Home`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "****"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Nursing` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `Nursing Home` and `Nursing Center`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all projects : `listProject`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all projects. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `listProject`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all volunteers : `list`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all volunteers in the volunteer pool. +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a project : `editProject`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Edits an existing project +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Format: `editProject PROJECT_NAME [n/NAME] [d/DATE]...`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the project at the specified \u0027PROJECT_NAME\u0027."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the project will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* Project\u0027s tags can be removed by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* `n/` is invalid as \u0027PROJECT_NAME\u0027 cannot be removed unless with deleteProject command."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* `editProject Charity Run d/20190301` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Edits the date of the project to be \u002720190301\u0027."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a volunteer : `editVolunteer`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Edits an existing volunteer in the volunteer list. +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "Format: `edit INDEX [n/NAME] [y/AGE] [g/GENDER] [r/RACE] [rg/RELIGION][p/PHONE] [a/ADDRESS] [e/EMAIL]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "[ec/EMERGENCYCONTACT] [dp/DIETARYPREFERENCE] [mc/MEDICALCONDITION] [[t/TAG]...`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "* Edits the volunteer at the specified `INDEX`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "The index refers to the index number shown in the displayed volunteer list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the volunteer will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the volunteer\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* `editVolunteer 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st volunteer to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* `editVolunteer  2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd volunteer to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating volunteers by name: `find`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Finds volunteers whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "* volunteers matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "* e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any volunteer having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a project ： `deleteProject`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Deletes the specified project from the application. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Format: `deleteProject INDEX`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Deletes the project at index \"INDEX\"."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* The INDEX refers to the index of the project in the project list, use \u0027listProject\u0027 to view all projects if unsure."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Error message is shown if the INDEX entered is invalid"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a volunteer : `deleteVolunteer`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Deletes the specified volunteer from the volunteer list. +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the volunteer at the specified `INDEX`."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed volunteer list."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* Error message is shown if the given index is invalid"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd volunteer in the volunteer list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st volunteer in the results of the `find` command."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a volunteer : `select`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the volunteer identified by the index number used in the displayed volunteer list. +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the volunteer and loads the Google search page the volunteer at the specified `INDEX`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed volunteer list."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd volunteer in the volunteer list."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st volunteer in the results of the `find` command."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d\u003d Assigning a beneficiary to project: \u0027assign\u0027"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Assigns a beneficiary identified by the index number used in the displayed beneficiary list to a project matched"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "by project title entered."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Format: `assign PROJECT_TITLE, i/INDEX`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Assigns the beneficiary with index \u003d \"INDEX\" to the project with title \"PROJECT_TITLE\"."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Project attached will be shown on the specific beneficiary"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* There can be only one beneficiary for each project, however, one beneficiary can be assigned to multiple projects."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d\u003d Mark project as complete: \u0027complete\u0027"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Marks project with at index \"INDEX\" as complete."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Format: `complete i/INDEX`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Once marked as complete, project title will be displayed in red colour font"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d\u003d Assigning mapping index to each volunteer : `map`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Assigns the volunteers with points 3, 2, 1 according to the selection criteria set by the user."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "articstranger"
        },
        "content": "Format: `map t/(POINTS)(CRITERIA) t/(POINTS)(CRITERIA) t/(POINTS)(CRITERIA)`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "articstranger"
        },
        "content": "* There are three types of tags, the age of volunteer (y/), race (r/) and medical condition (m/)."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* There can be at most 3 tags and at least 1 tag as the selection criteria."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "articstranger"
        },
        "content": "* Each volunteer is tagged with the final PRIORITY_SCORE based on the points used for sorting later on."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "articstranger"
        },
        "content": "* The age criteria has comparators \u003e,\u003c,\u003d which relate to the age given afterwards."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "articstranger"
        },
        "content": "* See examples below for a clearer picture."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "articstranger"
        },
        "content": "* `map y/3\u003e18 r/2chinese m/1NIL`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Gives volunteers above the AGE of 18 3 points, RACE chinese 2 points and MEDICAL_CONDITION of NIL 1 point."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "articstranger"
        },
        "content": "* `map m/3NIL`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "articstranger"
        },
        "content": "Only gives volunteers with no MEDICAL_CONDITION 3 points."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d\u003d Sort volunteers according to PRIORITY_SCORE : `sort`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Sorts the volunteers from highest PRIORITY_SCORE to lowest PRIORITY_SCORE."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* The map function should be called before sort to generate the PRIORITY_SCORE"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Volunteers with PRIORITY_SCORE of 0 will not be sorted in any particular order"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Selection of the volunteers based on the selection criteria can be done after they are sorted"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "articstranger"
        },
        "content": "\u003d\u003d\u003d Select multiple volunteers from sorted list : `extract` (Coming in V1.4)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Format: `extract [a][b]`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Call extract after sort function to extract [b]-[a] number of volunteers."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "*`extract [1][20]`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Extracts the first 20 volunteers in the sorted list."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "*`extract [5][15]`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Extracts volunteer number 5 to 15 in the list."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Restores the VolunCHeer application to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Undoable commands: those commands that modify the VolunCHeer application\u0027s main content (`addProject`, `addVolunteer`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the specific list requested by user. +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Export data file: `export`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "Exports the saved data in a csv file. +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "Format: \u0027export\u0027"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Supports export of volunteer list"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Supports export of project data"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "* Application shows successful export message once exported"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Import data file: `import`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "Imports csv file saved in local folder. +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "Format: \u0027import FILE_DIRECTORY\u0027"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "* The application finds the local file and extrapolate the data"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Supports import of volunteer data"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "* Application shows successful import message once imported"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "All data for the application are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d\u003d Attendance taking `[coming in v2.0]`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Track attendance of the volunteers and award frequent volunteers with certificates or promote to team leader."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d\u003d Manage funding and sponsorships `[coming in v2.0]`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Manage funds and sponsors for individual projects and track project spending."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous VolunCHeer application folder."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *AddProject* `addProject n/PROJECT_TITLE d/DATE b/BENEFICIARY [t/TAG]...` +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "e.g. `addProject n/Charity Run d/081219 b/Sunshine Old Folks Home`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *AddVolunteer* `addVolunteer n/NAME y/AGE a/ADDRESS e/EMAIL p/PHONE_NUMBER g/EMERGENCY_CONTACT r/RACE d/DIETARY_PREFERENCE"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                 m/MEDICAL CONDITION [t/TAG]...` +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "e.g. `addVolunteer n/John Doe y/18 a/John street, block 123, #01-01 e/johnd@example.com p/98765432 g/98292998 r/chinese"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        d/vegetarian m/asthma`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *AddBeneficiary* `addBeneficiary n/NAME a/ADDRESS e/EMAIL p/PHONE_NUMBER v/VOLUNTEERS_REQUIRED [t/TAG]...` +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "e.g. `addBeneficiary n/Sunshine Old Folks Home a/sunshine ave 5 e/sunny@oldfolks.sg p/67580392 v/20`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *EditProject* `editProject PROJECT_NAME [n/NAME] [d/DATE] [b/BENEFICIARY] [t/TAG]...` +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "e.g. `editProject Charity Run d/010319`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *EditVolunteer* `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "e.g. `editVolunteer 1 p/91234567 e/johndoe@example.com`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "* *DeleteProject* : `delete PROJECT_TITLE`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete Charity Run`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *DeleteVolunteer* : `delete INDEX` +"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *Map* `map t/SELECTION t/SELECTION t/SELECTION` +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "e.g. `map y/18 \u003e r/chinese m/NIL`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *Sort* `sort`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *Extract* `extract VOLUNTEERS_REQUIRED`+"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "e.g. `extract 20`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *Export* : `export`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *Import* : `import`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *Exit* * : `exit`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *Help* : `help`"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 15,
      "quinnzzzzz": 148,
      "articstranger": 9,
      "-": 306,
      "ndhuu": 48
    }
  },
  {
    "path": "docs/team/Huu.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d Nguyen Dang Huu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "The purpose of this portfolio is to document and demonstrate my contribution to the project namely VolunCHeer."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "The project was carried out in AY 18/19 Sem 2 in NUS and was contribute by a team of four including myself."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "VolunCHeer is an open-source desktop management application for Volunteer Managers to manage various projects,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " beneficiaries and volunteers."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d Terminology"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* Volunteer: The volunteers who participate in volunteer organization such as NUS Community Service Club, NUS Vietnamese"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Community\u0027s CIP Committee."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* Beneficiary: Organizations who benefit from volunteering activities such as Old Folk Home, Nursing Home, and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Orphanage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* Project: Projects that are set for volunteers to participate and help the beneficiary."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* Volunteer Manager: The one who manages the arrangement of projects, assign volunteers and contact and associate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "beneficiaries with projects. In this project portfolio, the Volunteer manager will be referred as the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003d\u003d Role"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "I am the Lead Developer, ensuring the application are as free of bugs as possible, especially in the early stage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "where test files are not updated. I am also the adviser for implementation of commands and bug fixes. I also handle"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "damage control when problems arise."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* *Major enhancement*: added *Beneficiary management feature*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** What it does: Beneficiary Management feature allows the user to manage beneficiary, including:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*** add a beneficiary: to open a new record of a beneficiary."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*** edit a beneficiary: to edit an existing record of a beneficiary."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*** find a beneficiary by name: to help the user quickly navigate to the wanted beneficiary record."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*** list beneficiaries: to list all beneficiary records."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "*** summarise beneficiaries\u0027 data: to enable the user to see most active beneficiary based on attached project list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Justification: The beneficiary management feature allows the dynamic of tracking beneficiary records for the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "volunteer manager to revise, reuse every time a project initiation process starts, because it is likely that the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "volunteer manager will have projects related to previous beneficiary and the application creates a good starting point"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "and efficiently save time in terms of searching beneficiary\u0027s details. Moreover, it also allows the volunteer manager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "to do consideration on which beneficiary to come for in terms of funding based on the activeness measurement of"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "beneficiaries."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Highlights: This enhancement affects existing commands, data structure and commands to be added in future. It"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "requires in-depth analysis of implementation alternatives. The implementation too was challenging as it required changes"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "to existing commands and it involves the synchronization with related Projects and storage files."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Credits: The implementation of the order list is based on the code written for the person list in the Address Book"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Level 4 made by SE-EDU initiative."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* *Major enhancement*: updated \"Storage Management\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** What it does: Storage is ensured to capture any change the user chooses to make in the application and to reflect"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "them in the storage file. When the user reopens the application, these changes are correctly viewed or if the data is"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "corrupted, the application will prompt the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Justification: The data storage is important because the main purpose of the application is to reserve these data."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "Hence, storage management is essential for the application to work properly and serve its purposes."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Highlights: This enhancement is quite challenging as correlation between projects and beneficiaries, and projects and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "volunteers requires the checking of corruption in storage files (ie. duplication of a project assigning to multiple"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "beneficiary)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* *Minor enhancement*: quality control of synchronization of assigning beneficiary to project"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "https://github.com/cs2113-ay1819s2-t08-1/main[#61]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* *Minor enhancement*: UI update up to version 1.3"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "https://github.com/cs2113-ay1819s2-t08-1/main[#43]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* *Minor enhancement*: Bug reports and fixed"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "https://github.com/cs2113-ay1819s2-t08-1/main[#43]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "* *Code contributed*: My code contribution can be viewed"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dhuu\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[here]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "** Giving substantial comments on Github"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "*** PENDING: Allow the selection of volunteers into details (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddBeneficiary]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "include::../UserGuide.adoc[tag\u003deditBeneficiary]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 45,
      "ndhuu": 72
    }
  },
  {
    "path": "docs/team/ZhaoJunRu.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d Zhao Jun Ru - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ":imagesDir: C:\\Users\\Quinn\\Desktop\\Y2S2\\CS2113T\\Project\\AddressBook4\\docs\\images\\quinnzzzzz.png"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d PROJECT: VolunCHeer V1.3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "VolunCheer is a desktop application for project managers who wish to keep track of their ongoing / upcoming projects as well as their beneficiary and volunteer pool."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *Major enhancement*: implemented *addProject command whereby it adds a new Project to the VolunCHeer application*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "** What it does: allows the user to add in a new project with attributes \"Project Title\" and \"Project Date\" to keep track of current projects on hand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "** Justification: This forms the basis of the VolunCHeer application whereby the aim is to manage and organise projects better and save users form the hustle of paper works."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "** Highlights: This enhancement was built on the existing add command with some variation in the attributes presented. The implementation was relatively easy but relevant features pertaining to the specific projects requires more in-depth knowledge and analysis of design alternatives. The User Interface is adjusted accordingly as well to show"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    execution of commands and the relevant result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "** Relevant features/enhancements:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    1. Assign Beneficiary *allows the user to assign a existing beneficiary to the project selected*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "       - Justification: A beneficiary is usually attached to a project and beneficiary details are very important and usually tracked in a separate document / file. Thus we decide to keep Beneficiary information as a separate list and assigned to the project when required such that it can be managed separately."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "       - Highlights: This enhancement requires data from both the project list as well as the beneficiary list, there was thus some difficulty trying to implement the command. Many adjustments had to be made to keep the project class and beneficiary class independent."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    2. Complete project *allows the user to mark a project as completed in the project list* this is indicated by a colour change - to red for the project title."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "       - Justification: This is thought to be a useful feature as project managers would want to keep track of what are the ongoing projects while still have a copy of their completed projects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "       - Highlights: This enhancement indicates a change of status of the specified project, it is a simple yet useful feature for the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *Minor enhancement*: Edit project and Delete project commands are inherited from addressbook and successfully implemented on the project class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "*** Managed setting up of Milestones v1.2 and v1.3"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "*** Managed deadlines and submissions"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "*** Managed releases `v1.3` on GitHub"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "*** Did the UserGuide for v1.1: https://github.com/cs2113-ay1819s2-t08-1/main/pull/6[#6]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "*** Subsequent updates of documents on individual features."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//** Community:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//** Tools:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d\u003d Adding a project: `addProject`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Adds a new project +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Format: `addProject n/PROJECT_NAME d/DATE`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Please enter DATE in yyyymmdd format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Project Title should not have duplicates in the project list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* `addProject n/Charity Run d/081219`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d\u003d Deleting a project ： `deleteProject`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Deletes the specified project from the application. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Format: `deleteProject INDEX`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Deletes the project at index \"INDEX\"."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* The INDEX refers to the index of the project in the project list, use \u0027listProject\u0027 to view all projects if unsure."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Error message is shown if the INDEX entered is invalid"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003d\u003d\u003d Assigning a beneficiary to project: \u0027assign\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Assigns a beneficiary identified by the index number used in the displayed beneficiary list to a project matched"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "by project title entered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "Format: `assign PROJECT_TITLE, i/INDEX`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Assigns the beneficiary with index \u003d \"INDEX\" to the project with title \"PROJECT_TITLE\"."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* Project attached will be shown on the specific beneficiary"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* There can be only one beneficiary for each project, however, one beneficiary can be assigned to multiple projects."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "****"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 111
    }
  },
  {
    "path": "docs/team/Zhuhui.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d Zhu Hui - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "VolunCHeer is a multifunctional project management application for Project Managers to manage various projects, beneficiaries and volunteers."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "* *Major enhancement*: added *Volunteer Base Class with additional parameters such as race, gender, religion etc.*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "** Justification: It is important as it is our main function of the program"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "* *Code contributed*: [https://github.com/cs2113-ay1819s2-t08-1/main/tree/master/src/main/java/seedu/address/model/volunteer[Functional code]] [https://github.com[Test code]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "** UI interface:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "*** Ensure that UI is running smoothly"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "*** PENDING: Allow the selection of volunteers into details (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "swalahlah": 55,
      "quinnzzzzz": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "ndhuu": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing VolunCHeer ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty VolunCHeer\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty VolunCHeer\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty VolunCHeer\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        logger.info(\"Starting VolunCHeer \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping VolunCHeer ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 176,
      "ndhuu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "ndhuu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX \u003d \"The project index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_PROJECT_NOT_FOUND \u003d \"The project does not exist\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Beneficiary index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_INVALID_BENEFICIARY_DISPLAYED_INDEX \u003d \"The beneficiary index provided \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            + \"is invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_BENEFICIARIES_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX \u003d \"The volunteer index provided is invalid\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_NOT_ENOUGH_VOLUNTEERS \u003d \"The volunteer pool does not have enough volunteers!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_VOLUNTEERS_LISTED_OVERVIEW \u003d \"%1$d volunteers listed!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public static final String MESSAGE_INVALID_AGE_FORMAT \u003d \"Invalid year input!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 6,
      "articstranger": 1,
      "-": 13,
      "ndhuu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 99,
      "ndhuu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "ndhuu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "ndhuu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "ndhuu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 142,
      "ndhuu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "ndhuu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "ndhuu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of projects"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of volunteers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    ObservableList\u003cVolunteer\u003e getFilteredVolunteerList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of beneficaries"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    ObservableList\u003cBeneficiary\u003e getFilteredBeneficiaryList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    ReadOnlyProperty\u003cProject\u003e selectedProjectProperty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Selected beneficiary in the filtered beneficiary list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * null if no beneficiary is selected."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @see seedu.address.model.Model#selectedBeneficiaryProperty()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    ReadOnlyProperty\u003cBeneficiary\u003e selectedBeneficiaryProperty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Selected volunteer in the filtered volunteer list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * null if no volunteer is selected."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @see Model#selectedVolunteerProperty()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    ReadOnlyProperty\u003cVolunteer\u003e selectedVolunteerProperty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedProject(Project)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    void setSelectedProject(Project project);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Sets the selected beneficiary in the filtered beneficiary list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedBeneficiary(Beneficiary)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void setSelectedBeneficiary(Beneficiary beneficiary);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Sets the selected beneficiary in the filtered volunteer list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedVolunteer(Volunteer)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    void setSelectedVolunteer(Volunteer volunteer);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 14,
      "quinnzzzzz": 6,
      "-": 71,
      "ndhuu": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return model.getFilteredProjectList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ObservableList\u003cBeneficiary\u003e getFilteredBeneficiaryList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return model.getFilteredBeneficiaryList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ObservableList\u003cVolunteer\u003e getFilteredVolunteerList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return model.getFilteredVolunteerList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ReadOnlyProperty\u003cProject\u003e selectedProjectProperty() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return model.selectedProjectProperty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ReadOnlyProperty\u003cBeneficiary\u003e selectedBeneficiaryProperty() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return model.selectedBeneficiaryProperty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public void setSelectedVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        model.setSelectedVolunteer(volunteer);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setSelectedProject(Project project) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.setSelectedProject(project);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ReadOnlyProperty\u003cVolunteer\u003e selectedVolunteerProperty() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return model.selectedVolunteerProperty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setSelectedBeneficiary(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.setSelectedBeneficiary(beneficiary);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 2,
      "quinnzzzzz": 10,
      "-": 105,
      "ndhuu": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Creates an AddProjectCommand to add the specified {@code Project}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 3,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddProjectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//@@author quinnzzzzz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxProject.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxProject.PREFIX_PROJECT_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Adds a new project to VolunCHeer."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class AddProjectCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addProject\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new project to VolunCHeer. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + PREFIX_PROJECT_TITLE + \"Project Title \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + PREFIX_PROJECT_TITLE + \"Charity Run \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + PREFIX_DATE + \"01/04/2019 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New project added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"This project already exists in VolunCHeer\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final Project toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Project}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public AddProjectCommand(Project project) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.toAdd \u003d project;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (model.hasProject(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        model.addProject(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        model.sortProjectByDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            || (other instanceof AddProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddProjectCommand) other).toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddVolunteerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_DIETARY_PREFERENCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_EMERGENCY_CONTACT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_GENDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_RACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_RELIGION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Adds a volunteer to the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class AddVolunteerCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addVolunteer\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_AGE + \"AGE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_RACE + \"RACE \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_RELIGION + \"RELIGION \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_EMERGENCY_CONTACT + \"EMERGENCY CONTACT \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_DIETARY_PREFERENCE + \"DIETARY PREFERENCE \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_MEDICAL_CONDITION + \"MEDICAL CONDITION \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_AGE + \"22 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_GENDER + \"M \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_RACE + \"French \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_RELIGION + \"Christian \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_EMERGENCY_CONTACT + \"Sally Mother 91234567 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_DIETARY_PREFERENCE + \"nil \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_MEDICAL_CONDITION + \"nil \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_TAG + \"new volunteer\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New volunteer added: %1$s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VOLUNTEER \u003d \"This volunteer already exists in the address book\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final Volunteer toAdd;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public AddVolunteerCommand(Volunteer volunteer) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(volunteer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        toAdd \u003d volunteer;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (model.hasVolunteer(toAdd)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.addVolunteer(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof AddVolunteerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddVolunteerCommand) other).toAdd));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "swalahlah": 36,
      "-": 2,
      "ndhuu": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AssignBeneficiaryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//@@author quinnzzzzz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.ASSIGNED_PROJECT_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.beneficiary.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Assigns a beneficiary to a project."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class AssignBeneficiaryCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assignB\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns a beneficiary to a project, \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            + \"only 1 beneficiary can be assigned to each project.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            + ASSIGNED_PROJECT_TITLE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            + \"[PROJECT_TITLE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            + PREFIX_INDEX"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            + \"[INDEX]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            + \"Project Sunshine\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            + \"i/1 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_PARAMETERS \u003d ASSIGNED_PROJECT_TITLE + \"[PROJECT_TITLE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + PREFIX_INDEX + \"INDEX \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Beneficiary successfully assigned to project.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BENEFICIARY \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        \"There is already the same beneficiary that exists in the project.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final ProjectTitle targetProject;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final Index targetBeneficiaryIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Project editedProject;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Project projectToAssign;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Creates an AssignBeneficiaryCommand to assign beneficiary to {@code Project}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public AssignBeneficiaryCommand(ProjectTitle targetProject, Index targetBeneficiary) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(targetProject);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(targetBeneficiary);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.targetProject \u003d targetProject;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.targetBeneficiaryIndex \u003d targetBeneficiary;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        List\u003cBeneficiary\u003e lastShownList \u003d model.getFilteredBeneficiaryList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (targetBeneficiaryIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BENEFICIARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Predicate\u003cProject\u003e equalProjectTitle \u003d x -\u003e x.getProjectTitle().equals(targetProject);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (model.getFilteredProjectList().filtered(equalProjectTitle).size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new CommandException(\"Project does not exist.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            projectToAssign \u003d model.getFilteredProjectList().filtered(equalProjectTitle).get(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            //Update previous beneficiary on the change"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            updatePreBeneficiary(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            //match project to beneficiary"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            Beneficiary beneficiary \u003d updateBeneficiary(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            //match beneficiary to project"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            Name beneficiaryAssigned \u003d beneficiary.getName();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            this.editedProject \u003d new ProjectBuilder(this.projectToAssign).withBeneficiary(beneficiaryAssigned).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            model.setProject(projectToAssign, editedProject);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * update the previous assigned beneficiary in the following procedure:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     *  get the beneficiary"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     *  add the project record in that beneficiary"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Beneficiary updateBeneficiary(Model model) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Beneficiary beneficiary \u003d model.getFilteredBeneficiaryList().get(targetBeneficiaryIndex.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Beneficiary updatedBeneficiary \u003d new Beneficiary(beneficiary);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!updatedBeneficiary.hasProjectTitle(targetProject)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            updatedBeneficiary.addAttachedProject(targetProject);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        model.setBeneficiary(beneficiary, updatedBeneficiary);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return updatedBeneficiary;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * update the previous assigned beneficiary in the following procedure:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     *  get the previous beneficiary."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     *  delete the project record in that beneficiary."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private void updatePreBeneficiary(Model model) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (isValidPreAssignedBeneficiary(model)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            Beneficiary oldBeneficiary \u003d model.getFilteredBeneficiaryList()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                .filtered(x -\u003e x.getName().equals(projectToAssign.getBeneficiaryAssigned())).get(0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            Beneficiary newBeneficiary \u003d new Beneficiary(oldBeneficiary);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            newBeneficiary.deleteAttachedProject(projectToAssign.getProjectTitle());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            model.setBeneficiary(oldBeneficiary, newBeneficiary);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * check if the project has previously assigned any beneficiary."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private boolean isValidPreAssignedBeneficiary(Model model) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return projectToAssign.getBeneficiaryAssigned().toString() !\u003d \"nil\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u0026\u0026 model.getFilteredBeneficiaryList().filtered("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                x -\u003e x.getName().equals(projectToAssign.getBeneficiaryAssigned())).size() !\u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            || (other instanceof AssignBeneficiaryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u0026\u0026 this.targetProject.equals(((AssignBeneficiaryCommand) other).targetProject)); // state check;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AssignVolunteerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//@@author quinnzzzzz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.ASSIGNED_PROJECT_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_REQUIRED_VOLUNTEER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Assigns a beneficiary to a project."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class AssignVolunteerCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assignV\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns volunteers to a project,\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + \"at least 1 volunteer should be assigned.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + \"More than 1 project can be assigned to each volunteer.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + ASSIGNED_PROJECT_TITLE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + \"[PROJECT_TITLE] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + PREFIX_REQUIRED_VOLUNTEER + \"5\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + \"p/Project Sunshine\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + \"rv/5\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_PARAMETERS \u003d ASSIGNED_PROJECT_TITLE + \"[PROJECT_TITLE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + PREFIX_REQUIRED_VOLUNTEER + \"INDEX \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Volunteer/s successfully assigned to project.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final ProjectTitle targetProject;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final Integer requiredVolunteers;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private List\u003cVolunteer\u003e volunteersToAssign;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Project editedProject;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Project projectToAssign;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Creates an AssignBeneficiaryCommand to assign beneficiary to {@code Project}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public AssignVolunteerCommand(ProjectTitle targetProject, int requiredVolunteers) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(targetProject);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(requiredVolunteers);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.targetProject \u003d targetProject;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.requiredVolunteers \u003d requiredVolunteers;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        List\u003cVolunteer\u003e lastShownList \u003d model.getFilteredVolunteerList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Predicate\u003cProject\u003e equalProjectTitle \u003d x -\u003e x.getProjectTitle().equals(targetProject);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (model.getFilteredProjectList().filtered(equalProjectTitle).size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new CommandException(\"Project does not exist.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            projectToAssign \u003d model.getFilteredProjectList().filtered(equalProjectTitle).get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            if (requiredVolunteers \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NOT_ENOUGH_VOLUNTEERS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                volunteersToAssign \u003d lastShownList.subList(0, requiredVolunteers);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                //System.out.println(\"size\" + lastShownList.size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.editedProject \u003d new ProjectBuilder(this.projectToAssign).withVolunteer(volunteersToAssign).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        model.setProject(projectToAssign, editedProject);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        //System.out.println(projectToAssign.getVolunteerList().get(0).getName().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        //System.out.println(projectToAssign.getVolunteerCount());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return other \u003d\u003d this || (other instanceof AssignVolunteerCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u0026\u0026 this.targetProject.equals(((AssignVolunteerCommand) other).targetProject));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private boolean showHelp \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private boolean exit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Pop up for beneficiary summary command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private boolean showBeneficiarySummary \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showBeneficiarySummary) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.showBeneficiarySummary \u003d showBeneficiarySummary;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean isShowBeneficiarySummary() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return showBeneficiarySummary;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void resetShowBeneficiarySummary() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        showBeneficiarySummary \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "ndhuu": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CompleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Add a project to completes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class CompleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"complete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Indicate a project as complete. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" i/1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Project added to completes: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final Index targetProjectIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public CompleteCommand(Index targetProject) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(targetProject);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.targetProjectIndex \u003d targetProject;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (targetProjectIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Project targetProject \u003d lastShownList.get(targetProjectIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Project editedProject \u003d new ProjectBuilder(targetProject).withComplete(true).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        model.setProject(targetProject, editedProject);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedProject.getProjectTitle()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            || (other instanceof CompleteCommand // instanceof handles null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u0026\u0026 ((CompleteCommand) other).targetProjectIndex \u003d\u003d this.targetProjectIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteProjectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Deletes a project identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class DeleteProjectCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteProject\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + \": Deletes the project identified by the index number used in the displayed project list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_DELETE_PROJECT_SUCCESS \u003d \"Deleted Project: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String NULL_BENEFICIARY_NAME \u003d \"nil\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public DeleteProjectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Project projectToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (isValidAssignedBeneficiary(model, projectToDelete)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Beneficiary beneficiary \u003d model.getFilteredBeneficiaryList()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .filtered(x -\u003e x.getName().equals(projectToDelete.getBeneficiaryAssigned())).get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Beneficiary edittedBeneficiary \u003d new Beneficiary(beneficiary);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            edittedBeneficiary.deleteAttachedProject(projectToDelete.getProjectTitle());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            model.setBeneficiary(beneficiary, edittedBeneficiary);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        model.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PROJECT_SUCCESS, projectToDelete));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private boolean isValidAssignedBeneficiary(Model model, Project projectToDelete) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return projectToDelete.getBeneficiaryAssigned().toString() !\u003d NULL_BENEFICIARY_NAME"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 !model.getFilteredBeneficiaryList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .filtered(x -\u003e x.getName().equals(projectToDelete.getBeneficiaryAssigned())).isEmpty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            || (other instanceof DeleteProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteProjectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 53,
      "ndhuu": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteVolunteerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Deletes a volunteer identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class DeleteVolunteerCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteVolunteer\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \": Deletes the volunteer identified by the index number used in the displayed volunteer list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_DELETE_VOLUNTEER_SUCCESS \u003d \"Deleted Volunteer: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public DeleteVolunteerCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        List\u003cVolunteer\u003e lastShownList \u003d model.getFilteredVolunteerList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Volunteer volunteerToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        model.deleteVolunteer(volunteerToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_VOLUNTEER_SUCCESS, volunteerToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || (other instanceof DeleteVolunteerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteVolunteerCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 14,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 17,
      "-": 178,
      "ndhuu": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditVolunteerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_DIETARY_PREFERENCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_EMERGENCY_CONTACT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_GENDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_RACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_RELIGION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_VOLUNTEERS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Age;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.DietaryPreference;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.EmergencyContact;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.MedicalCondition;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Race;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Religion;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Edits the details of an existing volunteer in the address book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class EditVolunteerCommand extends Command {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editVolunteer\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the volunteer identified \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"by the index number used in the displayed volunteer list. \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_AGE + \"AGE] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_GENDER + \"AGE] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_RACE + \"RACE] \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_RELIGION + \"AGE] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_EMERGENCY_CONTACT + \"NAME, RELATIONSHIP, PHONE] \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_DIETARY_PREFERENCE + \"PREFERENCE] \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_MEDICAL_CONDITION + \"STATUS] \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_EDIT_VOLUNTEER_SUCCESS \u003d \"Edited Volunteer: %1$s\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VOLUNTEER \u003d \"This volunteer already exists in the address book.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final EditVolunteerDescriptor editVolunteerDescriptor;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @param index                   of the volunteer in the filtered volunteer list to edit"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @param editVolunteerDescriptor details to edit the volunteer with"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public EditVolunteerCommand(Index index, EditVolunteerDescriptor editVolunteerDescriptor) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(editVolunteerDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.editVolunteerDescriptor \u003d new EditVolunteerDescriptor(editVolunteerDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Creates and returns a {@code Volunteer} with the details of {@code volunteerToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * edited with {@code editVolunteerDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private static Volunteer createEditedVolunteer(Volunteer volunteerToEdit,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                                                   EditVolunteerDescriptor editVolunteerDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        assert volunteerToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Name updatedName \u003d editVolunteerDescriptor.getName().orElse(volunteerToEdit.getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Age updatedAge \u003d editVolunteerDescriptor.getAge().orElse(volunteerToEdit.getAge());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Gender updatedGender \u003d editVolunteerDescriptor.getGender().orElse(volunteerToEdit.getGender());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Race updatedRace \u003d editVolunteerDescriptor.getRace().orElse(volunteerToEdit.getRace());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Religion updatedReligion \u003d editVolunteerDescriptor.getReligion().orElse(volunteerToEdit.getReligion());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Phone updatedPhone \u003d editVolunteerDescriptor.getPhone().orElse(volunteerToEdit.getPhone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Email updatedEmail \u003d editVolunteerDescriptor.getEmail().orElse(volunteerToEdit.getEmail());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Address updatedAddress \u003d editVolunteerDescriptor.getAddress().orElse(volunteerToEdit.getAddress());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        EmergencyContact updatedEmergencyContact \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            editVolunteerDescriptor.getEmergencyContact().orElse(volunteerToEdit.getEmergencyContact());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        DietaryPreference updatedDietaryPreference \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            editVolunteerDescriptor.getDietaryPreference().orElse(volunteerToEdit.getDietaryPreference());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        MedicalCondition updatedMedicalCondition \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            editVolunteerDescriptor.getMedicalCondition().orElse(volunteerToEdit.getMedicalCondition());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editVolunteerDescriptor.getTags().orElse(volunteerToEdit.getTags());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new Volunteer(updatedName, updatedAge, updatedGender, updatedRace, updatedReligion, updatedPhone,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            updatedAddress, updatedEmail, updatedEmergencyContact, updatedDietaryPreference,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            updatedMedicalCondition, updatedTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cVolunteer\u003e lastShownList \u003d model.getFilteredVolunteerList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Volunteer volunteerToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Volunteer editedVolunteer \u003d createEditedVolunteer(volunteerToEdit, editVolunteerDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!volunteerToEdit.isSameVolunteer(editedVolunteer) \u0026\u0026 model.hasVolunteer(editedVolunteer)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.setVolunteer(volunteerToEdit, editedVolunteer);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.updateFilteredVolunteerList(PREDICATE_SHOW_ALL_VOLUNTEERS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_VOLUNTEER_SUCCESS, editedVolunteer));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!(other instanceof EditVolunteerCommand)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        EditVolunteerCommand e \u003d (EditVolunteerCommand) other;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 editVolunteerDescriptor.equals(e.editVolunteerDescriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Stores the details to edit the volunteer with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * corresponding field value of the volunteer."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static class EditVolunteerDescriptor {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        private Age age;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        private Race race;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        private Religion religion;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        private EmergencyContact emergencycontact;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        private DietaryPreference dietarypreference;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        private MedicalCondition medicalcondition;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public EditVolunteerDescriptor() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public EditVolunteerDescriptor(EditVolunteerDescriptor toCopy) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            setAge(toCopy.age);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            setRace(toCopy.race);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            setReligion(toCopy.religion);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            setEmergencyContact(toCopy.emergencycontact);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            setDietaryPreference(toCopy.dietarypreference);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            setMedicalCondition(toCopy.medicalcondition);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Optional\u003cAge\u003e getAge() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return Optional.ofNullable(age);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public void setAge(Age age) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            this.age \u003d age;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Optional\u003cRace\u003e getRace() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return Optional.ofNullable(race);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public void setRace(Race race) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            this.race \u003d race;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Optional\u003cReligion\u003e getReligion() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return Optional.ofNullable(religion);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public void setReligion(Religion religion) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            this.religion \u003d religion;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public Optional\u003cEmergencyContact\u003e getEmergencyContact() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return Optional.ofNullable(emergencycontact);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setEmergencyContact(EmergencyContact emergencycontact) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.emergencycontact \u003d emergencycontact;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public Optional\u003cDietaryPreference\u003e getDietaryPreference() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return Optional.ofNullable(dietarypreference);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setDietaryPreference(DietaryPreference dietarypreference) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.dietarypreference \u003d dietarypreference;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public Optional\u003cMedicalCondition\u003e getMedicalCondition() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return Optional.ofNullable(medicalcondition);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setMedicalCondition(MedicalCondition medicalcondition) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.medicalcondition \u003d medicalcondition;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "         */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (!(other instanceof EditVolunteerDescriptor)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            EditVolunteerDescriptor e \u003d (EditVolunteerDescriptor) other;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getAge().equals(e.getAge())"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getRace().equals(e.getRace())"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getReligion().equals(e.getReligion())"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getEmergencyContact().equals(e.getEmergencyContact())"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getDietaryPreference().equals(e.getDietaryPreference())"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getMedicalCondition().equals(e.getMedicalCondition())"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 273,
      "articstranger": 1,
      "ndhuu": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportVolunteerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "articstranger"
        },
        "content": "//@@author articstranger"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "articstranger"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "articstranger"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * Takes the specified number of volunteers and writes the specified data to a CSV file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "articstranger"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "articstranger"
        },
        "content": "public class ExportVolunteerCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exportv\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" Exports list of volunteers into a CSV file.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            + \"If the number of volunteers specified is greater than the total number of volunteers,\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            + \" all volunteers will be printed out.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            + \"Number of volunteers to be exported + \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            + \"any number of valid volunteer prefixes e.g.(n/ y/ g/)\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 10 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            + \"n/ y/ g/\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private ArrayList\u003cString\u003e prefixToBePrinted;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private int numVolunteers;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public ExportVolunteerCommand(Pair\u003cInteger, ArrayList\u003cString\u003e\u003e numberAndprefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        requireNonNull(numberAndprefixes);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        numVolunteers \u003d numberAndprefixes.getKey();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        prefixToBePrinted \u003d numberAndprefixes.getValue();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        File output \u003d new File(\"Export.csv\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        List\u003cString[]\u003e volunteerData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        volunteerData \u003d model.addData(numVolunteers, prefixToBePrinted);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        try (PrintWriter pw \u003d new PrintWriter(output)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            volunteerData.stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    .map(this::toCsv)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    .forEach(pw::println);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            throw new CommandException(\"Error writing to file\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return new CommandResult(\"Data Written to Export.csv\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * formats string to csv format"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public String toCsv(String[] data) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return Stream.of(data)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                .collect(Collectors.joining(\",\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "articstranger"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "articstranger": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindVolunteerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Finds and lists all volunteers in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class FindVolunteerCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findVolunteer\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all volunteers whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public FindVolunteerCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        model.updateFilteredVolunteerList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            String.format(Messages.MESSAGE_VOLUNTEERS_LISTED_OVERVIEW, model.getFilteredVolunteerList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || (other instanceof FindVolunteerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindVolunteerCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 10,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListProjectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Lists all projects in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class ListProjectCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listProject\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all projects\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListVolunteerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_VOLUNTEERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Lists all volunteers in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class ListVolunteerCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listVolunteer\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all volunteers\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        model.updateFilteredVolunteerList(PREDICATE_SHOW_ALL_VOLUNTEERS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 6,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MapCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "articstranger"
        },
        "content": "//@@author articstranger"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "articstranger"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.MapObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "articstranger"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "articstranger"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "articstranger"
        },
        "content": "public class MapCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"map\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose data fits any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        + \"the supplied criteria (case-insensitive, minimum 1, maximum 3) and assigns them points\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        + \"based on the number given.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        + \"Parameters: (Corresponding prefix, points and criteria 1) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        + \"(Corresponding prefix, points and criteria 2) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        + \"(Corresponding prefix, points and criteria 3)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        + \"Example: map y/3\u003e18 r/2chinese\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mapping complete!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private MapObject map;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public MapCommand(MapObject newMap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        requireNonNull(newMap);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        map \u003d newMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        model.mapAllVolunteer(map);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "articstranger"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "articstranger": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ProjectBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.beneficiary.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Complete;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.ProjectDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Build Project"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class ProjectBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String DEFAULT_PROJECT_TITLE \u003d \"Project Title\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String DEFAULT_PROJECT_DATE \u003d \"20190401\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String DEFAULT_COMPLETE \u003d \"false\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private ProjectTitle projectTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private ProjectDate projectDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Complete complete;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Name beneficiaryAssigned;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private List\u003cVolunteer\u003e volunteerList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Initialises the ProjectBuilder with the data of {@code projectToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ProjectBuilder(Project projectToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projectTitle \u003d projectToCopy.getProjectTitle();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projectDate \u003d projectToCopy.getProjectDate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        complete \u003d projectToCopy.getComplete();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        beneficiaryAssigned \u003d projectToCopy.getBeneficiaryAssigned();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        volunteerList \u003d projectToCopy.getVolunteerList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Sets the {@code ProjectTitle} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ProjectBuilder withProjectTitle(String projectTitle) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectTitle \u003d new ProjectTitle(projectTitle);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Sets the {@code ProjectDate} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ProjectBuilder withProjectDate(String projectDate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectDate \u003d new ProjectDate(projectDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return a project"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public Project build() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return new Project(projectTitle, projectDate, complete, beneficiaryAssigned, volunteerList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Sets the {@code ProjectTitle} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ProjectBuilder withComplete(Boolean complete) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.complete \u003d new Complete(complete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param beneficiary"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return ProjectBuilder"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ProjectBuilder withBeneficiary(Name beneficiary) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.beneficiaryAssigned \u003d beneficiary;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @param attachedVolunteers"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @return ProjectBuilder"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ProjectBuilder withVolunteer(List\u003cVolunteer\u003e attachedVolunteers) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.volunteerList \u003d attachedVolunteers;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 73,
      "ndhuu": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectVolunteerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Selects a volunteer identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class SelectVolunteerCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"selectVolunteer\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        + \": Selects the volunteer identified by the index number used in the displayed volunteer list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_SELECT_VOLUNTEER_SUCCESS \u003d \"Selected Volunteer: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public SelectVolunteerCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        List\u003cVolunteer\u003e filteredVolunteerList \u003d model.getFilteredVolunteerList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredVolunteerList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_VOLUNTEER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        model.setSelectedVolunteer(filteredVolunteerList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_VOLUNTEER_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || (other instanceof SelectVolunteerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((SelectVolunteerCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 16,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "articstranger"
        },
        "content": "//@@author articstranger"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "articstranger"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "articstranger"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * Sorts the current list of volunteers and returns a list of volunteers"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * in descending order of points given by the map command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "articstranger"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "articstranger"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        + \": Sorts and presents a list of volunteers who best fulfill \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        + \"the criteria given in the map command, up to the number specified in this command.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        + \"Parameters: MAX_NUMBER\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        + \"Example: sort 10\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private int maxVol;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        model.sortVolunteers();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return new CommandResult(String.format(\"Sorted!\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "articstranger"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "articstranger": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BENEFICIARIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_VOLUNTEERS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.updateFilteredBeneficiaryList(PREDICATE_SHOW_ALL_BENEFICIARIES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.updateFilteredVolunteerList(PREDICATE_SHOW_ALL_VOLUNTEERS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "ndhuu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/beneficiary/AddBeneficiaryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.commands.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Adds a beneficiary to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class AddBeneficiaryCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addB\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"ab\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a beneficiary to the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_ADDRESS + \"ADDRESS \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_NAME + \"Orphanage \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_EMAIL + \"Orphanage@example.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New beneficiary added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BENEFICIARY \u003d \"This beneficiary already exists in the address book \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"Beneficiary needs to have different Name, Phone number and Email\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final Beneficiary toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Beneficiary}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public AddBeneficiaryCommand(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(beneficiary);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        toAdd \u003d beneficiary;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (model.hasBeneficiary(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BENEFICIARY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.addBeneficiary(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof AddBeneficiaryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddBeneficiaryCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/beneficiary/DeleteBeneficiaryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.commands.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.HARD_DELETE_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Deletes a beneficiary identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class DeleteBeneficiaryCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteB\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"db\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \": Deletes the beneficiary identified by the index number used in the displayed beneficiary list.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"Parameters: i/INDEX (must be a positive integer) -D (hard delete mode) \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_INDEX + \" 1 [optional] \" + HARD_DELETE_MODE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_DELETE_BENEFICIARY_SUCCESS \u003d \"Deleted Beneficiary: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_BENEFICIARY_HAS_PROJECTS_ATTACHED \u003d \"%1$s has this/these projects: %2$s\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \" attached to it. \\n \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"Please delete them before delete the beneficiary\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"or use hard mode delete: -D to delete attached projects and this beneficiary\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final boolean isHardDeleteMode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public DeleteBeneficiaryCommand(Index targetIndex, boolean isHardDeleteMode) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.isHardDeleteMode \u003d isHardDeleteMode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cBeneficiary\u003e lastShownList \u003d model.getFilteredBeneficiaryList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (exceedBeneficiaryListSize(lastShownList)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BENEFICIARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiaryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (beneficiaryToDelete.hasAttachedProjects() \u0026\u0026 !isHardDeleteMode) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BENEFICIARY_HAS_PROJECTS_ATTACHED,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                beneficiaryToDelete.getName(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                beneficiaryToDelete.getAttachedProjectLists()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        } else if (beneficiaryToDelete.hasAttachedProjects() \u0026\u0026 isHardDeleteMode) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            deleteAttachedProjects(model, beneficiaryToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.deleteBeneficiary(beneficiaryToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BENEFICIARY_SUCCESS, beneficiaryToDelete));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Delete attached projects to the beneficiary"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param beneficiaryToDelete"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private void deleteAttachedProjects(Model model, Beneficiary beneficiaryToDelete) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        HashSet\u003cProjectTitle\u003e attachedProjects \u003d beneficiaryToDelete.getHashAttachedProjectLists();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cProject\u003e projectsToDelete \u003d new ArrayList\u003c\u003e(model.getFilteredProjectList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        for (Project p : projectsToDelete) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            if (attachedProjects.contains(p.getProjectTitle())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                model.deleteProject(p);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private boolean exceedBeneficiaryListSize(List\u003cBeneficiary\u003e lastShownList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return targetIndex.getZeroBased() \u003e\u003d lastShownList.size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof DeleteBeneficiaryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteBeneficiaryCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/beneficiary/EditBeneficiaryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.commands.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BENEFICIARIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.ProjectBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Edits the details of an existing beneficiary in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class EditBeneficiaryCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editB\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"eb\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the beneficiary identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"by the index number used in the displayed beneficiary list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_EDIT_BENEFICIARY_SUCCESS \u003d \"Edited Beneficiary: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BENEFICIARY \u003d \"This beneficiary already exists in the address book.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final EditBeneficiaryDescriptor editBeneficiaryDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param index                     of the beneficiary in the filtered beneficiary list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param editBeneficiaryDescriptor details to edit the beneficiary with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public EditBeneficiaryCommand(Index index, EditBeneficiaryDescriptor editBeneficiaryDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(editBeneficiaryDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.editBeneficiaryDescriptor \u003d new EditBeneficiaryDescriptor(editBeneficiaryDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Creates and returns a {@code Beneficiary} with the details of {@code beneficiaryToEdit}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * edited with {@code editBeneficiaryDescriptor}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static Beneficiary createEditedBeneficiary(Beneficiary beneficiaryToEdit,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                                                       EditBeneficiaryDescriptor editBeneficiaryDescriptor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assert beneficiaryToEdit !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Name updatedName \u003d editBeneficiaryDescriptor.getName().orElse(beneficiaryToEdit.getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Phone updatedPhone \u003d editBeneficiaryDescriptor.getPhone().orElse(beneficiaryToEdit.getPhone());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Email updatedEmail \u003d editBeneficiaryDescriptor.getEmail().orElse(beneficiaryToEdit.getEmail());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Address updatedAddress \u003d editBeneficiaryDescriptor.getAddress().orElse(beneficiaryToEdit.getAddress());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new Beneficiary(updatedName, updatedPhone, updatedEmail, updatedAddress);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cBeneficiary\u003e lastShownList \u003d model.getFilteredBeneficiaryList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (exceedBeneficiaryListSize(lastShownList)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BENEFICIARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        //Set edited beneficiary"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiaryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary editedBeneficiary \u003d createEditedBeneficiary(beneficiaryToEdit, editBeneficiaryDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        editedBeneficiary.setProjectLists(beneficiaryToEdit.getAttachedProjectLists());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (doesEditCauseDuplication(model, beneficiaryToEdit, editedBeneficiary)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BENEFICIARY);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        updateAttachedProjects(model, beneficiaryToEdit, editedBeneficiary);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        updateTargetBeneficiary(model, beneficiaryToEdit, editedBeneficiary);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        saveChanges(model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BENEFICIARY_SUCCESS, editedBeneficiary));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private boolean exceedBeneficiaryListSize(List\u003cBeneficiary\u003e lastShownList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return index.getZeroBased() \u003e\u003d lastShownList.size();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private void saveChanges(Model model) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private void updateTargetBeneficiary(Model model, Beneficiary beneficiaryToEdit, Beneficiary editedBeneficiary) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.setBeneficiary(beneficiaryToEdit, editedBeneficiary);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.updateFilteredBeneficiaryList(PREDICATE_SHOW_ALL_BENEFICIARIES);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Check if the edit is valid (no repetition of beneficiaries)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param beneficiaryToEdit"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param editedBeneficiary"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private boolean doesEditCauseDuplication("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model model, Beneficiary beneficiaryToEdit, Beneficiary editedBeneficiary) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return beneficiaryToEdit.isSameBeneficiary(editedBeneficiary)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 model.getFilteredBeneficiaryList().filtered(x -\u003e x.isSameBeneficiary(editedBeneficiary)).size() !\u003d 1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Update the projects attached to the edited beneficiary"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param beneficiaryToEdit"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param editedBeneficiary"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private void updateAttachedProjects(Model model, Beneficiary beneficiaryToEdit, Beneficiary editedBeneficiary) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        for (ProjectTitle attachedProject : beneficiaryToEdit.getAttachedProjectLists()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Predicate\u003cProject\u003e equalProjectTitle \u003d x -\u003e x.getProjectTitle().equals(attachedProject);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            if (model.getFilteredProjectList().filtered(equalProjectTitle).size() !\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                Project project \u003d model.getFilteredProjectList().filtered(equalProjectTitle).get(0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                Project newProject \u003d new ProjectBuilder(project).withBeneficiary(editedBeneficiary.getName()).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                model.setProject(project, newProject);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!(other instanceof EditBeneficiaryCommand)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand e \u003d (EditBeneficiaryCommand) other;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 editBeneficiaryDescriptor.equals(e.editBeneficiaryDescriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Stores the details to edit the beneficiary with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * corresponding field value of the beneficiary."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static class EditBeneficiaryDescriptor {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        private Set\u003cProjectTitle\u003e attachedProjectList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public EditBeneficiaryDescriptor() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public EditBeneficiaryDescriptor(EditBeneficiaryDescriptor toCopy) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setAttachedProjectList(Set\u003cProjectTitle\u003e attachedProjectList) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.attachedProjectList \u003d attachedProjectList;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            if (!(other instanceof EditBeneficiaryDescriptor)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            EditBeneficiaryDescriptor e \u003d (EditBeneficiaryDescriptor) other;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 265
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/beneficiary/FindBeneficiaryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.commands.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Finds and lists all beneficiaries in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class FindBeneficiaryCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findB\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"fb\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all beneficiaries whose names contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public FindBeneficiaryCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.updateFilteredBeneficiaryList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            String.format(Messages.MESSAGE_BENEFICIARIES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                model.getFilteredBeneficiaryList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof FindBeneficiaryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindBeneficiaryCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/beneficiary/ListBeneficiaryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.commands.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BENEFICIARIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Lists all beneficiaries in the address book to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class ListBeneficiaryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listB\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"lb\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all beneficiaries\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.updateFilteredBeneficiaryList(PREDICATE_SHOW_ALL_BENEFICIARIES);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/beneficiary/SummaryBeneficiaryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.commands.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Edits the details of an existing beneficiary in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class SummaryBeneficiaryCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summariseB\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"sb\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Summary statistics details of beneficiary list \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"based on projects attached to them\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_SUMMARY_BENEFICIARY_SUCCESS \u003d \"Beneficiaries are summarised, and shown on \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"pop up table\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Summarise beneficiary list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static ObservableList\u003cSummarisedBeneficiary\u003e getSummarisedBeneficiaries(Logic logic) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cBeneficiary\u003e beneficiaryList \u003d logic.getFilteredBeneficiaryList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cSummarisedBeneficiary\u003e data0 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        for (Beneficiary beneficiary : beneficiaryList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            data0.add(new SummarisedBeneficiary(beneficiary));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return FXCollections.observableArrayList(data0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Make the scene for beneficiary summary table"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param stage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param table"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param data"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static Scene getScene(Stage stage, TableView\u003cSummarisedBeneficiary\u003e table,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                                 ObservableList\u003cSummarisedBeneficiary\u003e data) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Scene scene \u003d new Scene(new Group());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        stage.setTitle(\"VolunCheer\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        stage.setWidth(1200);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        stage.setHeight(700);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final Label label \u003d new Label(\"Beneficiary Summary Table\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        label.setFont(new Font(\"Arial\", 20));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        table.setEditable(true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        TableColumn nameCol \u003d new TableColumn(\"Beneficiary Name\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        nameCol.setMinWidth(100);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        nameCol.setCellValueFactory("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new PropertyValueFactory\u003cSummarisedBeneficiary, String\u003e(\"name\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        TableColumn numProjectCol \u003d new TableColumn(\"No. Projects\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        numProjectCol.setMinWidth(100);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        numProjectCol.setCellValueFactory("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new PropertyValueFactory\u003cSummarisedBeneficiary, String\u003e(\"numberOfProjects\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        TableColumn projListCol \u003d new TableColumn(\"List of attached projects\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        projListCol.setMinWidth(800);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        projListCol.setCellValueFactory("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new PropertyValueFactory\u003cSummarisedBeneficiary, List\u003cString\u003e\u003e(\"projectList\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        table.setItems(data);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        table.getColumns().addAll(nameCol, numProjectCol, projListCol);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final VBox vbox \u003d new VBox();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        vbox.setSpacing(5);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        vbox.setPadding(new Insets(10, 0, 0, 10));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        vbox.getChildren().addAll(label, table);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Group g \u003d (Group) scene.getRoot();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        g.getChildren().addAll(vbox);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return scene;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUMMARY_BENEFICIARY_SUCCESS), true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Class to do summary of beneficiary"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static class SummarisedBeneficiary {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        private final String name;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        private final String numberOfProjects;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        private final List\u003cString\u003e projectList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public SummarisedBeneficiary(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.name \u003d beneficiary.getName().fullName;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            for (ProjectTitle project : beneficiary.getAttachedProjectLists()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                this.projectList.add(project.fullTitle);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.numberOfProjects \u003d Integer.toString(this.projectList.size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public String getName() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public String getNumberOfProjects() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return numberOfProjects;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public List\u003cString\u003e getProjectList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return projectList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Represents an error which occurs during execution of a {@link CommandException}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Name name \u003d ParserUtilPerson.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Phone phone \u003d ParserUtilPerson.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Email email \u003d ParserUtilPerson.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Address address \u003d ParserUtilPerson.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtilPerson.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "ndhuu": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddProjectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxProject.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxProject.PREFIX_PROJECT_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.AddProjectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Parses input arguments and creates a new AddProjectCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class AddProjectCommandParser implements Parser\u003cAddProjectCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddProjectCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * and returns an AddProjectCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public AddProjectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_PROJECT_TITLE, PREFIX_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PROJECT_TITLE, PREFIX_DATE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProjectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            ProjectTitle projectTitle \u003d ParserUtilProject"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                    .parseProjectTitle(argMultimap.getValue(PREFIX_PROJECT_TITLE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            ProjectDate projectDate \u003d ParserUtilProject.parseProjectDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            Project project \u003d new Project(projectTitle, projectDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return new AddProjectCommand(project);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 39,
      "ndhuu": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddVolunteerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_DIETARY_PREFERENCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_EMERGENCY_CONTACT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_GENDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_RACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_RELIGION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.AddVolunteerCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Age;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.DietaryPreference;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.EmergencyContact;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.MedicalCondition;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Race;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Religion;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Parses input arguments and creates a new AddVolunteerCommand object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class AddVolunteerCommandParser implements Parser\u003cAddVolunteerCommand\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddVolunteerCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * and returns an AddVolunteerCommand object for execution."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public AddVolunteerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AGE, PREFIX_GENDER, PREFIX_RACE, PREFIX_RELIGION,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                PREFIX_PHONE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                PREFIX_EMAIL, PREFIX_EMERGENCY_CONTACT, PREFIX_DIETARY_PREFERENCE, PREFIX_MEDICAL_CONDITION,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                PREFIX_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AGE, PREFIX_GENDER, PREFIX_RACE, PREFIX_PHONE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            PREFIX_EMAIL, PREFIX_EMERGENCY_CONTACT)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVolunteerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_RELIGION)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            argMultimap.put(PREFIX_RELIGION, \"nil\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DIETARY_PREFERENCE)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            argMultimap.put(PREFIX_DIETARY_PREFERENCE, \"nil\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MEDICAL_CONDITION)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            argMultimap.put(PREFIX_MEDICAL_CONDITION, \"nil\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Name name \u003d ParserUtilVolunteer.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Age age \u003d ParserUtilVolunteer.parseAge(argMultimap.getValue(PREFIX_AGE).get());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Gender gender \u003d ParserUtilVolunteer.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Race race \u003d ParserUtilVolunteer.parseRace(argMultimap.getValue(PREFIX_RACE).get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Religion religion \u003d ParserUtilVolunteer.parseReligion(argMultimap.getValue(PREFIX_RELIGION).get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Phone phone \u003d ParserUtilVolunteer.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Address address \u003d ParserUtilVolunteer.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Email email \u003d ParserUtilVolunteer.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        EmergencyContact emergencycontact \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            ParserUtilVolunteer.parseEmergencyContact(argMultimap.getValue(PREFIX_EMERGENCY_CONTACT).get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        MedicalCondition medicalcondition \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            ParserUtilVolunteer.parseMedicalCondition(argMultimap.getValue(PREFIX_MEDICAL_CONDITION).get());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        DietaryPreference dietarypreference \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            ParserUtilVolunteer.parseDietaryPreference(argMultimap.getValue(PREFIX_DIETARY_PREFERENCE).get());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            ParserUtilVolunteer.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Volunteer volunteer \u003d new Volunteer(name, age, gender, race, religion, phone, address, email, emergencycontact,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            dietarypreference, medicalcondition, tagList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new AddVolunteerCommand(volunteer);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 96,
      "ndhuu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.AddProjectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.AddVolunteerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.AssignBeneficiaryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.AssignVolunteerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.CompleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.DeleteProjectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.DeleteVolunteerCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.EditVolunteerCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.logic.commands.ExportVolunteerCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.FindVolunteerCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.ListProjectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.ListVolunteerCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.MapCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.SelectVolunteerCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.AddBeneficiaryCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.DeleteBeneficiaryCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.EditBeneficiaryCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.FindBeneficiaryCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.ListBeneficiaryCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.SummaryBeneficiaryCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.beneficiary.AddBeneficiaryCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.beneficiary.DeleteBeneficiaryCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.beneficiary.EditBeneficiaryCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.beneficiary.FindBeneficiaryCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        case AddProjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new AddProjectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        case AddBeneficiaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        case AddBeneficiaryCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new AddBeneficiaryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        case AddVolunteerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new AddVolunteerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        case SummaryBeneficiaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        case SummaryBeneficiaryCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return new SummaryBeneficiaryCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        case AssignBeneficiaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return new AssignBeneficiaryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        case AssignVolunteerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return new AssignVolunteerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        case EditBeneficiaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        case EditBeneficiaryCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new EditBeneficiaryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        case EditVolunteerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new EditVolunteerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        case DeleteBeneficiaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        case DeleteBeneficiaryCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new DeleteBeneficiaryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        case DeleteProjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new DeleteProjectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        case DeleteVolunteerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new DeleteVolunteerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        case FindBeneficiaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        case FindBeneficiaryCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new FindBeneficiaryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        case FindVolunteerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new FindVolunteerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        case ListProjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return new ListProjectCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        case ListBeneficiaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        case ListBeneficiaryCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new ListBeneficiaryCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        case ListVolunteerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new ListVolunteerCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        case SelectVolunteerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return new SelectVolunteerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        case CompleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return new CompleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        case MapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return new MapCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        case ExportVolunteerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            return new ExportVolunteerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 34,
      "quinnzzzzz": 19,
      "articstranger": 8,
      "-": 78,
      "ndhuu": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Returns an arraylist of all prefix strings in the argMultimap."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public ArrayList\u003cString\u003e getPrefixes() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        ArrayList\u003cString\u003e prefixes \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        for (Prefix key : argMultimap.keySet()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            if (!key.getPrefix().isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                prefixes.add(key.getPrefix());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return prefixes;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "articstranger": 13,
      "-": 60,
      "ndhuu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 146,
      "ndhuu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AssignBeneficiaryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.ASSIGNED_PROJECT_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.AssignBeneficiaryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Parses input arguments and creates a new AssignBeneficiaryCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class AssignBeneficiaryCommandParser implements Parser\u003cAssignBeneficiaryCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignBeneficiaryCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * and returns an AssignBeneficiaryCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public AssignBeneficiaryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, ASSIGNED_PROJECT_TITLE, PREFIX_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, ASSIGNED_PROJECT_TITLE, PREFIX_INDEX)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                AssignBeneficiaryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ProjectTitle projectTitle \u003d ParserUtilProject.parseProjectTitle(argMultimap"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .getValue(ASSIGNED_PROJECT_TITLE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return new AssignBeneficiaryCommand(projectTitle, index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 32,
      "ndhuu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AssignVolunteerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.ASSIGNED_PROJECT_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_REQUIRED_VOLUNTEER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.AssignVolunteerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Parses input arguments and creates a new AssignVolunteerCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class AssignVolunteerCommandParser implements Parser\u003cAssignVolunteerCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignVolunteerCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * and returns an AssignVolunteerCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public AssignVolunteerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, ASSIGNED_PROJECT_TITLE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                PREFIX_REQUIRED_VOLUNTEER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, ASSIGNED_PROJECT_TITLE, PREFIX_REQUIRED_VOLUNTEER)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    AssignVolunteerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        ProjectTitle projectTitle \u003d ParserUtilProject.parseProjectTitle(argMultimap"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                .getValue(ASSIGNED_PROJECT_TITLE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_REQUIRED_VOLUNTEER).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    AssignVolunteerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Index indexTo \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_REQUIRED_VOLUNTEER).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Integer requiredVolunteers \u003d indexTo.getOneBased();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return new AssignVolunteerCommand(projectTitle, requiredVolunteers);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntaxBeneficiary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class CliSyntaxBeneficiary extends CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Prefix ASSIGNED_PROJECT_TITLE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Prefix HARD_DELETE_MODE \u003d new Prefix(\"-D\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntaxProject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class CliSyntaxProject extends CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Prefix PREFIX_PROJECT_TITLE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 2,
      "articstranger": 1,
      "ndhuu": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntaxVolunteer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class CliSyntaxVolunteer {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Prefix PREFIX_AGE \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Prefix PREFIX_RACE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Prefix PREFIX_RELIGION \u003d new Prefix(\"rg/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Prefix PREFIX_MEDICAL_CONDITION \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Prefix PREFIX_DIETARY_PREFERENCE \u003d new Prefix(\"dp/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Prefix PREFIX_EMERGENCY_CONTACT \u003d new Prefix(\"ec/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final Prefix PREFIX_REQUIRED_VOLUNTEER \u003d new Prefix(\"rv/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final Prefix ASSIGNED_PROJECT_TITLE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 11,
      "quinnzzzzz": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CompleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxProject.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.CompleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Parses input arguments and creates a new CompleteCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class CompleteCommandParser implements Parser\u003cCompleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CompleteCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * and returns an CompleteCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public CompleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    CompleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return new CompleteCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 42,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteProjectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.commands.DeleteProjectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Parses input arguments and creates a new DeleteProjectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class DeleteProjectCommandParser implements Parser\u003cDeleteProjectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteProjectCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * and returns an DeleteProjectCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public DeleteProjectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return new DeleteProjectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteProjectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteVolunteerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.DeleteVolunteerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Parses input arguments and creates a new DeleteVolunteerCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class DeleteVolunteerCommandParser implements Parser\u003cDeleteVolunteerCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteVolunteerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * and returns an DeleteVolunteerCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public DeleteVolunteerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new DeleteVolunteerCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteVolunteerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 8,
      "-": 21,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editPersonDescriptor.setName(ParserUtilPerson.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtilPerson.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtilPerson.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtilPerson.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return Optional.of(ParserUtilPerson.parseTags(tagSet));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "ndhuu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditVolunteerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_AGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_DIETARY_PREFERENCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_EMERGENCY_CONTACT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_GENDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_RACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_RELIGION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.EditVolunteerCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.EditVolunteerCommand.EditVolunteerDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Parses input arguments and creates a new EditVolunteerCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class EditVolunteerCommandParser implements Parser\u003cEditVolunteerCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditVolunteerCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * and returns an EditVolunteerCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public EditVolunteerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AGE, PREFIX_GENDER, PREFIX_RACE, PREFIX_RELIGION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                PREFIX_PHONE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                PREFIX_EMAIL, PREFIX_EMERGENCY_CONTACT, PREFIX_DIETARY_PREFERENCE, PREFIX_MEDICAL_CONDITION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            index \u003d ParserUtilVolunteer.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(String.format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                (MESSAGE_INVALID_COMMAND_FORMAT, EditVolunteerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        EditVolunteerDescriptor editVolunteerDescriptor \u003d new EditVolunteerDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            editVolunteerDescriptor.setName("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                ParserUtilVolunteer.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AGE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editVolunteerDescriptor"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .setAge(ParserUtilVolunteer.parseAge(argMultimap.getValue(PREFIX_AGE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editVolunteerDescriptor"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .setGender(ParserUtilVolunteer.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RACE).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editVolunteerDescriptor"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .setRace(ParserUtilVolunteer.parseRace(argMultimap.getValue(PREFIX_RACE).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RELIGION).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editVolunteerDescriptor"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .setReligion(ParserUtilVolunteer.parseReligion(argMultimap.getValue(PREFIX_RELIGION).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editVolunteerDescriptor"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .setPhone(ParserUtilVolunteer.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editVolunteerDescriptor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .setAddress(ParserUtilVolunteer.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editVolunteerDescriptor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .setEmail(ParserUtilVolunteer.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMERGENCY_CONTACT).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editVolunteerDescriptor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .setEmergencyContact(ParserUtilVolunteer"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                    .parseEmergencyContact(argMultimap.getValue(PREFIX_EMERGENCY_CONTACT).get()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DIETARY_PREFERENCE).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editVolunteerDescriptor.setDietaryPreference(ParserUtilVolunteer"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .parseDietaryPreference(argMultimap.getValue(PREFIX_DIETARY_PREFERENCE).get()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MEDICAL_CONDITION).isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editVolunteerDescriptor.setMedicalCondition(ParserUtilVolunteer"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .parseMedicalCondition(argMultimap.getValue(PREFIX_MEDICAL_CONDITION).get()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            editVolunteerDescriptor.setAddress("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                ParserUtilVolunteer.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new EditVolunteerCommand(index, editVolunteerDescriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 46,
      "articstranger": 4,
      "-": 34,
      "ndhuu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportVolunteerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "articstranger"
        },
        "content": "//@@author articstranger"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "articstranger"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_AGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_DIETARY_PREFERENCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_EMERGENCY_CONTACT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_GENDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_RACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_RELIGION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.isValidInt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.logic.commands.ExportVolunteerCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "articstranger"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "articstranger"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "articstranger"
        },
        "content": "public class ExportVolunteerCommandParser implements Parser\u003cExportVolunteerCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Returns true if the argMultimap contains any valid prefixes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private static boolean hasPrefixes(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        if (!(argMultimap.getAllValues(PREFIX_NAME).isEmpty()) || !(argMultimap.getAllValues(PREFIX_AGE).isEmpty())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                || !(argMultimap.getAllValues(PREFIX_GENDER).isEmpty())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                || !(argMultimap.getAllValues(PREFIX_RACE).isEmpty())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                || !(argMultimap.getAllValues(PREFIX_RELIGION).isEmpty())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                || !(argMultimap.getAllValues(PREFIX_PHONE).isEmpty())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                || !(argMultimap.getAllValues(PREFIX_ADDRESS).isEmpty())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                || !(argMultimap.getAllValues(PREFIX_EMAIL).isEmpty())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                || !(argMultimap.getAllValues(PREFIX_EMERGENCY_CONTACT).isEmpty())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                || !(argMultimap.getAllValues(PREFIX_DIETARY_PREFERENCE).isEmpty())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                || !(argMultimap.getAllValues(PREFIX_MEDICAL_CONDITION).isEmpty())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                || !(argMultimap.getAllValues(PREFIX_TAG).isEmpty())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * parses arguments into a pair of integer and list for @code exportVolunteerCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public ExportVolunteerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AGE, PREFIX_GENDER, PREFIX_RACE, PREFIX_RELIGION,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_EMAIL, PREFIX_EMERGENCY_CONTACT, PREFIX_DIETARY_PREFERENCE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                PREFIX_MEDICAL_CONDITION, PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        if (!hasPrefixes(argMultimap) || argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                || !isValidInt(argMultimap.getPreamble())) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, ExportVolunteerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        if (!isValidInt(argMultimap.getPreamble())) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, ExportVolunteerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        ArrayList\u003cString\u003e prefixes \u003d argMultimap.getPrefixes();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        Pair\u003cInteger, ArrayList\u003cString\u003e\u003e numberAndprefixes \u003d new Pair\u003c\u003e(Integer.parseInt(argMultimap.getPreamble()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                prefixes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return new ExportVolunteerCommand(numberAndprefixes);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "articstranger"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "articstranger": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindVolunteerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.FindVolunteerCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Parses input arguments and creates a new FindVolunteerCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class FindVolunteerCommandParser implements Parser\u003cFindVolunteerCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindVolunteerCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * and returns an FindVolunteerCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public FindVolunteerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindVolunteerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new FindVolunteerCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 9,
      "-": 24,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MapCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "articstranger"
        },
        "content": "//@@author articstranger"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "articstranger"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_AGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_AGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_RACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.isValidInt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.logic.commands.MapCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.MapObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "articstranger"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * Parses input arguments and creates a new MapCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "articstranger"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "articstranger"
        },
        "content": "public class MapCommandParser implements Parser\u003cMapCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Returns true if the argMultimap contains any valid prefixes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private static boolean noPrefixes(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_AGE).isEmpty() \u0026\u0026 argMultimap.getAllValues(PREFIX_RACE).isEmpty()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            \u0026\u0026 argMultimap.getAllValues(PREFIX_MEDICAL_CONDITION).isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MapCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * and returns an MapCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public MapCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_AGE, PREFIX_RACE, PREFIX_MEDICAL_CONDITION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        if (noPrefixes(argMultimap) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        MapObject newMap \u003d parseCriteria(argMultimap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        if (newMap \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_AGE_FORMAT, MapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return new MapCommand(newMap);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Splits tokens into proper data for MapCommand() to handle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private MapObject parseCriteria(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        int prefixPoints;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        String prefixCriteria;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        String yearOperator \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        String criteriaHolder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        Pair\u003cInteger, Integer\u003e localAgePair \u003d new Pair\u003c\u003e(0, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        Pair\u003cInteger, String\u003e localRacePair \u003d new Pair\u003c\u003e(0, \"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        Pair\u003cInteger, String\u003e localMedicalPair \u003d new Pair\u003c\u003e(0, \"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_AGE).isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            criteriaHolder \u003d argMultimap.getValue(PREFIX_AGE).get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            prefixPoints \u003d isValidInt(criteriaHolder.substring(0, 1))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                ? Integer.parseInt(criteriaHolder.substring(0, 1)) : -1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            if (prefixPoints \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            yearOperator \u003d criteriaHolder.substring(1, 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            prefixCriteria \u003d criteriaHolder.substring(2, criteriaHolder.length());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            if (notValidAgePair(yearOperator, prefixCriteria)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            localAgePair \u003d new Pair\u003c\u003e(prefixPoints, Integer.parseInt(prefixCriteria));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            localAgePair \u003d new Pair\u003c\u003e(0, 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_RACE).isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            criteriaHolder \u003d argMultimap.getValue(PREFIX_RACE).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            prefixPoints \u003d Integer.parseInt(criteriaHolder.substring(0, 1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            prefixCriteria \u003d criteriaHolder.substring(1, criteriaHolder.length());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            localRacePair \u003d new Pair\u003c\u003e(prefixPoints, prefixCriteria);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            localRacePair \u003d new Pair\u003c\u003e(0, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_MEDICAL_CONDITION).isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            criteriaHolder \u003d argMultimap.getValue(PREFIX_MEDICAL_CONDITION).get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            prefixPoints \u003d Integer.parseInt(criteriaHolder.substring(0, 1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            prefixCriteria \u003d criteriaHolder.substring(1, criteriaHolder.length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            localMedicalPair \u003d new Pair\u003c\u003e(prefixPoints, prefixCriteria);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            localMedicalPair \u003d new Pair\u003c\u003e(0, \"\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        MapObject newMap \u003d new MapObject(localAgePair, yearOperator, localRacePair, localMedicalPair);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return newMap;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * checks the age pair to see if the comparator and year is valid"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public boolean notValidAgePair(String comparator, String year) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        if (comparator.contains(\"\u003c\") || comparator.contains(\"\u003e\") || comparator.contains(\"\u003d\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            if (isValidInt(year)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "articstranger"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "articstranger": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String UNSPECIFIED_FIELD \u003d \"\u003cUNSPECIFIED\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    //@@author articstranger"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * checks @param testingString and returns true if the string can be converted to an integer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public static boolean isValidInt(String testingString) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            Integer.parseInt(testingString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "articstranger"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 1,
      "articstranger": 13,
      "-": 26,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtilBeneficiary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class ParserUtilBeneficiary extends ParserUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String NIL_NAME \u003d \"nil\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!Name.isValidName(trimmedName) || trimmedName.toLowerCase().equals(NIL_NAME)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtilPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class ParserUtilPerson extends ParserUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtilProject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.ProjectDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class ParserUtilProject extends ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String UNSPECIFIED_FIELD \u003d \"\u003cUNSPECIFIED\u003e\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Parses a project date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static ProjectDate parseProjectDate(String projectDate) throws IllegalValueException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(projectDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        String trimmedProjectDate \u003d projectDate.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!ProjectDate.isValidDate(trimmedProjectDate)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new IllegalValueException(ProjectDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return new ProjectDate(trimmedProjectDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * parse project title"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static ProjectTitle parseProjectTitle(String projectTitle) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(projectTitle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        String trimmedProjectTitle \u003d projectTitle.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!ProjectTitle.isValidName(trimmedProjectTitle)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new ParseException(ProjectTitle.MESSAGE_PROJECT_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return new ProjectTitle(trimmedProjectTitle);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Parses {@code String oneBasedIndexes} into a {@code List\u003cIndex\u003e} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static List\u003cIndex\u003e parseIndexes(String oneBasedIndexes) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        String trimmedIndexes \u003d oneBasedIndexes.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        String[] splitOneBasedIndexes \u003d trimmedIndexes.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Set\u003cString\u003e uniqueIndexes \u003d new HashSet\u003c\u003e(Arrays.asList(splitOneBasedIndexes));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        for (String index : uniqueIndexes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            indexList.add(parseIndex(index));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return indexList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e value} into the specified value or {@code UNSPECIFIED_FIELD} if is empty"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static Optional\u003cString\u003e parseValue(Optional\u003cString\u003e value, String messageConstraints)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (value.isPresent() \u0026\u0026 value.get().equals(UNSPECIFIED_FIELD)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new IllegalValueException(messageConstraints);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return Optional.of(value.orElse(UNSPECIFIED_FIELD));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 59,
      "ndhuu": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtilVolunteer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Age;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.DietaryPreference;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.EmergencyContact;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.MedicalCondition;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Race;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Religion;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class ParserUtilVolunteer {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses a {@code String emergencycontact} into an {@code EmergencyContact}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the given {@code emergencycontact} is invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static EmergencyContact parseEmergencyContact(String emergencycontact) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(emergencycontact);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        String trimmedEmergencyContact \u003d emergencycontact.trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!EmergencyContact.isValidEmergencyContact(trimmedEmergencyContact)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(EmergencyContact.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new EmergencyContact(trimmedEmergencyContact);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses a {@code String medicalcondition} into an {@code MedicalCondition}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static MedicalCondition parseMedicalCondition(String medicalcondition) throws ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(medicalcondition);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        String trimmedMedicalCondition \u003d medicalcondition.trim();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!MedicalCondition.isValidMedicalCondition(trimmedMedicalCondition)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(MedicalCondition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new MedicalCondition(trimmedMedicalCondition);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses a {@code String dietarypreference} into an {@code DietaryPreference}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the given {@code dietarypreference} is invalid."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static DietaryPreference parseDietaryPreference(String dietarypreference) throws ParseException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(dietarypreference);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        String trimmedDietaryPreference \u003d dietarypreference.trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!DietaryPreference.isValidDietaryPreference(trimmedDietaryPreference)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new DietaryPreference(trimmedDietaryPreference);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses a {@code String age} into an {@code Age}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the given {@code age} is invalid."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static Age parseAge(String age) throws ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        String trimmedAge \u003d age.trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Age.isValidAge(trimmedAge)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new Age(trimmedAge);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses a {@code String gender} into an {@code Gender}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses a {@code String race} into an {@code Race}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the given {@code race} is invalid."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static Race parseRace(String race) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(race);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        String trimmedRace \u003d race.trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Race.isValidRace(trimmedRace)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new Race(trimmedRace);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses a {@code String race} into an {@code Religion}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws ParseException if the given {@code religion} is invalid."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static Religion parseReligion(String religion) throws ParseException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(religion);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        String trimmedReligion \u003d religion.trim();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Religion.isValidReligion(trimmedReligion)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new ParseException(Religion.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new Religion(trimmedReligion);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 236,
      "articstranger": 1,
      "ndhuu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectVolunteerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.SelectVolunteerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Parses input arguments and creates a new SelectVolunteerCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class SelectVolunteerCommandParser implements Parser\u003cSelectVolunteerCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectVolunteerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * and returns an SelectVolunteerCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public SelectVolunteerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            Index index \u003d ParserUtilVolunteer.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return new SelectVolunteerCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectVolunteerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 9,
      "-": 19,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/beneficiary/AddBeneficiaryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.parser.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.AddBeneficiaryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.ParserUtilBeneficiary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class AddBeneficiaryCommandParser implements Parser\u003cAddBeneficiaryCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public AddBeneficiaryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                AddBeneficiaryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Name name \u003d ParserUtilBeneficiary.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Phone phone \u003d ParserUtilBeneficiary.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Email email \u003d ParserUtilBeneficiary.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Address address \u003d ParserUtilBeneficiary.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiary \u003d new Beneficiary(name, phone, email, address);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new AddBeneficiaryCommand(beneficiary);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/beneficiary/DeleteBeneficiaryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.parser.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.HARD_DELETE_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.DeleteBeneficiaryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.ParserUtilBeneficiary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Parses input arguments and creates a new DeleteBeneficiaryCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class DeleteBeneficiaryCommandParser implements Parser\u003cDeleteBeneficiaryCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteBeneficiaryCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * and returns an DeleteBeneficiaryCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public DeleteBeneficiaryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_INDEX, HARD_DELETE_MODE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                DeleteBeneficiaryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        boolean isHardDeleteMode \u003d arePrefixesPresent(argMultimap, HARD_DELETE_MODE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index index \u003d ParserUtilBeneficiary.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new DeleteBeneficiaryCommand(index, isHardDeleteMode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/beneficiary/EditBeneficiaryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.parser.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.EditBeneficiaryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.EditBeneficiaryCommand.EditBeneficiaryDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.ParserUtilBeneficiary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class EditBeneficiaryCommandParser implements Parser\u003cEditBeneficiaryCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public EditBeneficiaryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                EditBeneficiaryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor editBeneficiaryDescriptor \u003d new EditBeneficiaryDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editBeneficiaryDescriptor.setName(ParserUtilBeneficiary.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editBeneficiaryDescriptor.setPhone(ParserUtilBeneficiary.parsePhone(argMultimap"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editBeneficiaryDescriptor.setEmail(ParserUtilBeneficiary.parseEmail(argMultimap"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editBeneficiaryDescriptor.setAddress(ParserUtilBeneficiary.parseAddress(argMultimap"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                .getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!editBeneficiaryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException(EditBeneficiaryCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new EditBeneficiaryCommand(index, editBeneficiaryDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/beneficiary/FindBeneficiaryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.parser.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.FindBeneficiaryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class FindBeneficiaryCommandParser implements Parser\u003cFindBeneficiaryCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public FindBeneficiaryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindBeneficiaryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new FindBeneficiaryCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.UniqueBeneficiaryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.UniqueProjectList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.UniqueVolunteerList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final UniqueVolunteerList volunteers;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final UniqueProjectList projects;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final UniqueBeneficiaryList beneficiaries;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        volunteers \u003d new UniqueVolunteerList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projects \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        beneficiaries \u003d new UniqueBeneficiaryList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void setProjects(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projects.setProjects(projects);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ObservableList\u003cBeneficiary\u003e getBeneficiaryList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return beneficiaries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ObservableList\u003cVolunteer\u003e getVolunteerList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return volunteers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return projects.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Replaces the contents of the Beneficiary list with {@code beneficiaries}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code beneficiaries} must not contain duplicate persons."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiaries(List\u003cBeneficiary\u003e beneficiaries) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.beneficiaries.setBeneficiaries(beneficiaries);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        setVolunteers(newData.getVolunteerList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        setBeneficiaries(newData.getBeneficiaryList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        setProjects(newData.getProjectList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns true if a volunteer with the same identity as {@code volunteer} exists in the address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean hasVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(volunteer);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return volunteers.contains(volunteer);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if a beneficiary with the same identity as {@code beneficiary} exists in the address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean hasBeneficiary(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(beneficiary);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return beneficiaries.contains(beneficiary);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if a project with the same identity as {@code project} exists in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return projects.contains(project);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Adds a volunteer to the address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public void addVolunteer(Volunteer v) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        volunteers.add(v);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Adds a Project to the address book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * The project must not already exist in the address book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void addProject(Project r) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projects.addProject(r);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Adds a beneficiary to the address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The beneficiary must not already exist in the address book."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void addBeneficiary(Beneficiary b) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        beneficiaries.add(b);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setVolunteers(List\u003cVolunteer\u003e volunteers) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.volunteers.setVolunteers(volunteers);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiary(Beneficiary target, Beneficiary editedBeneficiary) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(editedBeneficiary);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        beneficiaries.setBeneficiary(target, editedBeneficiary);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void removeProject(Project key) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projects.remove(key);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void removeBeneficiary(Beneficiary key) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        beneficiaries.remove(key);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u0026\u0026 persons.equals(((AddressBook) other).persons))"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u0026\u0026 projects.equals(((AddressBook) other).projects);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Replaces the given volunteer {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * The person identity of {@code editedVolunteer} must not be the same"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * as another existing volunteer in the address book."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setVolunteer(Volunteer target, Volunteer editedVolunteer) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(editedVolunteer);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        volunteers.setVolunteer(target, editedVolunteer);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void removeVolunteer(Volunteer key) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        volunteers.remove(key);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void setProject(Project target, Project edited)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throws DuplicateProjectException, ProjectNotFoundException {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(edited);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projects.setProject(target, edited);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Sorts the projects by date from earliest"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void sortProjectByDate() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projects.sortProjectByDate();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    //@@author articstranger"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Sorts all volunteers by their points"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public void sortVolunteers() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        volunteers.sortByPoints();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "articstranger"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 23,
      "quinnzzzzz": 44,
      "articstranger": 10,
      "-": 141,
      "ndhuu": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/MapObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "articstranger"
        },
        "content": "//@@author articstranger"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "articstranger"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "articstranger"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * Represents a MapCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * Guarantees: at least one criteria exists for mapping."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "articstranger"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "articstranger"
        },
        "content": "public class MapObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    //empty pairs for nil criterion"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private final Pair\u003cInteger, Integer\u003e nullAgePair \u003d new Pair\u003c\u003e(0, 0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private final Pair\u003cInteger, String\u003e nullRacePair \u003d new Pair\u003c\u003e(0, \"\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private final Pair\u003cInteger, String\u003e nullMedicalPair \u003d new Pair\u003c\u003e(0, \"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private final String nullComparator \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    //pair field for points ranking and criteria"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private Pair\u003cInteger, Integer\u003e agePair \u003d new Pair\u003c\u003e(0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private Pair\u003cInteger, String\u003e racePair \u003d new Pair\u003c\u003e(0, \"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private Pair\u003cInteger, String\u003e medicalPair \u003d new Pair\u003c\u003e(0, \"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private String comparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * at least one field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public MapObject(Pair\u003cInteger, Integer\u003e agePair, String comparator,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                     Pair\u003cInteger, String\u003e racePair, Pair\u003cInteger, String\u003e medicalPair) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        this.agePair \u003d (agePair.getKey() !\u003d 0) ? agePair : nullAgePair;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        this.comparator \u003d (agePair.getKey() !\u003d 0) ? comparator : nullComparator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        this.racePair \u003d (racePair.getKey() !\u003d 0) ? racePair : nullRacePair;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        this.medicalPair \u003d (medicalPair.getKey() !\u003d 0) ? medicalPair : nullMedicalPair;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public String getComparator() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return comparator;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public Pair\u003cInteger, Integer\u003e getAgePair() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return agePair;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public Pair\u003cInteger, String\u003e getRacePair() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return racePair;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public Pair\u003cInteger, String\u003e getMedicalPair() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return medicalPair;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "articstranger"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "articstranger": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    Predicate\u003cProject\u003e PREDICATE_SHOW_ALL_PROJECTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    Predicate\u003cBeneficiary\u003e PREDICATE_SHOW_ALL_BENEFICIARIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    Predicate\u003cVolunteer\u003e PREDICATE_SHOW_ALL_VOLUNTEERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    boolean hasProject(Project project);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if a beneficiary with the same identity as {@code beneficiary} exists in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    boolean hasBeneficiary(Beneficiary beneficiary);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Updates the Project status"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @param editedProject"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @throws DuplicateProjectException"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @throws ProjectNotFoundException"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    void setProject(Project target, Project editedProject)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        throws DuplicateProjectException, ProjectNotFoundException;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Deletes the given project."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    void deleteProject(Project target);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Deletes the given beneficiary."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The beneficiary must exist in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void deleteBeneficiary(Beneficiary target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Adds the given project."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code project} must not already exist in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void addProject(Project project);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Sorts the given project according to date"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * {@code project} must not already exist in the address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    void sortProjectByDate();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Replaces the given Beneficiary{@code target} with {@code editedBeneficiary}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The Beneficiary identity of {@code editedBeneficiary} must not be the same"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * as another existing Beneficiary in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void setBeneficiary(Beneficiary target, Beneficiary editedBeneficiary);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns an unmodifiable view of the filtered beneficiary list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    ObservableList\u003cBeneficiary\u003e getFilteredBeneficiaryList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns an unmodifiable view of the filtered volunteer list"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    ObservableList\u003cVolunteer\u003e getFilteredVolunteerList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns an unmodifiable view of the filtered project list"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Updates the filter of the filtered Beneficiary list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    void updateFilteredProjectList(Predicate\u003cProject\u003e predicate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void updateFilteredBeneficiaryList(Predicate\u003cBeneficiary\u003e predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Selected project in the filtered project list."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * null if no project is selected."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    ReadOnlyProperty\u003cProject\u003e selectedProjectProperty();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Selected beneficiary in the filtered beneficiary list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * null if no beneficiary is selected."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    ReadOnlyProperty\u003cBeneficiary\u003e selectedBeneficiaryProperty();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns the selected beneficiary in the filtered beneficiary list."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * null if no beneficairy is selected."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    Beneficiary getSelectedBeneficiary();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void setSelectedBeneficiary(Beneficiary beneficiary);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    Project getSelectedProject();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    void setSelectedProject(Project project);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    //Volunteers"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    boolean hasVolunteer(Volunteer volunteer);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    void addVolunteer(Volunteer volunteer);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Deletes the given volunteer."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The volunteer must exist in the address book."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void deleteVolunteer(Volunteer target);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Replaces the given volunteer {@code target} with {@code editedVolunteer}."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * The volunteer identity of {@code editedVolunteer} must not be the same as"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * another existing volunteer in the address book."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void setVolunteer(Volunteer target, Volunteer editedVolunteer);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Selected volunteer in the filtered volunteer list."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * null if no volunteer is selected."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    ReadOnlyProperty\u003cVolunteer\u003e selectedVolunteerProperty();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns the selected volunteer in the filtered volunteer list."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * null if no volunteer is selected."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * gets the selected volunteer in the filtered volunteer list."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    Volunteer getSelectedVolunteer();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Sets the selected volunteer in the filtered volunteer list."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void setSelectedVolunteer(Volunteer volunteer);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Updates the filter of the filtered volunteer list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void updateFilteredVolunteerList(Predicate\u003cVolunteer\u003e predicate);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * compares the age of the current {@code Volunteer} and the criteria in {@code MapObject}."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public int checkAge(MapObject map, Volunteer currentVol);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * compares the race of the current {@code Volunteer} and the criteria in {@code MapObject}."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public int checkRace(MapObject map, Volunteer currentVol);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * compares the medical condition of the current {@code Volunteer} and the criteria in {@code MapObject}."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public int checkMedical(MapObject map, Volunteer currentVol);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Maps all volunteers in the (@code UniqueVolunteerList)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public void mapAllVolunteer(MapObject map);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Sorts all volunteers in the (@code UniqueVolunteerList)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * and returns a (@code sortedList)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public void sortVolunteers();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Goes throught the volunteer list and adds data to the based on what prefixes are wanted."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * stops when the list ends or the provided limit is reached."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public List\u003cString[]\u003e addData(int numVolunteers, ArrayList\u003cString\u003e prefixToBePrinted);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Add Beneficiary."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void addBeneficiary(Beneficiary beneficiary);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 11,
      "quinnzzzzz": 43,
      "articstranger": 36,
      "-": 130,
      "ndhuu": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.exceptions.BeneficiaryNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final FilteredList\u003cProject\u003e filteredProjects;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final SimpleObjectProperty\u003cProject\u003e selectedProject \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final FilteredList\u003cVolunteer\u003e filteredVolunteers;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final SimpleObjectProperty\u003cVolunteer\u003e selectedVolunteer \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final FilteredList\u003cBeneficiary\u003e filteredBeneficiaries;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final SimpleObjectProperty\u003cBeneficiary\u003e selectedBeneficiary \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private SortedList\u003cVolunteer\u003e sortedVolunteers;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        filteredProjects \u003d new FilteredList\u003c\u003e(versionedAddressBook.getProjectList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        filteredBeneficiaries \u003d new FilteredList\u003c\u003e(versionedAddressBook.getBeneficiaryList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        filteredBeneficiaries.addListener(this::ensureSelectedBeneficiaryIsValid);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        filteredVolunteers \u003d new FilteredList\u003c\u003e(versionedAddressBook.getVolunteerList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        filteredVolunteers.addListener(this::ensureSelectedVolunteerIsValid);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean hasBeneficiary(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(beneficiary);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return versionedAddressBook.hasBeneficiary(beneficiary);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return versionedAddressBook.hasProject(project);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        versionedAddressBook.removeProject(target);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void deleteBeneficiary(Beneficiary target) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        versionedAddressBook.removeBeneficiary(target);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public void addVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        versionedAddressBook.addVolunteer(volunteer);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void addBeneficiary(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        versionedAddressBook.addBeneficiary(beneficiary);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        updateFilteredBeneficiaryList(PREDICATE_SHOW_ALL_BENEFICIARIES);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void addProject(Project project) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        versionedAddressBook.addProject(project);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void sortProjectByDate() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        versionedAddressBook.sortProjectByDate();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiary(Beneficiary target, Beneficiary editedBeneficiary) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireAllNonNull(target, editedBeneficiary);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        versionedAddressBook.setBeneficiary(target, editedBeneficiary);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean hasVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(volunteer);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return versionedAddressBook.hasVolunteer(volunteer);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void setProject(Project targetProject, Project editedProject) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(editedProject);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        versionedAddressBook.setProject(targetProject, editedProject);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void deleteVolunteer(Volunteer target) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        versionedAddressBook.removeVolunteer(target);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setVolunteer(Volunteer target, Volunteer editedVolunteer) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireAllNonNull(target, editedVolunteer);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        versionedAddressBook.setVolunteer(target, editedVolunteer);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Volunteer List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Volunteer} backed by the internal list of"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ObservableList\u003cVolunteer\u003e getFilteredVolunteerList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return filteredVolunteers;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void updateFilteredVolunteerList(Predicate\u003cVolunteer\u003e predicate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        filteredVolunteers.setPredicate(predicate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ObservableList\u003cBeneficiary\u003e getFilteredBeneficiaryList() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return filteredBeneficiaries;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return filteredProjects;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        filteredProjects.setPredicate(predicate);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void updateFilteredBeneficiaryList(Predicate\u003cBeneficiary\u003e predicate) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        filteredBeneficiaries.setPredicate(predicate);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected volunteer \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ReadOnlyProperty\u003cVolunteer\u003e selectedVolunteerProperty() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return selectedVolunteer;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Volunteer getSelectedVolunteer() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return selectedVolunteer.getValue();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setSelectedVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (volunteer !\u003d null \u0026\u0026 !filteredVolunteers.contains(volunteer)) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            selectedVolunteer.setValue(volunteer);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    //@@author articstranger"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * compares the age of the current {@code Volunteer} and the criteria in {@code MapObject}."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public int checkAge(MapObject map, Volunteer currentVol) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        switch (map.getComparator()) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        case \"\u003c\":"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            if (Integer.parseInt(currentVol.getAge().toString()) \u003c map.getAgePair().getValue()) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                return map.getAgePair().getKey();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        case \"\u003e\":"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            if (Integer.parseInt(currentVol.getAge().toString()) \u003e map.getAgePair().getValue()) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                return map.getAgePair().getKey();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        case \"\u003d\":"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            if (Integer.parseInt(currentVol.getAge().toString()) \u003d\u003d map.getAgePair().getValue()) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                return map.getAgePair().getKey();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * compares the race of the current {@code Volunteer} and the criteria in {@code MapObject}."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public int checkRace(MapObject map, Volunteer currentVol) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        if (currentVol.getRace().toString().equalsIgnoreCase(map.getRacePair().getValue())) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            return map.getRacePair().getKey();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * compares the medical condition of the current {@code Volunteer} and the criteria in {@code MapObject}."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public int checkMedical(MapObject map, Volunteer currentVol) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        if (currentVol.getMedicalCondition().toString().equalsIgnoreCase(map.getMedicalPair().getValue())) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            return map.getMedicalPair().getKey();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Maps all volunteers in the (@code UniqueVolunteerList)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public void mapAllVolunteer(MapObject map) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        versionedAddressBook.getVolunteerList().forEach(volunteer -\u003e {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            volunteer.resetPoints();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            volunteer.addPoints(checkAge(map, volunteer));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            volunteer.addPoints(checkRace(map, volunteer));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            volunteer.addPoints(checkMedical(map, volunteer));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        });"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Sorts all volunteers in the (@code UniqueVolunteerList)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * and returns a (@code sortedList)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public void sortVolunteers() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        sortedVolunteers \u003d versionedAddressBook.getVolunteerList().sorted((new Comparator\u003cVolunteer\u003e() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            public int compare(Volunteer s1, Volunteer s2) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                return s2.getPoints() - s1.getPoints();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        versionedAddressBook.sortVolunteers();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Goes throught the volunteer list and adds data to the based on what prefixes are wanted."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * stops when the list ends or the provided limit is reached."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public List\u003cString[]\u003e addData(int numVolunteers, ArrayList\u003cString\u003e prefixToBePrinted) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        List\u003cString[]\u003e finalData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        finalData.add(new String[]{\"Volunteers\" });"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        ArrayList\u003cString\u003e tempVolunteer \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        for (Volunteer vol : versionedAddressBook.getVolunteerList()) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            if (i \u003e\u003d numVolunteers) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            prefixToBePrinted.forEach(prefix -\u003e {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                case \"n/\":"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    tempVolunteer.add(vol.getName().toString());"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                case \"y/\":"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    tempVolunteer.add(vol.getAge().toString());"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                case \"g/\":"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    tempVolunteer.add(vol.getGender().toString());"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                case \"r/\":"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    tempVolunteer.add(vol.getRace().toString());"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                case \"rg/\":"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    tempVolunteer.add(vol.getReligion().toString());"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                case \"p/\":"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    tempVolunteer.add(vol.getPhone().toString());"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                case \"a/\":"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    tempVolunteer.add(vol.getAddress().toString());"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                case \"e/\":"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    tempVolunteer.add(vol.getEmail().toString());"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                case \"m/\":"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    tempVolunteer.add(vol.getMedicalCondition().toString());"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                case \"dp/\":"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    tempVolunteer.add(vol.getDietaryPreference().toString());"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                case \"ec/\":"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    tempVolunteer.add(vol.getEmergencyContact().toString());"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                case \"t/\":"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    tempVolunteer.add(vol.getTags().toString());"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            });"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            finalData.add(tempVolunteer.toArray(new String[0]));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            tempVolunteer.clear();"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return finalData;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    //@@author swalahlah"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Ensures {@code selectedVolunteer} is a valid volunteer in {@code filteredVolunteers}."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private void ensureSelectedVolunteerIsValid(ListChangeListener.Change\u003c? extends Volunteer\u003e change) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (selectedVolunteer.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // null is always a valid selected volunteer, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            boolean wasSelectedVolunteerReplaced \u003d"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedVolunteer.getValue());"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (wasSelectedVolunteerReplaced) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // Update selectedVolunteer to its new value."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedVolunteer.getValue());"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                selectedVolunteer.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            boolean wasSelectedVolunteerRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                .anyMatch(removedVolunteer -\u003e selectedVolunteer.getValue().isSameVolunteer(removedVolunteer));"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (wasSelectedVolunteerRemoved) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // Select the volunteer that came before it in the list,"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // or clear the selection if there is no such volunteer."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                selectedVolunteer.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public ReadOnlyProperty\u003cProject\u003e selectedProjectProperty() {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return selectedProject;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public ReadOnlyProperty\u003cBeneficiary\u003e selectedBeneficiaryProperty() {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return selectedBeneficiary;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Project getSelectedProject() {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return selectedProject.getValue();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public void setSelectedProject(Project project) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (project !\u003d null \u0026\u0026 !filteredProjects.contains(project)) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        selectedProject.setValue(project);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Beneficiary getSelectedBeneficiary() {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return selectedBeneficiary.getValue();"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public void setSelectedBeneficiary(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (beneficiary !\u003d null \u0026\u0026 !filteredBeneficiaries.contains(beneficiary)) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new BeneficiaryNotFoundException();"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        selectedBeneficiary.setValue(beneficiary);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private void ensureSelectedBeneficiaryIsValid(ListChangeListener.Change\u003c? extends Beneficiary\u003e change) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (selectedBeneficiary.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            boolean wasSelectedBeneficiaryReplaced \u003d change.wasReplaced()"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 change.getRemoved().contains(selectedBeneficiary.getValue());"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (wasSelectedBeneficiaryReplaced) {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedBeneficiary.getValue());"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                selectedBeneficiary.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            boolean wasSelectedBeneficiaryRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                .anyMatch(removedBeneficiary -\u003e selectedBeneficiary.getValue()"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                    .isSameBeneficiary(removedBeneficiary));"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (wasSelectedBeneficiaryRemoved) {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                selectedBeneficiary.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private void ensureSelectedProjectIsValid(ListChangeListener.Change\u003c? extends Project\u003e change) {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (selectedProject.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            boolean wasSelectedProjectReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                .getRemovedSize()"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                \u0026\u0026 change.getRemoved().contains(selectedProject.getValue());"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (wasSelectedProjectReplaced) {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // Update selectedProject to its new value."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedProject.getValue());"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                selectedProject.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            boolean wasSelectedProjectRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                .anyMatch(removedProject -\u003e selectedProject.getValue().isSameProject(removedProject));"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (wasSelectedProjectRemoved) {"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                selectedProject.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 filteredProjects.equals(other.filteredProjects)"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 filteredBeneficiaries.equals(other.filteredBeneficiaries)"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get())"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 Objects.equals(selectedBeneficiary.get(), other.selectedBeneficiary.get());"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        // \u0026\u0026 Objects.equals(selectedProject.get(), other,selectedProject.get());"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 209,
      "quinnzzzzz": 35,
      "articstranger": 165,
      "-": 158,
      "ndhuu": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    ObservableList\u003cBeneficiary\u003e getBeneficiaryList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    ObservableList\u003cProject\u003e getProjectList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    ObservableList\u003cVolunteer\u003e getVolunteerList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 6,
      "-": 18,
      "ndhuu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"VolunCHeer.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "ndhuu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/beneficiary/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Represents a Beneficiary\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/beneficiary/Beneficiary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Represents a Beneficiary in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class Beneficiary {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Set\u003cProjectTitle\u003e attachedProjectList \u003d new HashSet\u003cProjectTitle\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Beneficiary(Name name, Phone phone, Email email, Address address) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireAllNonNull(name, phone, email, address);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Beneficiary(Beneficiary b) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.name \u003d b.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.phone \u003d b.getPhone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.email \u003d b.getEmail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.address \u003d b.getAddress();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.attachedProjectList \u003d b.getHashAttachedProjectLists();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if both Beneficiarys of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * This defines a weaker notion of equality between two Beneficiarys."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean isSameBeneficiary(Beneficiary otherBeneficiary) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (otherBeneficiary \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return otherBeneficiary !\u003d null"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 (otherBeneficiary.getName().equals(getName())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (otherBeneficiary.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 otherBeneficiary.getEmail().equals(getEmail())));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if both Beneficiaries have the same identity and data fields."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * This defines a stronger notion of equality between two Beneficiarys."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!(other instanceof Beneficiary)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary otherBeneficiary \u003d (Beneficiary) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return otherBeneficiary.getName().equals(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (otherBeneficiary.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 otherBeneficiary.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return Objects.hash(name, phone, email, address, attachedProjectList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(getPhone())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(getEmail())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(\" Address: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(getAddress())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(\"Attached Project List: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(getAttachedProjectLists());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Add a project title to the attached Project Líst."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void addAttachedProject(ProjectTitle title) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.attachedProjectList.add(title);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * update a project title in the attached Project Líst."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void updateAttachedProject(ProjectTitle oldTitle, ProjectTitle newTitle) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (this.attachedProjectList.contains(oldTitle)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.attachedProjectList.remove(oldTitle);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        addAttachedProject(newTitle);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * delete a project title in the attached Project Líst."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void deleteAttachedProject(ProjectTitle title) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (this.attachedProjectList.contains(title)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.attachedProjectList.remove(title);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Check attached project List before deletion."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Return true if attached project list is empty."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean hasAttachedProjects() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return !this.attachedProjectList.isEmpty();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Check if the project is assigned for this beneficiary."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean hasProjectTitle(ProjectTitle projectTitle) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return this.attachedProjectList.contains(projectTitle);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Get method for attached project list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return a set of project titles."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Set\u003cProjectTitle\u003e getAttachedProjectLists() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return Collections.unmodifiableSet(this.attachedProjectList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Add all the project attached to this beneficiary."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setProjectLists(Set\u003cProjectTitle\u003e projectList) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.attachedProjectList.addAll(projectList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Get method for attached project list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return a set of project titles."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public HashSet\u003cProjectTitle\u003e getHashAttachedProjectLists() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new HashSet\u003c\u003e(this.attachedProjectList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ndhuu": 191
    }
  },
  {
    "path": "src/main/java/seedu/address/model/beneficiary/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Represents a Beneficiary\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/beneficiary/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Represents a Beneficiary\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public String getFullName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/beneficiary/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Tests that a {@code Beneficiary}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cBeneficiary\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean test(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(beneficiary.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/beneficiary/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Represents a Beneficiary\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/beneficiary/UniqueBeneficiaryList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.exceptions.BeneficiaryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.exceptions.DuplicateBeneficiaryException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * A list of beneficiaries that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * A Beneficiary is considered unique by comparing using {@code Beneficiary#isSameBeneficiary(Beneficiary)}. As such,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * adding and updating of Beneficiaries uses Beneficiary#isSameBeneficiary(Beneficiary) for equality so as to ensure"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * that the Beneficiary being added or updated is unique in terms of identity in the UniqueBeneficiaryList. However,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * the removal of a Beneficiary uses Beneficiary#equals(Object) so as to ensure that the Beneficiary with exactly"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * @see Beneficiary#isSameBeneficiary(Beneficiary)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class UniqueBeneficiaryList implements Iterable\u003cBeneficiary\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final ObservableList\u003cBeneficiary\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final ObservableList\u003cBeneficiary\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if the list contains an equivalent Beneficiary as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean contains(Beneficiary toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBeneficiary);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Adds a Beneficiary to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The Beneficiary must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void add(Beneficiary toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new DuplicateBeneficiaryException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Replaces the Beneficiary {@code target} in the list with {@code editedBeneficiary}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The Beneficiary identity of {@code editedBeneficiary} must not be the same as another existing"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Beneficiary in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiary(Beneficiary target, Beneficiary editedBeneficiary) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireAllNonNull(target, editedBeneficiary);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new BeneficiaryNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!target.isSameBeneficiary(editedBeneficiary) \u0026\u0026 contains(editedBeneficiary)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new DuplicateBeneficiaryException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        internalList.set(index, editedBeneficiary);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public Beneficiary getBeneficiaryIndex(Index targetIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return internalList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Removes the equivalent Beneficiary from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The Beneficiary must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void remove(Beneficiary toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new BeneficiaryNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiaries(UniqueBeneficiaryList replacement) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Replaces the contents of this list with {@code beneficiaries}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code beneficiaries} must not contain duplicate beneficiaries."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiaries(List\u003cBeneficiary\u003e beneficiaries) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireAllNonNull(beneficiaries);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!beneficiariesAreUnique(beneficiaries)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new DuplicateBeneficiaryException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        internalList.setAll(beneficiaries);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if {@code beneficiaries} contains only unique beneficiaries."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private boolean beneficiariesAreUnique(List\u003cBeneficiary\u003e beneficiaries) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        for (int i \u003d 0; i \u003c beneficiaries.size() - 1; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            for (int j \u003d i + 1; j \u003c beneficiaries.size(); j++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                if (beneficiaries.get(i).isSameBeneficiary(beneficiaries.get(j))) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ObservableList\u003cBeneficiary\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Iterator\u003cBeneficiary\u003e iterator() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof UniqueBeneficiaryList // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueBeneficiaryList) other).internalList));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 5,
      "ndhuu": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/beneficiary/exceptions/BeneficiaryNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class BeneficiaryNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/beneficiary/exceptions/DuplicateBeneficiaryException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class DuplicateBeneficiaryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public DuplicateBeneficiaryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        super(\"Operation would result in duplicate beneficiary\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Age.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Age class for volunteer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        \"Age should be comprised of only positive numbers\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public final String ageOutput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Constructs a {@code Age}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @param age A valid age."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Age(String age) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ageOutput \u003d age;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return ageOutput;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || (other instanceof seedu.address.model.person.Age // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 ageOutput.equals(((seedu.address.model.person.Age) other).ageOutput)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return ageOutput.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 50,
      "ndhuu": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DietaryPreference.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Dietary preference of volunteer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class DietaryPreference {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    //field"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        \"Dietary Preference should not contain numbers\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public final String restriction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs a {@code DietaryPreference}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public DietaryPreference(String dietaryPreference) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(dietaryPreference);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        checkArgument(isValidDietary_preference(dietaryPreference), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        restriction \u003d dietaryPreference;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static boolean isValidDietary_preference(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return restriction;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof DietaryPreference // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 restriction.equals(((DietaryPreference) other).restriction)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return restriction.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 35,
      "ndhuu": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/EmergencyContact.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Emergency Contact"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class EmergencyContact {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    //field"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param emergencyContact A valid phone number."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public EmergencyContact(String emergencyContact) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(emergencyContact);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        checkArgument(isValidEmergency_contact(emergencyContact), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        value \u003d emergencyContact;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static boolean isValidEmergency_contact(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof EmergencyContact // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 value.equals(((EmergencyContact) other).value)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/MedicalCondition.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Medical Condition of volunteer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class MedicalCondition {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    //field"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        \"Medical Conditions should not contain numbers\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public final String status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs a {@code MedicalCondition}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public MedicalCondition(String medicalCondition) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(medicalCondition);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        checkArgument(isValidMedicalCondition(medicalCondition), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        status \u003d medicalCondition;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static boolean isValidMedicalCondition(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof MedicalCondition // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 status.equals(((MedicalCondition) other).status)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return status.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 34,
      "ndhuu": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Race.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * race"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class Race {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    //field"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        \"Age should be comprised of only positive numbers\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    //public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\"; **Edit again**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public final String raceOutput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs a race."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @param race A valid age."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Race(String race) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(race);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        //checkArgument(isValidRace(race), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        raceOutput \u003d race;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /*public static boolean isValidRace(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return test.matches(VALIDATION_REGEX);*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 30,
      "ndhuu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 136,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "ndhuu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Complete.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Represent Project\u0027s completion attribute i.e. whether the Project has Completed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class Complete {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Complete should be \u0027true\u0027 or \u0027false\u0027 only\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public Complete(boolean isComplete) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.value \u003d Boolean.toString(isComplete);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public Complete(String isComplete) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(isComplete);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        checkArgument(isValidBoolean(isComplete), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.value \u003d isComplete;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns true if a given string is a valid boolean string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static Boolean isValidBoolean(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return test.equals(\"true\") || test.equals(\"false\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean isComplete() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return this.value.equals(\"true\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            || obj instanceof Complete"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u0026\u0026 value.equals(((Complete) obj).value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 52,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Project.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.beneficiary.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Represents a Project in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class Project {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final ProjectTitle projectTitle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final ProjectDate projectDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Complete complete;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Name beneficiaryAssigned;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private List\u003cVolunteer\u003e volunteerList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * When complete, beneficiaryAssigned and volunteerAttached info are not initialised."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public Project(ProjectTitle projectTitle, ProjectDate projectDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireAllNonNull(projectTitle, projectDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectTitle \u003d projectTitle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectDate \u003d projectDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        //internal tags"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.complete \u003d new Complete(false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.beneficiaryAssigned \u003d new Name(\"nil\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.volunteerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * When beneficiaryAssigned and volunteerAttached info are not initialised."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public Project(ProjectTitle projectTitle, ProjectDate projectDate, Complete complete) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireAllNonNull(projectTitle, projectDate, complete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectTitle \u003d projectTitle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectDate \u003d projectDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        //internal tags"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.complete \u003d complete;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.beneficiaryAssigned \u003d new Name(\"nil\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.volunteerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * When volunteerAttached info is not initialised."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public Project(ProjectTitle projectTitle, ProjectDate projectDate, Complete complete, Name beneficiaryAssigned) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireAllNonNull(projectTitle, projectDate, beneficiaryAssigned);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectTitle \u003d projectTitle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectDate \u003d projectDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        //internal tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.complete \u003d complete;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.beneficiaryAssigned \u003d beneficiaryAssigned;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.volunteerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * When beneficiaryAssigned info is not initialised."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public Project(ProjectTitle projectTitle, ProjectDate projectDate, List\u003cVolunteer\u003e volunteerList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireAllNonNull(projectTitle, projectDate, volunteerList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectTitle \u003d projectTitle;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectDate \u003d projectDate;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        //internal tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.complete \u003d new Complete(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.beneficiaryAssigned \u003d new Name(\"nil\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.volunteerList \u003d volunteerList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Every field must be present and not null when all attributes can be passed in"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public Project(ProjectTitle projectTitle, ProjectDate projectDate, Complete complete, Name beneficiaryAssigned,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    List\u003cVolunteer\u003e volunteerList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireAllNonNull(projectTitle, projectDate, complete, beneficiaryAssigned, volunteerList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectTitle \u003d projectTitle;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectDate \u003d projectDate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        //internal tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.complete \u003d complete;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.beneficiaryAssigned \u003d beneficiaryAssigned;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.volunteerList \u003d volunteerList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ProjectTitle getProjectTitle() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return projectTitle;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ProjectDate getProjectDate() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return projectDate;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Complete getComplete() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return complete;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public Name getBeneficiaryAssigned() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return beneficiaryAssigned;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public Integer getVolunteerCount() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return volunteerList.size();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public List\u003cVolunteer\u003e getVolunteerList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return volunteerList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns true if Project has completed, else returns false."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean isComplete() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return complete.isComplete();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void setBeneficiary(Name beneficiary) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.beneficiaryAssigned \u003d beneficiary;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void setVolunteerList(List\u003cVolunteer\u003e volunteerList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.volunteerList.addAll(volunteerList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Check if there is {@code volunteer} attached to the project"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @return true if {@code volunteerList is not empty}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public String isVolunteerAttached() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!(volunteerList.size() \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return \"true\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return \"false\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        builder.append(getProjectTitle())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            .append(\" Project Date: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            .append(getProjectDate())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            .append(\" Beneficiary: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            .append(getBeneficiaryAssigned())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            .append(\"\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns true if both Projects of the same projectTitle have at least one other identity field that is the same."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * This defines a weaker notion of equality between two Projects."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean isSameProject(Project otherProject) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (otherProject \u003d\u003d this) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return otherProject !\u003d null"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u0026\u0026 otherProject.getProjectTitle().equals(getProjectTitle())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            || (otherProject.getProjectDate().equals(getProjectDate()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns true if both Projects have the same identity and data fields."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * This defines a stronger notion of equality between two Projects."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!(other instanceof Project)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Project otherProject \u003d (Project) other;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return otherProject.getProjectTitle().equals(getProjectTitle())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            || otherProject.getProjectDate().equals(getProjectDate());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return Objects.hash(projectTitle, projectDate, complete, beneficiaryAssigned);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 176,
      "-": 1,
      "ndhuu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/ProjectDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * This is the Date for the project"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * format is DD/MM/YYYY"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class ProjectDate {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        \"Dates should only contain numbers in DD/MM/YYYY format and should be greater than the current date, \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                + \"and it should not be blank.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]{2}/[0-9]{2}/[0-9]{4}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private static final int DAY_INDEX \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private static final int MONTH_INDEX \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private static final int YEAR_INDEX \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private static String[] dateFormats;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public final String fullDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Constructs a {@code ProjectDate}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @param projectDate A valid date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ProjectDate(String projectDate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(projectDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        checkArgument(isValidDate(projectDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/YYYY\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.fullDate \u003d stringToDate(projectDate).format(formatter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        setDateFormats(projectDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (isEmptyDate(test) || !test.matches(VALIDATION_REGEX) || !hasDateMonthYear(test)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            LocalDate inputDate \u003d stringToDate(test);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            LocalDate current \u003d LocalDate.now();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            LocalDate nextDay \u003d current.plus(1, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return inputDate.isAfter(nextDay);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        } catch (DateTimeException dte) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns true if the given string is empty"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static boolean isEmptyDate(String str) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return str.trim().isEmpty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns true if the given string has Day, Month and Year"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static boolean hasDateMonthYear(String date) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        String[] dateFormats \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return dateFormats.length \u003d\u003d 3;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void setDateFormats(String date) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.dateFormats \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.day \u003d Integer.parseInt(dateFormats[DAY_INDEX]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.month \u003d Integer.parseInt(dateFormats[MONTH_INDEX]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.year \u003d Integer.parseInt(dateFormats[YEAR_INDEX]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns {@code LocalDate} from given {@code String} date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private static LocalDate stringToDate(String projectDate) throws DateTimeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        String[] dateFormats \u003d projectDate.split(\"/\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        int testDay \u003d Integer.parseInt(dateFormats[DAY_INDEX]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        int testMonth \u003d Integer.parseInt(dateFormats[MONTH_INDEX]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        int testYear \u003d Integer.parseInt(dateFormats[YEAR_INDEX]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return LocalDate.of(testYear, testMonth, testDay);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return this.day;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return this.month;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return this.year;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        builder.append(this.day)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                .append(\"/\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                .append(this.month)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                .append(\"/\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                .append(this.year);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return \"Date: \" + builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/ProjectTitle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Represents a Project\u0027s title in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class ProjectTitle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_PROJECT_TITLE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        \"Titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public final String fullTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Constructs a {@code ProjectTitle}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @param projectTitle A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ProjectTitle(String projectTitle) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(projectTitle);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        checkArgument(isValidName(projectTitle), MESSAGE_PROJECT_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.fullTitle \u003d projectTitle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return fullTitle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return fullTitle.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof ProjectTitle// instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 fullTitle.equals(((ProjectTitle) other).fullTitle)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 44,
      "ndhuu": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/UniqueProjectList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * A list of projects that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * A project is considered unique by comparing using {@code Project#isSameProject(Project)}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * projects uses Project#isSameProject(Project) for equality so as to ensure that the project being added or updated is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * unique in terms of identity in the UniqueProjectList. However, the removal of a project uses Project#equals(Object)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * so as to ensure that the project with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * @see Project#isSameProject(Project)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class UniqueProjectList implements Iterable\u003cProject\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Map\u003cProjectTitle, Project\u003e projectTitleProjectHashtable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns true if the list contains an equivalent project as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean contains(Project toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProject);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Adds a project to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * The project must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void addProject(Project toAddProject) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(toAddProject);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (contains(toAddProject)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        internalList.add(toAddProject);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        projectTitleProjectHashtable.put(toAddProject.getProjectTitle(), toAddProject);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Replaces the project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * The project identity of {@code editedProject} must not be the same as another existing project in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!target.isSameProject(editedProject) \u0026\u0026 contains(editedProject)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        internalList.set(index, editedProject);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        projectTitleProjectHashtable.remove(target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        projectTitleProjectHashtable.put(editedProject.getProjectTitle(), editedProject);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Removes the equivalent project from the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * The project must exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void remove(Project toRemove) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        boolean success \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!success) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            projectTitleProjectHashtable.remove(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void setProjects(UniqueProjectList replacement) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        projectTitleProjectHashtable.clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        for (Map.Entry\u003cProjectTitle, Project\u003e entry"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            : replacement.projectTitleProjectHashtable.entrySet()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            projectTitleProjectHashtable.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Replaces the contents of this list with {@code projects}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * {@code projects} must not contain duplicate projects."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void setProjects(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        requireAllNonNull(projects);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        boolean success \u003d projectsAreUnique(projects);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!success) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        internalList.setAll(projects);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        projectTitleProjectHashtable.clear();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        for (Project entry : projects) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            projectTitleProjectHashtable.put(entry.getProjectTitle(), entry);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ObservableList\u003cProject\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Compares the day, month, year factor of ProjectDate for sortByDate command"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public void sortProjectByDate() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        FXCollections.sort(internalList, (new Comparator\u003cProject\u003e() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            public int compare(Project p1, Project p2) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                if (p1.getProjectDate().getYear() \u003d\u003d p2.getProjectDate().getYear()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    if (p1.getProjectDate().getMonth() \u003d\u003d p2.getProjectDate().getMonth()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                        return p1.getProjectDate().getDay() - p2.getProjectDate().getDay();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                        return p1.getProjectDate().getMonth() - p2.getProjectDate().getMonth();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    return p1.getProjectDate().getYear() - p2.getProjectDate().getYear();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            } }));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public Iterator\u003cProject\u003e iterator() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            || (other instanceof UniqueProjectList // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueProjectList) other).internalList));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Returns true if {@code projects} contains only unique projects."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private boolean projectsAreUnique(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        for (int i \u003d 0; i \u003c projects.size() - 1; i++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            for (int j \u003d i + 1; j \u003c projects.size(); j++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                if (projects.get(i).isSameProject(projects.get(j))) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 2,
      "quinnzzzzz": 149,
      "articstranger": 2,
      "ndhuu": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/exceptions/DuplicateProjectException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Signals that the operation will result in duplicate Projects"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * (Projects are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class DuplicateProjectException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public DuplicateProjectException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        super(\"Operation would result in duplicate projects\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/exceptions/ProjectNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Signals that the operation is unable to find the specified project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class ProjectNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 5,
      "ndhuu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/VolunteerSampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Age;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.DietaryPreference;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.EmergencyContact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.MedicalCondition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Race;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Religion;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class VolunteerSampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static Volunteer[] getSampleVolunteers() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new Volunteer[]{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            new Volunteer(new Name(\"Alex Yeoh\"), new Age(\"22\"), new Gender(\"m\"), new Race(\"Chinese\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new Religion(\"Christian\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new EmergencyContact(\"Mum 83232123\"), new DietaryPreference(\"NIL\"), new MedicalCondition(\"NIL\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            new Volunteer(new Name(\"Bernice Yu\"), new Age(\"19\"), new Gender(\"f\"), new Race(\"Chinese\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new Religion(\"Atheist\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new EmergencyContact(\"Mum 81111123\"), new DietaryPreference(\"NIL\"), new MedicalCondition(\"Asthma\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            new Volunteer(new Name(\"Charlotte Oliveiro\"), new Age(\"27\"), new Gender(\"f\"), new Race(\"Caucasian\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new Religion(\"Christian\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new EmergencyContact(\"Sister 83222223\"), new DietaryPreference(\"NIL\"), new MedicalCondition(\"NIL\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            new Volunteer(new Name(\"David Li\"), new Age(\"44\"), new Gender(\"m\"), new Race(\"Chinese\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new Religion(\"Free thinker\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new EmergencyContact(\"Wife 93232123\"), new DietaryPreference(\"NIL\"), new MedicalCondition(\"NIL\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            new Volunteer(new Name(\"Irfan Ibrahim\"), new Age(\"33\"), new Gender(\"m\"), new Race(\"Malay\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new Religion(\"Muslim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new EmergencyContact(\"Mum 83244123\"), new DietaryPreference(\"NIL\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new MedicalCondition(\"Dislocated shoulder: Can\u0027t carry heavy loads\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            new Volunteer(new Name(\"Roy Balakrishnan\"), new Age(\"20\"), new Gender(\"m\"), new Race(\"Indian\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new Religion(\"Indian\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                new EmergencyContact(\"Brother 81142123\"), new DietaryPreference(\"NIL\"), new MedicalCondition(\"NIL\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        };"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        for (Volunteer sampleVolunteer : getSampleVolunteers()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            sampleAb.addVolunteer(sampleVolunteer);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 78,
      "ndhuu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Represents a Volunteer\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Age.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Represents a Volunteer\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Guarantees: mutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        \"Age should be comprised of only positive number and at least two digit long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2,}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public final String ageOutput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Constructs a {@code Age}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @param age A valid age."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Age(String age) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        ageOutput \u003d age;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return ageOutput;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || (other instanceof seedu.address.model.volunteer.Age // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 ageOutput.equals(((seedu.address.model.volunteer.Age) other).ageOutput)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return ageOutput.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/DietaryPreference.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Represents a Volunteer\u0027s DietaryPreference in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Guarantees: mutable; is valid as declared in {@link #isValidDietaryPreference(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class DietaryPreference {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dietary Preference should not contain numbers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public final String restriction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Constructs a {@code DietaryPreference}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public DietaryPreference(String dietarypreference) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(dietarypreference);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        checkArgument(isValidDietaryPreference(dietarypreference), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        restriction \u003d dietarypreference;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static boolean isValidDietaryPreference(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return restriction;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || (other instanceof seedu.address.model.volunteer.DietaryPreference"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 restriction.equals(((seedu.address.model.volunteer.DietaryPreference) other).restriction));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return restriction.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 49,
      "articstranger": 1,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Represents a Volunteer\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/EmergencyContact.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "articstranger"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * Represents a Volunteer\u0027s EmergencyContact in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmergencyContact(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "articstranger"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class EmergencyContact {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \" Format must be \u003cName\u003e \u003cRelationship\u003e \u003cContact number\u003e and separated by spaces. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            + \"Name should contain only the first name. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            + \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}  ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @param emergencycontact A valid name, relationship and phone number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public EmergencyContact(String emergencycontact) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(emergencycontact);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        checkArgument(isValidEmergencyContact(emergencycontact), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        value \u003d emergencycontact;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if a given string is a valid emergency contact."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static boolean isValidEmergencyContact(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || (other instanceof seedu.address.model.volunteer.EmergencyContact // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 value.equals(((seedu.address.model.volunteer.EmergencyContact) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 48,
      "articstranger": 4,
      "ndhuu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Represents a Volunteer\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Guarantees: mutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        \"Gender should be only M or F\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * the gender parameter must be m or f"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\w\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public final String genderOutput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Gender constructor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param gender"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        genderOutput \u003d gender;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return genderOutput;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || (other instanceof seedu.address.model.volunteer.Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 genderOutput.equals(((seedu.address.model.volunteer.Gender) other).genderOutput)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return genderOutput.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 56,
      "ndhuu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/MedicalCondition.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Represents a Volunteer\u0027s medical condition in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Guarantees: mutable; is valid as declared in {@link #isValidMedicalCondition(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class MedicalCondition {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        \"Medical Conditions should not contain numbers\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public final String status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Constructs a {@code MedicalCondition}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public MedicalCondition(String medicalcondition) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(medicalcondition);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        checkArgument(isValidMedicalCondition(medicalcondition), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        status \u003d medicalcondition;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static boolean isValidMedicalCondition(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || (other instanceof seedu.address.model.volunteer.MedicalCondition // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 status.equals(((seedu.address.model.volunteer.MedicalCondition) other).status)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return status.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 49,
      "articstranger": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Represents a Volunteer\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Tests that a {@code Volunteer}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cVolunteer\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean test(Volunteer volunteer) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(volunteer.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Represents a Volunteer\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Race.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Represents a Volunteer\u0027s race in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRace(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class Race {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Race should not contain any spaces or numbers\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public final String raceOutput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Constructs a {@code race."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @param race A valid race."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Race(String race) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(race);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        //checkArgument(isValidRace(race), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        raceOutput \u003d race;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if a given string is a valid race."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static boolean isValidRace(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return raceOutput;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || (other instanceof seedu.address.model.volunteer.Race // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 raceOutput.equals(((seedu.address.model.volunteer.Race) other).raceOutput)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return raceOutput.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "swalahlah": 57,
      "articstranger": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Religion.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Represents a Volunteer\u0027s religion in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidReligion(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class Religion {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Religion should not contain any spaces or numbers\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public final String religionOutput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Constructs a {@code religion."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @param religion A valid religion."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Religion(String religion) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(religion);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        //checkArgument(isValidReligion(religion), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        religionOutput \u003d religion;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if a given string is a valid religion."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static boolean isValidReligion(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return religionOutput;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || (other instanceof seedu.address.model.volunteer.Religion // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 religionOutput.equals(((seedu.address.model.volunteer.Religion) other).religionOutput)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return religionOutput.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "swalahlah": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/UniqueVolunteerList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.exceptions.DuplicateVolunteerException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.exceptions.VolunteerNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * A list of volunteers that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * A volunteer is considered unique by comparing using {@code Volunteer#isSameVolunteer(Volunteer)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * As such, adding and updating of volunteers uses Volunteer#isSameVolunteer(Volunteer) for equality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * so as to ensure that the volunteer being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * UniqueVolunteerList. However, the removal of a volunteer uses Volunteer#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * as to ensure that the volunteer with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * @see Volunteer#isSameVolunteer(Volunteer)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class UniqueVolunteerList implements Iterable\u003cVolunteer\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final ObservableList\u003cVolunteer\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final ObservableList\u003cVolunteer\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if the list contains an equivalent volunteer as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean contains(Volunteer toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameVolunteer);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Adds a volunteer to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * The volunteer must not already exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public void add(Volunteer toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new DuplicateVolunteerException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Replaces the volunteer {@code target} in the list with {@code editedVolunteer}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * The volunteer identity of {@code editedVolunteer} must not be the same as another existing volunteer in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public void setVolunteer(Volunteer target, Volunteer editedVolunteer) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireAllNonNull(target, editedVolunteer);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new VolunteerNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!target.isSameVolunteer(editedVolunteer) \u0026\u0026 contains(editedVolunteer)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new DuplicateVolunteerException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        internalList.set(index, editedVolunteer);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    //@@author articstranger"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Sorts the @code internalList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public void sortByPoints() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        FXCollections.sort(internalList, (new Comparator\u003cVolunteer\u003e() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            public int compare (Volunteer s1, Volunteer s2) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "articstranger"
        },
        "content": "                return s2.getPoints() - s1.getPoints();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    //@@author swalahlah"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Removes the equivalent volunteer from the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * The volunteer must exist in the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public void remove(Volunteer toRemove) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new VolunteerNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public void setVolunteers(UniqueVolunteerList replacement) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Replaces the contents of this list with {@code volunteers}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * {@code volunteers} must not contain duplicate volunteers."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public void setVolunteers(List\u003cVolunteer\u003e volunteers) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireAllNonNull(volunteers);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!volunteersAreUnique(volunteers)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new DuplicateVolunteerException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        internalList.setAll(volunteers);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public ObservableList\u003cVolunteer\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Iterator\u003cVolunteer\u003e iterator() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            || (other instanceof seedu.address.model.volunteer.UniqueVolunteerList // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 internalList.equals(((seedu.address.model.volunteer.UniqueVolunteerList) other).internalList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if {@code volunteers} contains only unique volunteers."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private boolean volunteersAreUnique(List\u003cVolunteer\u003e volunteers) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        for (int i \u003d 0; i \u003c volunteers.size() - 1; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            for (int j \u003d i + 1; j \u003c volunteers.size(); j++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                if (volunteers.get(i).isSameVolunteer(volunteers.get(j))) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 136,
      "articstranger": 18,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/Volunteer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.model.volunteer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "articstranger"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * Represents a Volunteer in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "articstranger"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "articstranger"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class Volunteer {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final Race race;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final Religion religion;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final EmergencyContact emergencycontact;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final DietaryPreference dietarypreference;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final MedicalCondition medicalcondition;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private int points;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private HashSet\u003cProjectTitle\u003e attachedProjectList \u003d new HashSet\u003cProjectTitle\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Volunteer(Name name, Age age, Gender gender, Race race, Religion religion, Phone phone, Address address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                     Email email, EmergencyContact emergencycontact, DietaryPreference dietarypreference,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                     MedicalCondition medicalcondition, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.race \u003d race;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.religion \u003d religion;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.emergencycontact \u003d emergencycontact;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.dietarypreference \u003d dietarypreference;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.medicalcondition \u003d medicalcondition;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        this.points \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public Race getRace() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return race;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Religion getReligion() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return religion;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public DietaryPreference getDietaryPreference() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return dietarypreference;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public EmergencyContact getEmergencyContact() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return emergencycontact;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public MedicalCondition getMedicalCondition() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return medicalcondition;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if both volunteers of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * This defines a weaker notion of equality between two volunteers."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean isSameVolunteer(Volunteer otherVolunteer) { //change later"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (otherVolunteer \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return otherVolunteer !\u003d null"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 otherVolunteer.getName().equals(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 (otherVolunteer.getPhone().equals(getPhone()) || otherVolunteer.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Adds points to (@code points) during (@code MapCommand)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public void addPoints(int pointsToAdd) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        points +\u003d pointsToAdd;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Returns (@code points)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public int getPoints() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Resets (@code points)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public void resetPoints() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        points \u003d 0;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns true if both volunteers have the same identity and data fields."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * This defines a stronger notion of equality between two volunteers."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!(other instanceof Volunteer)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Volunteer otherVolunteer \u003d (Volunteer) other;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return otherVolunteer.getName().equals(getName())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 otherVolunteer.getAge().equals(getAge())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 otherVolunteer.getRace().equals(getRace())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 otherVolunteer.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 otherVolunteer.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 otherVolunteer.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 otherVolunteer.getDietaryPreference().equals(getDietaryPreference())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 otherVolunteer.getMedicalCondition().equals(getMedicalCondition())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 otherVolunteer.getEmergencyContact().equals(getEmergencyContact())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 otherVolunteer.getTags().equals(getTags());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public int hashCode() { //To change later***"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return Objects.hash(name, race, age, phone, address, email,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            emergencycontact, dietarypreference, medicalcondition, tags);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(\" Age: \")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(getAge())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(\" Gender: \")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(getGender())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(\" Race: \")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(getRace())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(\" Religion: \")"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(getReligion())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(getPhone())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(getEmail())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(\" Address: \")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(getAddress())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(\"Medical Condition: \")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(getMedicalCondition())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(\"Emergency Contact: \")"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(getEmergencyContact())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(\"Dietary Preference: \")"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(getDietaryPreference())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .append(\" Tags: \");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 141,
      "quinnzzzzz": 2,
      "articstranger": 35,
      "ndhuu": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/exceptions/DuplicateVolunteerException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.volunteer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class DuplicateVolunteerException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public DuplicateVolunteerException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/volunteer/exceptions/VolunteerNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.volunteer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class VolunteerNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "ndhuu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBeneficiary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Jackson-friendly version of {@link Beneficiary}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "class JsonAdaptedBeneficiary {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Beneficiary\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final List\u003cJsonAdaptedProjectTitle\u003e attachedProjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs a {@code JsonAdaptedBeneficiary} with the given beneficiary details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public JsonAdaptedBeneficiary(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                                  @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                                  @JsonProperty(\"attachedProjects\") List\u003cJsonAdaptedProjectTitle\u003e attachedProjects) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (attachedProjects !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.attachedProjects.addAll(attachedProjects);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Converts a given {@code Beneficiary} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public JsonAdaptedBeneficiary(Beneficiary source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        attachedProjects.addAll(source.getAttachedProjectLists().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .map(JsonAdaptedProjectTitle::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Converts this Jackson-friendly adapted beneficiary object into the model\u0027s {@code Beneficiary} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted beneficiary."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Beneficiary toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final List\u003cProjectTitle\u003e projectTitleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        for (JsonAdaptedProjectTitle projectTitle : attachedProjects) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            projectTitleList.add(projectTitle.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiary \u003d new Beneficiary(modelName, modelPhone, modelEmail, modelAddress);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final Set\u003cProjectTitle\u003e modelProjectList \u003d new HashSet\u003c\u003e(projectTitleList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        beneficiary.setProjectLists(modelProjectList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return beneficiary;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedProject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Complete;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.ProjectDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Jackson-friendly version of {@link Project}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "class JsonAdaptedProject {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Project\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final String projectTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final String projectDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final String complete;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final String beneficiaryAssigned;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final List\u003cJsonAdaptedVolunteer\u003e attachedVolunteers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Constructs a {@code JsonAdaptedProject} with the given project details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public JsonAdaptedProject(@JsonProperty(\"project title\") String projectTitle,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                              @JsonProperty(\"project date\") String projectDate,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                              @JsonProperty(\"complete\") String complete,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                              @JsonProperty(\"attached beneficiary\") String beneficiaryAssigned,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                              @JsonProperty(\"attached volunteers\") List\u003cJsonAdaptedVolunteer\u003e attachedVolunteers) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectTitle \u003d projectTitle;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projectDate \u003d projectDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.complete \u003d complete;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.beneficiaryAssigned \u003d beneficiaryAssigned;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (attachedVolunteers !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            this.attachedVolunteers.addAll(attachedVolunteers);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Converts a given {@code Project} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public JsonAdaptedProject(Project source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projectTitle \u003d source.getProjectTitle().fullTitle;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projectDate \u003d source.getProjectDate().fullDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        complete \u003d source.getComplete().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        beneficiaryAssigned \u003d source.getBeneficiaryAssigned().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        attachedVolunteers.addAll(source.getVolunteerList().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                .map(JsonAdaptedVolunteer::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Converts this Jackson-friendly adapted project object into the model\u0027s {@code Project} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted project."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public Project toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        final List\u003cVolunteer\u003e volunteerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        for (JsonAdaptedVolunteer volunteer : attachedVolunteers) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            volunteerList.add(volunteer.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (projectTitle \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                ProjectTitle.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!ProjectTitle.isValidName(projectTitle)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new IllegalValueException(ProjectTitle.MESSAGE_PROJECT_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        final ProjectTitle modelProjectTitle \u003d new ProjectTitle(projectTitle);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (projectDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                ProjectDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!ProjectDate.isValidDate(projectDate)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new IllegalValueException(ProjectDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        final ProjectDate modelProjectDate \u003d new ProjectDate(projectDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (complete \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                Complete.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!Complete.isValidBoolean(complete)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new IllegalValueException(Complete.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        final Complete modelComplete \u003d new Complete(complete);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (beneficiaryAssigned \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        final Name modelBeneficiaryAssigned \u003d new Name(beneficiaryAssigned);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        Project project \u003d new Project(modelProjectTitle, modelProjectDate, modelComplete, modelBeneficiaryAssigned);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        final List\u003cVolunteer\u003e modelVolunteerList \u003d new ArrayList\u003c\u003e(volunteerList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        project.setVolunteerList(modelVolunteerList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return project;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 101,
      "ndhuu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedProjectTitle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Jackson-friendly version of {@link ProjectTitle}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "class JsonAdaptedProjectTitle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final String projectTitle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code projectTitle}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public JsonAdaptedProjectTitle(String projectTitle) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.projectTitle \u003d projectTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public JsonAdaptedProjectTitle(ProjectTitle source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        projectTitle \u003d source.fullTitle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public String getProjectTitle() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return projectTitle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ProjectTitle toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!ProjectTitle.isValidName(projectTitle)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            throw new IllegalValueException(ProjectTitle.MESSAGE_PROJECT_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new ProjectTitle(projectTitle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 1,
      "ndhuu": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedVolunteer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Age;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.DietaryPreference;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.EmergencyContact;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.MedicalCondition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Race;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Religion;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Jackson-friendly version of {@link Volunteer}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "class JsonAdaptedVolunteer {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Volunteer\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final String age;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final String race;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final String religion;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final String emergencycontact;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final String dietarypreference;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final String medicalcondition;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Constructs a {@code JsonAdaptedVolunteer} with the given volunteer details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public JsonAdaptedVolunteer(@JsonProperty(\"name\") String name, @JsonProperty(\"age\") String age,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                                @JsonProperty(\"gender\") String gender, @JsonProperty(\"race\") String race,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                                @JsonProperty(\"religion\") String religion, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                                @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                                @JsonProperty(\"DietaryPreference\") String dietarypreference,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                                @JsonProperty(\"EmergencyContact\") String emergencycontact,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                                @JsonProperty(\"MedicalCondition\") String medicalcondition,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                                @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.race \u003d race;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.religion \u003d religion;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.emergencycontact \u003d emergencycontact;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.dietarypreference \u003d dietarypreference;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.medicalcondition \u003d medicalcondition;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Converts a given {@code Volunteer} into this class for Jackson use."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public JsonAdaptedVolunteer(Volunteer source) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        age \u003d source.getAge().ageOutput;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        gender \u003d source.getGender().genderOutput;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        race \u003d source.getRace().raceOutput;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        religion \u003d source.getReligion().religionOutput;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        emergencycontact \u003d source.getEmergencyContact().value;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        dietarypreference \u003d source.getDietaryPreference().restriction;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        medicalcondition \u003d source.getMedicalCondition().status;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Converts this Jackson-friendly adapted volunteer object into the model\u0027s {@code Volunteer} object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted volunteer."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Volunteer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final List\u003cTag\u003e volunteerTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            volunteerTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (age \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Age.isValidAge(age)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final Age modelAge \u003d new Age(age);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Race.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (race \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Race.class.getSimpleName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Race.isValidRace(race)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final Race modelRace \u003d new Race(race);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (religion \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Race.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Religion.isValidReligion(religion)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final Religion modelReligion \u003d new Religion(religion);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (emergencycontact \u003d\u003d null) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                EmergencyContact.class.getSimpleName()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!EmergencyContact.isValidEmergencyContact(emergencycontact)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(EmergencyContact.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final EmergencyContact modelEmergencyContact \u003d new EmergencyContact(emergencycontact);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (dietarypreference \u003d\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                DietaryPreference.class.getSimpleName()));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!DietaryPreference.isValidDietaryPreference(dietarypreference)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final DietaryPreference modelDietaryPreference \u003d new DietaryPreference(dietarypreference);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (medicalcondition \u003d\u003d null) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                MedicalCondition.class.getSimpleName()));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!MedicalCondition.isValidMedicalCondition(medicalcondition)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final MedicalCondition modelMedicalCondition \u003d new MedicalCondition(medicalcondition);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(volunteerTags);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new Volunteer(modelName, modelAge, modelGender, modelRace, modelReligion, modelPhone,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            modelAddress, modelEmail,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            modelEmergencyContact, modelDietaryPreference, modelMedicalCondition, modelTags);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 206,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BENEFICIARY \u003d \"Beneficiary list contains duplicate beneficiary(es).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VOLUNTEER \u003d \"Volunteer list contains duplicate volunteer(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"Project list contains duplicate project(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final List\u003cJsonAdaptedBeneficiary\u003e beneficiaries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final List\u003cJsonAdaptedVolunteer\u003e volunteers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final List\u003cJsonAdaptedProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                                       @JsonProperty(\"beneficiaries\") List\u003cJsonAdaptedBeneficiary\u003e beneficiaries,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                                       @JsonProperty(\"volunteers\") List\u003cJsonAdaptedVolunteer\u003e volunteers,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                                       @JsonProperty(\"projects\") List\u003cJsonAdaptedProject\u003e projects) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.beneficiaries.addAll(beneficiaries);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.volunteers.addAll(volunteers);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.projects.addAll(projects);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        beneficiaries.addAll(source.getBeneficiaryList().stream().map(JsonAdaptedBeneficiary::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        volunteers.addAll(source.getVolunteerList().stream().map(JsonAdaptedVolunteer::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projects.addAll(source.getProjectList().stream().map(JsonAdaptedProject::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        for (JsonAdaptedBeneficiary jsonAdaptedBeneficiary : beneficiaries) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Beneficiary beneficiary \u003d jsonAdaptedBeneficiary.toModelType();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            if (addressBook.hasBeneficiary(beneficiary)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BENEFICIARY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            addressBook.addBeneficiary(beneficiary);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        for (JsonAdaptedVolunteer jsonAdaptedVolunteer : volunteers) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Volunteer volunteer \u003d jsonAdaptedVolunteer.toModelType();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            if (addressBook.hasVolunteer(volunteer)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_VOLUNTEER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            addressBook.addVolunteer(volunteer);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        for (JsonAdaptedProject jsonAdaptedProject : projects) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            Project project \u003d jsonAdaptedProject.toModelType();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            if (addressBook.hasProject(project)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            addressBook.addProject(project);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 16,
      "-": 58,
      "ndhuu": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "ndhuu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cVolunteer\u003e selectedVolunteer) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        // Load volunteer page when selected volunteer changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        selectedVolunteer.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            loadVolunteerPage(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private void loadVolunteerPage(Volunteer volunteer) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + volunteer.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 7,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "ndhuu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "ndhuu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.SummaryBeneficiaryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.SummaryBeneficiaryCommand.SummarisedBeneficiary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.ui.beneficiary.BeneficiaryListPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private ProjectListPanel projectListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private VolunteerListPanel volunteerListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private BeneficiaryListPanel beneficiaryListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private StackPane projectListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private StackPane beneficiaryListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private StackPane volunteerListPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedVolunteerProperty());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        beneficiaryListPanel \u003d new BeneficiaryListPanel(logic.getFilteredBeneficiaryList(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            logic.selectedBeneficiaryProperty(), logic::setSelectedBeneficiary);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        beneficiaryListPanelPlaceholder.getChildren().add(beneficiaryListPanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        volunteerListPanel \u003d new VolunteerListPanel(logic.getFilteredVolunteerList(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            logic.selectedVolunteerProperty(), logic::setSelectedVolunteer);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        volunteerListPanelPlaceholder.getChildren().add(volunteerListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projectListPanel \u003d new ProjectListPanel(logic.getFilteredProjectList(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            logic.selectedProjectProperty(), logic::setSelectedProject);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projectListPanelPlaceholder.getChildren().add(projectListPanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath(), logic.getAddressBook());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    //@@author ndhuu"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * open summary table window."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void handleBeneficiarySummary() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        TableView\u003cSummarisedBeneficiary\u003e table \u003d new TableView\u003cSummarisedBeneficiary\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final ObservableList\u003cSummarisedBeneficiary\u003e data \u003d SummaryBeneficiaryCommand.getSummarisedBeneficiaries(logic);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Scene scene \u003d SummaryBeneficiaryCommand.getScene(stage, table, data);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public VolunteerListPanel getVolunteerListPanel() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return volunteerListPanel;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public BeneficiaryListPanel getBeneficiaryListPanel() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return beneficiaryListPanel;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ProjectListPanel getProjectListPanel() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return projectListPanel;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            if (commandResult.isShowBeneficiarySummary()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                handleBeneficiarySummary();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                commandResult.resetShowBeneficiarySummary();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 8,
      "quinnzzzzz": 8,
      "-": 148,
      "ndhuu": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "//@@author quinnzzzzz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * An UI component that displays information of a {@code Project}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class ProjectCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private static final String FXML \u003d \"ProjectListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public final Project project;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Label projectTitle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Label projectDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Label beneficiary;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private Label volunteer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ProjectCard(Project project, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projectTitle.setText(project.getProjectTitle().fullTitle);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (project.isComplete()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            projectTitle.setStyle(\"-fx-font-family: Segoe UI Semibold; -fx-font-size: 13pt; -fx-text-fill: #FF0000;\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projectDate.setText(\"Project Date: \" + project.getProjectDate().fullDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        beneficiary.setText(\"Beneficiary Assigned: \" + project.getBeneficiaryAssigned().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        volunteer.setText(\"Number of Volunteers Assigned: \" + project.getVolunteerCount());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        if (!(other instanceof ProjectCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        ProjectCard card \u003d (ProjectCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u0026\u0026 project.equals(card.project);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Panel containing the list of projects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "public class ProjectListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private static final String FXML \u003d \"ProjectListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProjectListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private ListView\u003cProject\u003e projectListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public ProjectListPanel(ObservableList\u003cProject\u003e projectList,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                            ObservableValue\u003cProject\u003e selectedProject,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                            Consumer\u003cProject\u003e onSelectedProjectChange) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projectListView.setItems(projectList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projectListView.setCellFactory(listView -\u003e new ProjectListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        projectListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            logger.fine(\"Selection in project list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            onSelectedProjectChange.accept(newValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        selectedProject.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            logger.fine(\"Selected project changed to: \" + newValue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected project,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            if (Objects.equals(projectListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                projectListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                int index \u003d projectListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                projectListView.scrollTo(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                projectListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Project} using a {@code ProjectCard}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    class ProjectListViewCell extends ListCell\u003cProject\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        protected void updateItem(Project project, boolean empty) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            super.updateItem(project, empty);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            if (empty || project \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                setGraphic(new ProjectCard(project, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "ndhuu": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "ndhuu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/volunCheer_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 1,
      "-": 65,
      "ndhuu": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 1,
      "-": 77,
      "ndhuu": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/VolunteerCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * An UI component that displays information of a {@code Volunteer}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class VolunteerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private static final String FXML \u003d \"VolunteerListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public final Volunteer volunteer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Label age;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Label race;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Label religion;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Label emergencycontact;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Label dietarypreference;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Label medicalcondition;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerCard(Volunteer volunteer, int displayedIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.volunteer \u003d volunteer;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        name.setText(volunteer.getName().fullName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        age.setText(\"Age: \" + volunteer.getAge().ageOutput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        gender.setText(\"Gender: \" + volunteer.getGender().genderOutput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        race.setText(\"Race: \" + volunteer.getRace().raceOutput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        religion.setText(\"Religion: \" + volunteer.getReligion().religionOutput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        phone.setText(\"Phone: \" + volunteer.getPhone().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        address.setText(\"Address: \" + volunteer.getAddress().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        email.setText(\"Email: \" + volunteer.getEmail().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        emergencycontact.setText(\"Emergency Contact: \" + volunteer.getEmergencyContact().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        dietarypreference.setText(\"Dietary Preference: \" + volunteer.getDietaryPreference().restriction);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        medicalcondition.setText(\"Medical Condition: \" + volunteer.getMedicalCondition().status);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        volunteer.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (!(other instanceof VolunteerCard)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        VolunteerCard card \u003d (VolunteerCard) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            \u0026\u0026 volunteer.equals(card.volunteer);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 28,
      "-": 55,
      "ndhuu": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/VolunteerListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * Panel containing the list of volunteers."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class VolunteerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private static final String FXML \u003d \"VolunteerListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(VolunteerListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private ListView\u003cVolunteer\u003e volunteerListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerListPanel(ObservableList\u003cVolunteer\u003e volunteerList, ObservableValue\u003cVolunteer\u003e selectedVolunteer,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                              Consumer\u003cVolunteer\u003e onSelectedVolunteerChange) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        volunteerListView.setItems(volunteerList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        volunteerListView.setCellFactory(listView -\u003e new VolunteerListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        volunteerListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            logger.fine(\"Selection in volunteer list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            onSelectedVolunteerChange.accept(newValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        selectedVolunteer.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            logger.fine(\"Selected volunteer changed to: \" + newValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected volunteer,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (Objects.equals(volunteerListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                volunteerListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                int index \u003d volunteerListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                volunteerListView.scrollTo(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                volunteerListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Volunteer} using a {@code VolunteerCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    class VolunteerListViewCell extends ListCell\u003cVolunteer\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        protected void updateItem(Volunteer volunteer, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            super.updateItem(volunteer, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (empty || volunteer \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                setGraphic(new VolunteerCard(volunteer, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/beneficiary/BeneficiaryCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.ui.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * An UI component that displays information of a {@code Beneficiary}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class BeneficiaryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String FXML \u003d \"BeneficiaryListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public final Beneficiary beneficiary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public BeneficiaryCard(Beneficiary beneficiary, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.beneficiary \u003d beneficiary;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        name.setText(beneficiary.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        phone.setText(\"Phone: \" + beneficiary.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        address.setText(\"Address: \" + beneficiary.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        email.setText(\"Email: \" + beneficiary.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        if (!(other instanceof BeneficiaryCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        BeneficiaryCard card \u003d (BeneficiaryCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u0026\u0026 beneficiary.equals(card.beneficiary);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/beneficiary/BeneficiaryListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.ui.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Panel containing the list of beneficiaries."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class BeneficiaryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String FXML \u003d \"BeneficiaryListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BeneficiaryListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private ListView\u003cBeneficiary\u003e beneficiaryListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public BeneficiaryListPanel(ObservableList\u003cBeneficiary\u003e beneficiaryList,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                                ObservableValue\u003cBeneficiary\u003e selectedBeneficiary,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                                Consumer\u003cBeneficiary\u003e onSelectedBeneficiaryChange) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        beneficiaryListView.setItems(beneficiaryList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        beneficiaryListView.setCellFactory(listView -\u003e new BeneficiaryListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        beneficiaryListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            logger.fine(\"Selection in beneficiary list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            onSelectedBeneficiaryChange.accept(newValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        selectedBeneficiary.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            logger.fine(\"Selected beneficiary changed to: \" + newValue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected beneficiary,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            if (Objects.equals(beneficiaryListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                beneficiaryListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                int index \u003d beneficiaryListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                beneficiaryListView.scrollTo(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                beneficiaryListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Beneficiary} using a {@code BeneficiaryCard}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    class BeneficiaryListViewCell extends ListCell\u003cBeneficiary\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        protected void updateItem(Beneficiary beneficiary, boolean empty) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            super.updateItem(beneficiary, empty);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            if (empty || beneficiary \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                setGraphic(new BeneficiaryCard(beneficiary, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 75
    }
  },
  {
    "path": "src/main/resources/view/BeneficiaryListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 33
    }
  },
  {
    "path": "src/main/resources/view/BeneficiaryListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \u003cLabel text\u003d\"Beneficiaries\" styleClass\u003d\"panel_label\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \u003cListView fx:id\u003d\"beneficiaryListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 14
    }
  },
  {
    "path": "src/main/resources/view/CheerTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    background-color: #FFFFFF; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-base: #ffffff;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-control-inner-background: #ffffff;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffd0d0, 20%);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#fffef7, 20%);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffaaaa, 10%);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-color: #fffffff;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: Black;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".panel_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 30px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: \t#f78300;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-color: derive(#f4b241, 10%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#fffef7, 30%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-color: derive(#f4b241, 25%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-color: derive(#ffffff, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 50%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: orange;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "/*"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": " */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 25%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: derive(#ffffff, 50%);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: transparent #ffffff transparent #ffffff;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-color: #f4b241 #f4b241 #f4b241 #f4b241;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-effect: innershadow(gaussian, white, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: transparent, #ffffff, transparent, #ffffff;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 358
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "               promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "ndhuu": 3
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ".panel_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    -fx-font-size: 30px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    -fx-text-fill: \t#FFFF66;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 352,
      "ndhuu": 6
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    -fx-background: #ffffff;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "ndhuu": 4
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "         title\u003d\"VolunCHeer\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        \u003cImage url\u003d\"@/images/volunCheer_icon.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                \u003cURL value\u003d\"@CheerTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.3\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    \u003cVBox fx:id\u003d\"projectList\" minWidth\u003d\"250\" prefWidth\u003d\"220\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"projectListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    \u003cVBox fx:id\u003d\"beneficiaryList\" minWidth\u003d\"250\" prefWidth\u003d\"220\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"beneficiaryListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    \u003cVBox fx:id\u003d\"volunteerList\" minWidth\u003d\"250\" prefWidth\u003d\"220\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"volunteerListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                \u003cStackPane fx:id\u003d\"calendarPanelPlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 18,
      "-": 57,
      "ndhuu": 12
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "swalahlah": 1,
      "-": 6,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/resources/view/ProjectListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "                \u003cLabel fx:id\u003d\"projectTitle\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u003cLabel fx:id\u003d\"projectDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$projectDate\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u003cLabel fx:id\u003d\"beneficiary\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$beneficiary\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "            \u003cLabel fx:id\u003d\"volunteer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$volunteer\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 32,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/resources/view/ProjectListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        \u003cLabel text\u003d\"Projects\" styleClass\u003d\"panel_label\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        \u003cListView fx:id\u003d\"projectListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 11,
      "ndhuu": 3
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "ndhuu": 2
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"syncStatus\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "ndhuu": 1
    }
  },
  {
    "path": "src/main/resources/view/VolunteerListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cLabel fx:id\u003d\"age\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$age\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cLabel fx:id\u003d\"race\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$race\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cLabel fx:id\u003d\"religion\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$religion\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cLabel fx:id\u003d\"emergencycontact\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$emergencycontact\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cLabel fx:id\u003d\"dietarypreference\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dietarypreference\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \u003cLabel fx:id\u003d\"medicalcondition\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$medicalcondition\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 42
    }
  },
  {
    "path": "src/main/resources/view/VolunteerListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \u003cLabel text\u003d\"Volunteers\" styleClass\u003d\"panel_label\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \u003cListView fx:id\u003d\"volunteerListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 14
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    \u003clink href\u003d\"CheerTheme.css\" rel\u003d\"stylesheet\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "  \"persons\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "ndhuu": 6
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "  \"persons\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "ndhuu": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "  \"persons\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "ndhuu": 9
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "  \"persons\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "ndhuu": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "  \"persons\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Benson Meier\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"98765432\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"johnd@example.com\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \"owesMoney\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Carl Kurz\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"95352563\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"heinz@example.com\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"wall street\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Daniel Meier\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"87652533\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"cornelia@example.com\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"10th street\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Elle Meyer\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482224\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"werner@example.com\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"michegan ave\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Fiona Kunz\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482427\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"lydia@example.com\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"little tokyo\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"George Best\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482442\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"anna@example.com\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "ndhuu": 26
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cPerson\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cPerson\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle(ListView\u003cPerson\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError        if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e selectedPersonList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedPersonList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person list size expected 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .filter(handle -\u003e handle.equals(selectedPersonList.get(0)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to display {@code person}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(Person person) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getRootNode().getItems().contains(person)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Person does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person card handle of a person associated with the {@code index} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person getPerson(int index) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the selected {@code PersonCard} in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 159,
      "ndhuu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                jsonAddressBookStorage.saveAddressBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 105,
      "ndhuu": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                                       String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 4,
      "-": 156,
      "ndhuu": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cPerson\u003e expectedPersonFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cBeneficiary\u003e expectedBeneficiaryFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBeneficiaryList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cProject\u003e expectedProjectFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cVolunteer\u003e expectedVolunteerFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredVolunteerList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary expectedSelectedBeneficiary \u003d actualModel.getSelectedBeneficiary();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Project expectedSelectedProject \u003d actualModel.getSelectedProject();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Volunteer expectedSelectedVolunteer \u003d actualModel.getSelectedVolunteer();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedPersonFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedBeneficiaryFilteredList, actualModel.getFilteredBeneficiaryList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedProjectFilteredList, actualModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedVolunteerFilteredList, actualModel.getFilteredVolunteerList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedSelectedBeneficiary, actualModel.getSelectedBeneficiary());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedSelectedVolunteer, actualModel.getSelectedVolunteer());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedSelectedProject, actualModel.getSelectedProject());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 151,
      "ndhuu": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MapCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "articstranger"
        },
        "content": "//@@author articstranger"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "articstranger"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.getTypicalVolunteersPoints;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.MapObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "articstranger"
        },
        "content": "public class MapCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public void test_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        CommandResult result \u003d new MapCommand(defaultMap()).execute(model, commandHistory);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public void test_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        new MapCommand(defaultMap()).execute(model, commandHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        ArrayList\u003cInteger\u003e expectedPoints \u003d getTypicalVolunteersPoints();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        assertEquals(collectPoints(model), expectedPoints);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * Goes through the @param model and collects points from all volunteers"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * @return points as an arraylist"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public ArrayList\u003cInteger\u003e collectPoints(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        ArrayList\u003cInteger\u003e points \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        model.getFilteredVolunteerList().forEach(vol -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            points.add(vol.getPoints());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * default mapobject stub"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "articstranger"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private MapObject defaultMap() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        Pair\u003cInteger, Integer\u003e agePair \u003d new Pair\u003c\u003e(2, 18);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        Pair\u003cInteger, String\u003e racePair \u003d new Pair\u003c\u003e(1, \"Chinese\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        Pair\u003cInteger, String\u003e medicalPair \u003d new Pair\u003c\u003e(3, \"Nil\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        String comparator \u003d \"\u003e\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return new MapObject(agePair, comparator, racePair, medicalPair);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "articstranger"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "articstranger": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "ndhuu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "ndhuu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/beneficiary/AddBeneficiaryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.commands.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.MapObject;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.beneficiary.BeneficiaryBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class AddBeneficiaryCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void constructor_nullBeneficiary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        new AddBeneficiaryCommand(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_beneficiaryAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ModelStubAcceptingBeneficiaryAdded modelStub \u003d new ModelStubAcceptingBeneficiaryAdded();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary validBeneficiary \u003d new BeneficiaryBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        CommandResult commandResult \u003d new AddBeneficiaryCommand(validBeneficiary).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(String.format("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            AddBeneficiaryCommand.MESSAGE_SUCCESS, validBeneficiary), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(Arrays.asList(validBeneficiary), modelStub.beneficiariesAdded);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_duplicateBeneficiary_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary validBeneficiary \u003d new BeneficiaryBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        AddBeneficiaryCommand addBeneficiaryCommand \u003d new AddBeneficiaryCommand(validBeneficiary);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBeneficiary(validBeneficiary);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expectMessage(AddBeneficiaryCommand.MESSAGE_DUPLICATE_BENEFICIARY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        addBeneficiaryCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary alice \u003d new BeneficiaryBuilder().withName(\"Alice\").withPhone(\"123456789\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withEmail(\"Alice@gmail.com\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary bob \u003d new BeneficiaryBuilder().withName(\"Bob\").withPhone(\"23456789\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withEmail(\"Bob@gmail.com\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        AddBeneficiaryCommand addAliceCommand \u003d new AddBeneficiaryCommand(alice);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        AddBeneficiaryCommand addBobCommand \u003d new AddBeneficiaryCommand(bob);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        AddBeneficiaryCommand addAliceCommandCopy \u003d new AddBeneficiaryCommand(alice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different beneficiary -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \" should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \" should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void addBeneficiary(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void addVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void sortProjectByDate() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \" should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public boolean hasBeneficiary(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \" should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setProject(Project target, Project editedProject)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throws DuplicateProjectException, ProjectNotFoundException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \" should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \" should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public boolean hasVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void deleteBeneficiary(Beneficiary target) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \" should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setBeneficiary(Beneficiary target, Beneficiary editedBeneficiary) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public ObservableList\u003cBeneficiary\u003e getFilteredBeneficiaryList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public ObservableList\u003cVolunteer\u003e getFilteredVolunteerList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void updateFilteredBeneficiaryList(Predicate\u003cBeneficiary\u003e predicate) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method\""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \" should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public ReadOnlyProperty\u003cProject\u003e selectedProjectProperty() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public ReadOnlyProperty\u003cBeneficiary\u003e selectedBeneficiaryProperty() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Project getSelectedProject() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setSelectedProject(Project project) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Beneficiary getSelectedBeneficiary() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setSelectedBeneficiary(Beneficiary person) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void deleteVolunteer(Volunteer target) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setVolunteer(Volunteer target, Volunteer editedVolunteer) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public ReadOnlyProperty\u003cVolunteer\u003e selectedVolunteerProperty() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public Volunteer getSelectedVolunteer() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void setSelectedVolunteer(Volunteer volunteer) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + \"should not be called.\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void updateFilteredVolunteerList(Predicate\u003cVolunteer\u003e predicate) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public int checkAge(MapObject map, Volunteer currentVol) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public int checkRace(MapObject map, Volunteer currentVol) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public int checkMedical(MapObject map, Volunteer currentVol) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void mapAllVolunteer(MapObject map) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void sortVolunteers() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public List\u003cString[]\u003e addData(int numVolunteers, ArrayList\u003cString\u003e prefixToBePrinted) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"This method \""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                    + \"should not be called.\");"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private class ModelStubWithBeneficiary extends ModelStub {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        private final Beneficiary person;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ModelStubWithBeneficiary(Beneficiary person) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public boolean hasBeneficiary(Beneficiary person) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return this.person.isSameBeneficiary(person);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * A Model stub that always accept the beneficiary being added."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private class ModelStubAcceptingBeneficiaryAdded extends ModelStub {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final ArrayList\u003cBeneficiary\u003e beneficiariesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public boolean hasBeneficiary(Beneficiary person) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return beneficiariesAdded.stream().anyMatch(person::isSameBeneficiary);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void addBeneficiary(Beneficiary person) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            beneficiariesAdded.add(person);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            // called by {@code AddBeneficiaryCommand#execute()}"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 463
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/beneficiary/BeneficiaryCommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.commands.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxBeneficiary.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.beneficiary.EditBeneficiaryDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class BeneficiaryCommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALID_NAME_ANIMAL_SHELTER \u003d \"Animal Shelter\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALID_NAME_BABES \u003d \"Babes\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALID_PHONE_ANIMAL_SHELTER \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALID_PHONE_BABES \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALID_EMAIL_ANIMAL_SHELTER \u003d \"animal@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALID_EMAIL_BABES \u003d \"babes@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALID_ADDRESS_ANIMAL_SHELTER \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String VALID_ADDRESS_BABES \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String NAME_DESC_ANIMAL_SHELTER \u003d \" \" + PREFIX_NAME + VALID_NAME_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String NAME_DESC_BABES \u003d \" \" + PREFIX_NAME + VALID_NAME_BABES;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String PHONE_DESC_ANIMAL_SHELTER \u003d \" \" + PREFIX_PHONE + VALID_PHONE_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String PHONE_DESC_BABES \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BABES;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String EMAIL_DESC_ANIMAL_SHELTER \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String EMAIL_DESC_BABES \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BABES;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String ADDRESS_DESC_ANIMAL_SHELTER \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String ADDRESS_DESC_BABES \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BABES;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final EditBeneficiaryCommand.EditBeneficiaryDescriptor DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final EditBeneficiaryCommand.EditBeneficiaryDescriptor DESC_BABES;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DESC_ANIMAL_SHELTER \u003d new EditBeneficiaryDescriptorBuilder().withName(VALID_NAME_ANIMAL_SHELTER)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withPhone(VALID_PHONE_ANIMAL_SHELTER).withEmail(VALID_EMAIL_ANIMAL_SHELTER)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withAddress(VALID_ADDRESS_ANIMAL_SHELTER).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DESC_BABES \u003d new EditBeneficiaryDescriptorBuilder().withName(VALID_NAME_BABES)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withPhone(VALID_PHONE_BABES).withEmail(VALID_EMAIL_BABES)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withAddress(VALID_ADDRESS_BABES).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * - the address book, filtered beneficiary list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *      and selected beneficiary in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cBeneficiary\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBeneficiaryList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary expectedSelectedBeneficiary \u003d actualModel.getSelectedBeneficiary();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredBeneficiaryList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedSelectedBeneficiary, actualModel.getSelectedBeneficiary());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the beneficiary at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static void showBeneficiaryAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBeneficiaryList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiary \u003d model.getFilteredBeneficiaryList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final String[] splitName \u003d beneficiary.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.updateFilteredBeneficiaryList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(1, model.getFilteredBeneficiaryList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Deletes the first beneficiary in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static void deleteFirstBeneficiary(Model model) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary firstBeneficiary \u003d model.getFilteredBeneficiaryList().get(0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.deleteBeneficiary(firstBeneficiary);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/beneficiary/DeleteBeneficiaryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.commands.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.showBeneficiaryAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.ATTACHED_PROJECT_B1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.ATTACHED_PROJECT_B2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.BENEFICIARY_B;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.getAandBBeneficiaries;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.getAddressBookForBeneficiarySyncTest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.getProjectA2B;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.TypicalBeneficiaries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * {@code DeleteBeneficiaryCommand}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class DeleteBeneficiaryCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiaryToDelete \u003d model.getFilteredBeneficiaryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DeleteBeneficiaryCommand deleteBeneficiaryCommand \u003d new DeleteBeneficiaryCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteBeneficiaryCommand.MESSAGE_DELETE_BENEFICIARY_SUCCESS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            beneficiaryToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.deleteBeneficiary(beneficiaryToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess(deleteBeneficiaryCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBeneficiaryList().size() + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DeleteBeneficiaryCommand deleteBeneficiaryCommand \u003d new DeleteBeneficiaryCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            outOfBoundIndex, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandFailure(deleteBeneficiaryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Messages.MESSAGE_INVALID_BENEFICIARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        showBeneficiaryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiaryToDelete \u003d model.getFilteredBeneficiaryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DeleteBeneficiaryCommand deleteBeneficiaryCommand \u003d new DeleteBeneficiaryCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            INDEX_FIRST, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteBeneficiaryCommand.MESSAGE_DELETE_BENEFICIARY_SUCCESS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            beneficiaryToDelete);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.deleteBeneficiary(beneficiaryToDelete);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        showNoBeneficiary(expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess(deleteBeneficiaryCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        showBeneficiaryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getBeneficiaryList().size());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DeleteBeneficiaryCommand deleteBeneficiaryCommand \u003d new DeleteBeneficiaryCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            outOfBoundIndex, false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandFailure(deleteBeneficiaryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Messages.MESSAGE_INVALID_BENEFICIARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiaryToDelete \u003d model.getFilteredBeneficiaryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DeleteBeneficiaryCommand deleteBeneficiaryCommand \u003d new DeleteBeneficiaryCommand("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            INDEX_FIRST, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.deleteBeneficiary(beneficiaryToDelete);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // delete -\u003e first beneficiary deleted"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        deleteBeneficiaryCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered beneficiary list to show all beneficiaries"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        CommandTestUtil.assertCommandSuccess("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // redo -\u003e same first beneficiary deleted again"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        CommandTestUtil.assertCommandSuccess("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBeneficiaryList().size() + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DeleteBeneficiaryCommand deleteBeneficiaryCommand \u003d new DeleteBeneficiaryCommand("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            outOfBoundIndex, false);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandFailure(deleteBeneficiaryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Messages.MESSAGE_INVALID_BENEFICIARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * 1. Deletes a {@code Beneficiary} from a filtered list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted beneficiary in the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the beneficiary object regardless of indexing."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameBeneficiaryDeleted() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DeleteBeneficiaryCommand deleteBeneficiaryCommand \u003d new DeleteBeneficiaryCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            false);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        showBeneficiaryAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiaryToDelete \u003d model.getFilteredBeneficiaryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.deleteBeneficiary(beneficiaryToDelete);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // delete -\u003e deletes second beneficiary in unfiltered beneficiary list /"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // first beneficiary in filtered beneficiary list"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        deleteBeneficiaryCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered beneficiary list to show all beneficiaries"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertNotEquals(beneficiaryToDelete, model.getFilteredBeneficiaryList().get(INDEX_FIRST.getZeroBased()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // redo -\u003e deletes same second beneficiary in unfiltered beneficiary list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DeleteBeneficiaryCommand deleteBeneficiaryFirstCommand \u003d new DeleteBeneficiaryCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            false);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DeleteBeneficiaryCommand deleteSecondCommand \u003d new DeleteBeneficiaryCommand(INDEX_SECOND,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            false);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(deleteBeneficiaryFirstCommand.equals(deleteBeneficiaryFirstCommand));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DeleteBeneficiaryCommand deleteBeneficiaryFirstCommandCopy \u003d new DeleteBeneficiaryCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            false);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(deleteBeneficiaryFirstCommand.equals(deleteBeneficiaryFirstCommandCopy));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(deleteBeneficiaryFirstCommand.equals(1));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(deleteBeneficiaryFirstCommand.equals(null));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different beneficiary -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(deleteBeneficiaryFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_invalidDelete_haveAttachedProjects() throws CommandException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DeleteBeneficiaryCommand deleteBeneficiaryCommand \u003d new DeleteBeneficiaryCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            false);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.setAddressBook(getAddressBookForBeneficiarySyncTest(getAandBBeneficiaries(), getProjectA2B()));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiaryToDelete \u003d model.getFilteredBeneficiaryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandFailure(deleteBeneficiaryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            String.format(DeleteBeneficiaryCommand.MESSAGE_BENEFICIARY_HAS_PROJECTS_ATTACHED,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                beneficiaryToDelete.getName(),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                beneficiaryToDelete.getAttachedProjectLists()));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_validDeleteHardDelete_success() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        DeleteBeneficiaryCommand deleteBeneficiaryCommand \u003d new DeleteBeneficiaryCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            true);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model model \u003d new ModelManager(getAddressBookForBeneficiarySyncTest(getAandBBeneficiaries(), getProjectA2B()),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.deleteBeneficiary(BENEFICIARY_B);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.deleteProject(ATTACHED_PROJECT_B1);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.deleteProject(ATTACHED_PROJECT_B2);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            DeleteBeneficiaryCommand.MESSAGE_DELETE_BENEFICIARY_SUCCESS, BENEFICIARY_B);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess(deleteBeneficiaryCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private void showNoBeneficiary(Model model) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model.updateFilteredBeneficiaryList(p -\u003e false);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(model.getFilteredBeneficiaryList().isEmpty());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 235
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/beneficiary/EditBeneficiaryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.commands.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.DESC_BABES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_NAME_BABES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_PHONE_BABES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.showBeneficiaryAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.ATTACHED_PROJECT_A;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.ATTACH_TO_A_TITLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.BENEFICIARY_A;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.BENEFICIARY_A_EDITED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.BENEFICIARY_A_EDITED_NAME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.buildProjectStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.getAandBBeneficiaries;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.getAddressBookForBeneficiarySyncTest;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.BeneficiariesSyncProjects.getProjectA2B;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.TypicalBeneficiaries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.EditBeneficiaryCommand.EditBeneficiaryDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.beneficiary.BeneficiaryBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.beneficiary.EditBeneficiaryDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * and unit tests for EditBeneficiaryCommand."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class EditBeneficiaryCommandTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary editedBeneficiary \u003d new BeneficiaryBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor descriptor \u003d new EditBeneficiaryDescriptorBuilder(editedBeneficiary).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand editBeneficiaryCommand \u003d new EditBeneficiaryCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String expectedMessage \u003d String.format(EditBeneficiaryCommand.MESSAGE_EDIT_BENEFICIARY_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editedBeneficiary);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.setBeneficiary(model.getFilteredBeneficiaryList().get(0), editedBeneficiary);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess(editBeneficiaryCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index indexLastBeneficiary \u003d Index.fromOneBased(model.getFilteredBeneficiaryList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary lastBeneficiary \u003d model.getFilteredBeneficiaryList().get(indexLastBeneficiary.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        BeneficiaryBuilder beneficiaryInList \u003d new BeneficiaryBuilder(lastBeneficiary);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary editedBeneficiary \u003d beneficiaryInList.withName(VALID_NAME_BABES).withPhone(VALID_PHONE_BABES)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor descriptor \u003d new EditBeneficiaryDescriptorBuilder().withName(VALID_NAME_BABES)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withPhone(VALID_PHONE_BABES).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand editBeneficiaryCommand \u003d new EditBeneficiaryCommand(indexLastBeneficiary, descriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String expectedMessage \u003d String.format(EditBeneficiaryCommand.MESSAGE_EDIT_BENEFICIARY_SUCCESS,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editedBeneficiary);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.setBeneficiary(lastBeneficiary, editedBeneficiary);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess(editBeneficiaryCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand editBeneficiaryCommand \u003d new EditBeneficiaryCommand("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            INDEX_FIRST, new EditBeneficiaryDescriptor());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary editedBeneficiary \u003d model.getFilteredBeneficiaryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String expectedMessage \u003d String.format(EditBeneficiaryCommand.MESSAGE_EDIT_BENEFICIARY_SUCCESS,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editedBeneficiary);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess(editBeneficiaryCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        showBeneficiaryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiaryInFilteredList \u003d model.getFilteredBeneficiaryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary editedBeneficiary \u003d new BeneficiaryBuilder(beneficiaryInFilteredList).withName(VALID_NAME_BABES)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand editBeneficiaryCommand \u003d new EditBeneficiaryCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new EditBeneficiaryDescriptorBuilder().withName(VALID_NAME_BABES).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String expectedMessage \u003d String.format(EditBeneficiaryCommand.MESSAGE_EDIT_BENEFICIARY_SUCCESS,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            editedBeneficiary);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.setBeneficiary(model.getFilteredBeneficiaryList().get(0), editedBeneficiary);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess(editBeneficiaryCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_invalidBeneficiaryIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBeneficiaryList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor descriptor \u003d new EditBeneficiaryDescriptorBuilder().withName(VALID_NAME_BABES)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand editBeneficiaryCommand \u003d new EditBeneficiaryCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandFailure(editBeneficiaryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Messages.MESSAGE_INVALID_BENEFICIARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_invalidBeneficiaryIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        showBeneficiaryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getBeneficiaryList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand editBeneficiaryCommand \u003d new EditBeneficiaryCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new EditBeneficiaryDescriptorBuilder().withName(VALID_NAME_BABES).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandFailure(editBeneficiaryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Messages.MESSAGE_INVALID_BENEFICIARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary editedBeneficiary \u003d new BeneficiaryBuilder().build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiaryToEdit \u003d model.getFilteredBeneficiaryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor descriptor \u003d new EditBeneficiaryDescriptorBuilder(editedBeneficiary).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand editBeneficiaryCommand \u003d new EditBeneficiaryCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.setBeneficiary(beneficiaryToEdit, editedBeneficiary);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // edit -\u003e first beneficiary edited"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        editBeneficiaryCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered beneficiary list to show all beneficiarys"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        BeneficiaryCommandTestUtil.assertCommandSuccess("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // redo -\u003e same first beneficiary edited again"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        BeneficiaryCommandTestUtil.assertCommandSuccess("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBeneficiaryList().size() + 1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor descriptor \u003d new EditBeneficiaryDescriptorBuilder().withName(VALID_NAME_BABES)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand editBeneficiaryCommand \u003d new EditBeneficiaryCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandFailure(editBeneficiaryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Messages.MESSAGE_INVALID_BENEFICIARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * 1. Edits a {@code Beneficiary} from a filtered list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited beneficiary in the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the beneficiary object regardless of indexing."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameBeneficiaryEdited() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary editedBeneficiary \u003d new BeneficiaryBuilder().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor descriptor \u003d new EditBeneficiaryDescriptorBuilder(editedBeneficiary).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand editBeneficiaryCommand \u003d new EditBeneficiaryCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        showBeneficiaryAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiaryToEdit \u003d model.getFilteredBeneficiaryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.setBeneficiary(beneficiaryToEdit, editedBeneficiary);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // edit -\u003e edits second beneficiary in unfiltered beneficiary list"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // first beneficiary in filtered beneficiary list"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        editBeneficiaryCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered beneficiary list to show all beneficiarys"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertNotEquals(model.getFilteredBeneficiaryList().get(INDEX_FIRST.getZeroBased()), beneficiaryToEdit);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // redo -\u003e edits same second beneficiary in unfiltered beneficiary list"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        final EditBeneficiaryCommand standardCommand \u003d new EditBeneficiaryCommand(INDEX_FIRST, DESC_ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor copyDescriptor \u003d new EditBeneficiaryDescriptor(DESC_ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand commandWithSameValues \u003d new EditBeneficiaryCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(standardCommand.equals(new EditBeneficiaryCommand(INDEX_SECOND, DESC_ANIMAL_SHELTER)));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(standardCommand.equals(new EditBeneficiaryCommand(INDEX_FIRST, DESC_BABES)));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Edit beneficiary with attached projects and observe the synchronization in those projects"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_editBeneficiary_checkSyncWithAttachedProjects() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            getAddressBookForBeneficiarySyncTest(getAandBBeneficiaries(), getProjectA2B()), new UserPrefs());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand editBeneficiaryCommand \u003d new EditBeneficiaryCommand(INDEX_SECOND, BENEFICIARY_A_EDITED);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary editedBeneficiary \u003d new BeneficiaryBuilder(BENEFICIARY_A)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withName(BENEFICIARY_A_EDITED_NAME).build();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.setBeneficiary(BENEFICIARY_A, editedBeneficiary);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Project projectAttachedToA \u003d buildProjectStub(ATTACH_TO_A_TITLE, editedBeneficiary);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.setProject(ATTACHED_PROJECT_A, projectAttachedToA);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        System.out.println(projectAttachedToA);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            EditBeneficiaryCommand.MESSAGE_EDIT_BENEFICIARY_SUCCESS, editedBeneficiary);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess(editBeneficiaryCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 277
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/beneficiary/EditBeneficiaryDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.commands.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.DESC_BABES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_ADDRESS_BABES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_EMAIL_BABES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_NAME_BABES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_PHONE_BABES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.EditBeneficiaryCommand.EditBeneficiaryDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.beneficiary.EditBeneficiaryDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class EditBeneficiaryDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor descriptorWithSameValues \u003d new EditBeneficiaryDescriptor(DESC_ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(DESC_ANIMAL_SHELTER.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(DESC_ANIMAL_SHELTER.equals(DESC_ANIMAL_SHELTER));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(DESC_ANIMAL_SHELTER.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(DESC_ANIMAL_SHELTER.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(DESC_ANIMAL_SHELTER.equals(DESC_BABES));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor editedAnimalShelter \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new EditBeneficiaryDescriptorBuilder(DESC_ANIMAL_SHELTER).withName(VALID_NAME_BABES).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(DESC_ANIMAL_SHELTER.equals(editedAnimalShelter));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        editedAnimalShelter \u003d new EditBeneficiaryDescriptorBuilder(DESC_ANIMAL_SHELTER)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withPhone(VALID_PHONE_BABES).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(DESC_ANIMAL_SHELTER.equals(editedAnimalShelter));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        editedAnimalShelter \u003d new EditBeneficiaryDescriptorBuilder(DESC_ANIMAL_SHELTER)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withEmail(VALID_EMAIL_BABES).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(DESC_ANIMAL_SHELTER.equals(editedAnimalShelter));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        editedAnimalShelter \u003d new EditBeneficiaryDescriptorBuilder(DESC_ANIMAL_SHELTER)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withAddress(VALID_ADDRESS_BABES).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(DESC_ANIMAL_SHELTER.equals(editedAnimalShelter));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/beneficiary/ListBeneficiaryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.commands.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.showBeneficiaryAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.TypicalBeneficiaries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class ListBeneficiaryCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        BeneficiaryCommandTestUtil.assertCommandSuccess("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new ListBeneficiaryCommand(), model, commandHistory, ListBeneficiaryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        showBeneficiaryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new ListBeneficiaryCommand(), model, commandHistory, ListBeneficiaryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindVolunteerCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.FindVolunteerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class FindVolunteerCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private FindVolunteerCommandParser parser \u003d new FindVolunteerCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "articstranger"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, FindVolunteerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public void parse_validArgs_returnsFindVolunteerCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        FindVolunteerCommand expectedFindVolunteerCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            new FindVolunteerCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindVolunteerCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindVolunteerCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 33,
      "articstranger": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MapCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "articstranger"
        },
        "content": "//@@author articstranger"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "articstranger"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.logic.commands.MapCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "articstranger"
        },
        "content": "public class MapCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    private MapCommandParser parser \u003d new MapCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        assertParseFailure(parser, \" \", expectedMessage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "articstranger"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "articstranger": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.ParserUtilPerson.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ParserUtilPerson.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ParserUtilPerson.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtilPerson.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtilPerson.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtilPerson.parseName((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtilPerson.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedName, ParserUtilPerson.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedName, ParserUtilPerson.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtilPerson.parsePhone((String) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtilPerson.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedPhone, ParserUtilPerson.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedPhone, ParserUtilPerson.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtilPerson.parseAddress((String) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtilPerson.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedAddress, ParserUtilPerson.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedAddress, ParserUtilPerson.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtilPerson.parseEmail((String) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtilPerson.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedEmail, ParserUtilPerson.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedEmail, ParserUtilPerson.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ParserUtilPerson.parseTag(null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ParserUtilPerson.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedTag, ParserUtilPerson.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedTag, ParserUtilPerson.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ParserUtilPerson.parseTags(null);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ParserUtilPerson.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(ParserUtilPerson.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtilPerson.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 178,
      "ndhuu": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "ndhuu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/beneficiary/AddBeneficiaryCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.parser.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.ADDRESS_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.ADDRESS_DESC_BABES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.EMAIL_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.EMAIL_DESC_BABES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.NAME_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.NAME_DESC_BABES;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.PHONE_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.PHONE_DESC_BABES;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_ADDRESS_BABES;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_EMAIL_BABES;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_NAME_BABES;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_PHONE_BABES;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.TypicalBeneficiaries.ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.TypicalBeneficiaries.BABES;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.AddBeneficiaryCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.beneficiary.BeneficiaryBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class AddBeneficiaryCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private AddBeneficiaryCommandParser parser \u003d new AddBeneficiaryCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary expectedBeneficiary \u003d new BeneficiaryBuilder(BABES).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            PREAMBLE_WHITESPACE + NAME_DESC_BABES + PHONE_DESC_BABES + EMAIL_DESC_BABES"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + ADDRESS_DESC_BABES, new AddBeneficiaryCommand(expectedBeneficiary));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            NAME_DESC_ANIMAL_SHELTER + NAME_DESC_BABES + PHONE_DESC_BABES + EMAIL_DESC_BABES"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + ADDRESS_DESC_BABES, new AddBeneficiaryCommand(expectedBeneficiary));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            NAME_DESC_BABES + PHONE_DESC_ANIMAL_SHELTER + PHONE_DESC_BABES + EMAIL_DESC_BABES"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + ADDRESS_DESC_BABES, new AddBeneficiaryCommand(expectedBeneficiary));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            NAME_DESC_BABES + PHONE_DESC_BABES + EMAIL_DESC_ANIMAL_SHELTER + EMAIL_DESC_BABES"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + ADDRESS_DESC_BABES, new AddBeneficiaryCommand(expectedBeneficiary));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            NAME_DESC_BABES + PHONE_DESC_BABES + EMAIL_DESC_BABES + ADDRESS_DESC_ANIMAL_SHELTER"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + ADDRESS_DESC_BABES, new AddBeneficiaryCommand(expectedBeneficiary));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary expectedBeneficiaryMultipleTags \u003d new BeneficiaryBuilder(BABES)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            NAME_DESC_BABES + PHONE_DESC_BABES + EMAIL_DESC_BABES + ADDRESS_DESC_BABES,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new AddBeneficiaryCommand(expectedBeneficiaryMultipleTags));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary expectedBeneficiary \u003d new BeneficiaryBuilder(ANIMAL_SHELTER).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            NAME_DESC_ANIMAL_SHELTER + PHONE_DESC_ANIMAL_SHELTER"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + EMAIL_DESC_ANIMAL_SHELTER + ADDRESS_DESC_ANIMAL_SHELTER,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new AddBeneficiaryCommand(expectedBeneficiary));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBeneficiaryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BABES + PHONE_DESC_BABES + EMAIL_DESC_BABES + ADDRESS_DESC_BABES,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BABES + VALID_PHONE_BABES + EMAIL_DESC_BABES + ADDRESS_DESC_BABES,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BABES + PHONE_DESC_BABES + VALID_EMAIL_BABES + ADDRESS_DESC_BABES,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BABES + PHONE_DESC_BABES + EMAIL_DESC_BABES + VALID_ADDRESS_BABES,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            VALID_NAME_BABES + VALID_PHONE_BABES + VALID_EMAIL_BABES + VALID_ADDRESS_BABES,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            INVALID_NAME_DESC + PHONE_DESC_BABES + EMAIL_DESC_BABES + ADDRESS_DESC_BABES,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            NAME_DESC_BABES + INVALID_PHONE_DESC + EMAIL_DESC_BABES + ADDRESS_DESC_BABES,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            NAME_DESC_BABES + PHONE_DESC_BABES + INVALID_EMAIL_DESC + ADDRESS_DESC_BABES,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            NAME_DESC_BABES + PHONE_DESC_BABES + EMAIL_DESC_BABES + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            INVALID_NAME_DESC + PHONE_DESC_BABES + EMAIL_DESC_BABES + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            PREAMBLE_NON_EMPTY + NAME_DESC_BABES + PHONE_DESC_BABES + EMAIL_DESC_BABES + ADDRESS_DESC_BABES,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBeneficiaryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/beneficiary/DeleteBeneficiaryCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.parser.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.DeleteBeneficiaryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * outside of the DeleteBeneficiaryCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * same path through the DeleteBeneficiaryCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class DeleteBeneficiaryCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private DeleteBeneficiaryCommandParser parser \u003d new DeleteBeneficiaryCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_validArgs_returnsDeleteBeneficiaryCommandSoftMode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser, \" i/1 \", new DeleteBeneficiaryCommand(INDEX_FIRST, false));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_validArgs_returnsDeleteBeneficiaryCommandHardMode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser, \" i/1 -D\", new DeleteBeneficiaryCommand(INDEX_FIRST, true));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            parser, \"a\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBeneficiaryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/beneficiary/EditBeneficiaryCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.parser.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.ADDRESS_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.ADDRESS_DESC_BABES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.EMAIL_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.EMAIL_DESC_BABES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.NAME_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.PHONE_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.PHONE_DESC_BABES;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_ADDRESS_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_ADDRESS_BABES;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_EMAIL_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_EMAIL_BABES;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_NAME_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_PHONE_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_PHONE_BABES;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.EditBeneficiaryCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.EditBeneficiaryCommand.EditBeneficiaryDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.beneficiary.EditBeneficiaryDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class EditBeneficiaryCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBeneficiaryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private EditBeneficiaryCommandParser parser \u003d new EditBeneficiaryCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_ANIMAL_SHELTER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, \"1\", EditBeneficiaryCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_ANIMAL_SHELTER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_ANIMAL_SHELTER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_ANIMAL_SHELTER, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \"1\" + PHONE_DESC_BABES + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "                + VALID_ADDRESS_ANIMAL_SHELTER + VALID_PHONE_ANIMAL_SHELTER,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BABES"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            + EMAIL_DESC_ANIMAL_SHELTER + ADDRESS_DESC_ANIMAL_SHELTER + NAME_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor descriptor \u003d new EditBeneficiaryDescriptorBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withName(VALID_NAME_ANIMAL_SHELTER)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withPhone(VALID_PHONE_BABES)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withEmail(VALID_EMAIL_ANIMAL_SHELTER)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withAddress(VALID_ADDRESS_ANIMAL_SHELTER).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand expectedCommand \u003d new EditBeneficiaryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BABES + EMAIL_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor descriptor \u003d new EditBeneficiaryDescriptorBuilder().withPhone(VALID_PHONE_BABES)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withEmail(VALID_EMAIL_ANIMAL_SHELTER).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand expectedCommand \u003d new EditBeneficiaryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor descriptor \u003d new EditBeneficiaryDescriptorBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withName(VALID_NAME_ANIMAL_SHELTER).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand expectedCommand \u003d new EditBeneficiaryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor \u003d new EditBeneficiaryDescriptorBuilder().withPhone(VALID_PHONE_ANIMAL_SHELTER).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedCommand \u003d new EditBeneficiaryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor \u003d new EditBeneficiaryDescriptorBuilder().withEmail(VALID_EMAIL_ANIMAL_SHELTER).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedCommand \u003d new EditBeneficiaryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor \u003d new EditBeneficiaryDescriptorBuilder().withAddress(VALID_ADDRESS_ANIMAL_SHELTER).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedCommand \u003d new EditBeneficiaryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_ANIMAL_SHELTER + ADDRESS_DESC_ANIMAL_SHELTER"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            + EMAIL_DESC_ANIMAL_SHELTER + PHONE_DESC_ANIMAL_SHELTER + ADDRESS_DESC_ANIMAL_SHELTER"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            + EMAIL_DESC_ANIMAL_SHELTER + PHONE_DESC_BABES + ADDRESS_DESC_BABES + EMAIL_DESC_BABES;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor descriptor \u003d new EditBeneficiaryDescriptorBuilder().withPhone(VALID_PHONE_BABES)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withEmail(VALID_EMAIL_BABES).withAddress(VALID_ADDRESS_BABES).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand expectedCommand \u003d new EditBeneficiaryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BABES;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryDescriptor descriptor \u003d new EditBeneficiaryDescriptorBuilder()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withPhone(VALID_PHONE_BABES).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        EditBeneficiaryCommand expectedCommand \u003d new EditBeneficiaryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BABES + INVALID_PHONE_DESC + ADDRESS_DESC_BABES"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            + PHONE_DESC_BABES;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor \u003d new EditBeneficiaryDescriptorBuilder().withPhone(VALID_PHONE_BABES).withEmail(VALID_EMAIL_BABES)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withAddress(VALID_ADDRESS_BABES).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedCommand \u003d new EditBeneficiaryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 187
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/beneficiary/FindBeneficiaryCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.logic.parser.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.FindBeneficiaryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class FindBeneficiaryCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private FindBeneficiaryCommandParser parser \u003d new FindBeneficiaryCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindBeneficiaryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void parse_validArgs_returnsFindBeneficiaryCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        FindBeneficiaryCommand expectedFindBeneficiaryCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new FindBeneficiaryCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Animal\", \"Babes\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser, \"Animal Babes\", expectedFindBeneficiaryCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertParseSuccess(parser, \" \\n Animal \\n \\t Babes \\t\", expectedFindBeneficiaryCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "articstranger"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        private final ObservableList\u003cBeneficiary\u003e beneficiaries \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        private final ObservableList\u003cProject\u003e projects \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        private final ObservableList\u003cVolunteer\u003e volunteers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return projects;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public ObservableList\u003cBeneficiary\u003e getBeneficiaryList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return beneficiaries;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        public ObservableList\u003cVolunteer\u003e getVolunteerList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            return volunteers;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 3,
      "articstranger": 3,
      "-": 134,
      "ndhuu": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(BOB);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(BOB);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(BOB);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person updatedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setPerson(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 184,
      "ndhuu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withPerson(BOB).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withPerson(CARL).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 291,
      "ndhuu": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/beneficiary/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/beneficiary/BeneficiaryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_ADDRESS_BABES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_EMAIL_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_EMAIL_BABES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_NAME_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_NAME_BABES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_PHONE_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_PHONE_BABES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.TypicalBeneficiaries.ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.TypicalBeneficiaries.BABES;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.beneficiary.BeneficiaryBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class BeneficiaryTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiary \u003d new BeneficiaryBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        beneficiary.getAttachedProjectLists().remove(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void isSameBeneficiary() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(ANIMAL_SHELTER.isSameBeneficiary(ANIMAL_SHELTER));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(ANIMAL_SHELTER.isSameBeneficiary(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same name, different attribute -\u003e return true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(ANIMAL_SHELTER.isSameBeneficiary("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            new BeneficiaryBuilder(BABES).withName(VALID_NAME_ANIMAL_SHELTER).build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different name and different phone or email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary differentPhone \u003d new BeneficiaryBuilder(BABES).withPhone(VALID_PHONE_BABES)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withEmail(VALID_EMAIL_ANIMAL_SHELTER).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(ANIMAL_SHELTER.isSameBeneficiary(differentPhone));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary differentEmail \u003d new BeneficiaryBuilder(BABES).withPhone(VALID_PHONE_ANIMAL_SHELTER)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withEmail(VALID_EMAIL_BABES).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(ANIMAL_SHELTER.isSameBeneficiary(differentEmail));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        //different name, (same phone and email) different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary editedAnimalShelter \u003d new BeneficiaryBuilder(ANIMAL_SHELTER)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withName(VALID_NAME_BABES)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withAddress(VALID_ADDRESS_BABES).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(ANIMAL_SHELTER.isSameBeneficiary(editedAnimalShelter));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        editedAnimalShelter \u003d new BeneficiaryBuilder(ANIMAL_SHELTER).withPhone(VALID_PHONE_BABES)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withAddress(VALID_ADDRESS_BABES).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(ANIMAL_SHELTER.isSameBeneficiary(editedAnimalShelter));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        editedAnimalShelter \u003d new BeneficiaryBuilder(ANIMAL_SHELTER).withAddress(VALID_ADDRESS_BABES).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(ANIMAL_SHELTER.isSameBeneficiary(editedAnimalShelter));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary animalShelterCopy \u003d new BeneficiaryBuilder(ANIMAL_SHELTER).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(ANIMAL_SHELTER.equals(animalShelterCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(ANIMAL_SHELTER.equals(ANIMAL_SHELTER));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(ANIMAL_SHELTER.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(ANIMAL_SHELTER.equals(5));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different beneficiary -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(ANIMAL_SHELTER.equals(BABES));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same name -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary editedAnimalShelter \u003d new BeneficiaryBuilder(BABES).withName(VALID_NAME_ANIMAL_SHELTER).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(ANIMAL_SHELTER.equals(editedAnimalShelter));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same phone and email -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        editedAnimalShelter \u003d new BeneficiaryBuilder(BABES)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withPhone(VALID_PHONE_ANIMAL_SHELTER).withEmail(VALID_EMAIL_ANIMAL_SHELTER).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(ANIMAL_SHELTER.equals(editedAnimalShelter));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/beneficiary/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/beneficiary/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/beneficiary/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/beneficiary/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/beneficiary/UniqueBeneficiaryListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.model.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_ADDRESS_BABES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.TypicalBeneficiaries.ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.testutil.beneficiary.TypicalBeneficiaries.BABES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.exceptions.BeneficiaryNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.exceptions.DuplicateBeneficiaryException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.testutil.beneficiary.BeneficiaryBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class UniqueBeneficiaryListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final UniqueBeneficiaryList uniqueBeneficiaryList \u003d new UniqueBeneficiaryList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void contains_nullBeneficiary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void contains_beneficiaryNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertFalse(uniqueBeneficiaryList.contains(ANIMAL_SHELTER));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void contains_beneficiaryInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.add(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(uniqueBeneficiaryList.contains(ANIMAL_SHELTER));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void contains_beneficiaryWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.add(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary editedAnimalShelter \u003d new BeneficiaryBuilder(ANIMAL_SHELTER)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .withAddress(VALID_ADDRESS_BABES).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertTrue(uniqueBeneficiaryList.contains(editedAnimalShelter));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void add_nullBeneficiary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void add_duplicateBeneficiary_throwsDuplicateBeneficiaryException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.add(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(DuplicateBeneficiaryException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.add(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiary_nullTargetBeneficiary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.setBeneficiary(null, ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiary_nullEditedBeneficiary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.setBeneficiary(ANIMAL_SHELTER, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiary_targetBeneficiaryNotInList_throwsBeneficiaryNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(BeneficiaryNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.setBeneficiary(ANIMAL_SHELTER, ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiary_editedBeneficiaryIsSameBeneficiary_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.add(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.setBeneficiary(ANIMAL_SHELTER, ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        UniqueBeneficiaryList expectedUniqueBeneficiaryList \u003d new UniqueBeneficiaryList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedUniqueBeneficiaryList.add(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedUniqueBeneficiaryList, uniqueBeneficiaryList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiary_editedBeneficiaryHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.add(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary editedAnimalShelter \u003d new BeneficiaryBuilder(ANIMAL_SHELTER).withAddress(VALID_ADDRESS_BABES)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.setBeneficiary(ANIMAL_SHELTER, editedAnimalShelter);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        UniqueBeneficiaryList expectedUniqueBeneficiaryList \u003d new UniqueBeneficiaryList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedUniqueBeneficiaryList.add(editedAnimalShelter);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedUniqueBeneficiaryList, uniqueBeneficiaryList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiary_editedBeneficiaryHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.add(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.setBeneficiary(ANIMAL_SHELTER, BABES);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        UniqueBeneficiaryList expectedUniqueBeneficiaryList \u003d new UniqueBeneficiaryList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedUniqueBeneficiaryList.add(BABES);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedUniqueBeneficiaryList, uniqueBeneficiaryList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiary_editedBeneficiaryHasNonUniqueIdentity_throwsDuplicateBeneficiaryException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.add(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.add(BABES);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(DuplicateBeneficiaryException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.setBeneficiary(ANIMAL_SHELTER, BABES);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void remove_nullBeneficiary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void remove_beneficiaryDoesNotExist_throwsBeneficiaryNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(BeneficiaryNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.remove(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void remove_existingBeneficiary_removesBeneficiary() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.add(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.remove(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        UniqueBeneficiaryList expectedUniqueBeneficiaryList \u003d new UniqueBeneficiaryList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedUniqueBeneficiaryList, uniqueBeneficiaryList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiaries_nullUniqueBeneficiaryList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.setBeneficiaries((UniqueBeneficiaryList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiaries_uniqueBeneficiaryList_replacesOwnListWithProvidedUniqueBeneficiaryList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.add(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        UniqueBeneficiaryList expectedUniqueBeneficiaryList \u003d new UniqueBeneficiaryList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedUniqueBeneficiaryList.add(BABES);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.setBeneficiaries(expectedUniqueBeneficiaryList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedUniqueBeneficiaryList, uniqueBeneficiaryList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiaries_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.setBeneficiaries((List\u003cBeneficiary\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiaries_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.add(ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cBeneficiary\u003e beneficiaryList \u003d Collections.singletonList(BABES);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.setBeneficiaries(beneficiaryList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        UniqueBeneficiaryList expectedUniqueBeneficiaryList \u003d new UniqueBeneficiaryList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        expectedUniqueBeneficiaryList.add(BABES);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        assertEquals(expectedUniqueBeneficiaryList, uniqueBeneficiaryList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void setBeneficiaries_listWithDuplicateBeneficiaries_throwsDuplicateBeneficiaryException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cBeneficiary\u003e listWithDuplicateBeneficiaries \u003d Arrays.asList(ANIMAL_SHELTER, ANIMAL_SHELTER);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(DuplicateBeneficiaryException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.setBeneficiaries(listWithDuplicateBeneficiaries);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        uniqueBeneficiaryList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"notJsonFormatAddressBook.json\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 119,
      "ndhuu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "ndhuu": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     * Adds a new {@code Project} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    public AddressBookBuilder withProject(Project project) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        addressBook.addProject(project);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnzzzzz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Adds a new {@code Beneficiary} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public AddressBookBuilder withBeneficiary(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        addressBook.addBeneficiary(beneficiary);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnzzzzz": 9,
      "-": 34,
      "ndhuu": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditVolunteerDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.EditVolunteerCommand.EditVolunteerDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * A utility class to help with building EditVolunteerDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class EditVolunteerDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private EditVolunteerDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public EditVolunteerDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor \u003d new EditVolunteerDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public EditVolunteerDescriptorBuilder(EditVolunteerDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.descriptor \u003d new EditVolunteerDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns an {@code EditVolunteerDescriptor} with fields containing {@code volunteer}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public EditVolunteerDescriptorBuilder(Volunteer volunteer) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor \u003d new EditVolunteerDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.setName(volunteer.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.setPhone(volunteer.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.setEmail(volunteer.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.setAddress(volunteer.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.setTags(volunteer.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Sets the {@code Name} of the {@code EditVolunteerDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public EditVolunteerDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditVolunteerDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public EditVolunteerDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Sets the {@code Email} of the {@code EditVolunteerDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public EditVolunteerDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Sets the {@code Address} of the {@code EditVolunteerDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public EditVolunteerDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditVolunteerDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public EditVolunteerDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public EditVolunteerDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 85,
      "ndhuu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "ndhuu": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "ndhuu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalVolunteers.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * A utility class containing a list of {@code Volunteer} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class TypicalVolunteers {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Volunteer ALICE \u003d new VolunteerBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        .withPhone(\"94351253\").withAge(\"19\").withRace(\"Chinese\").withMedicalCondition(\"nil\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Volunteer BENSON \u003d new VolunteerBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        .withAddress(\"311, Clementi Ave 2, #02-25\").withAge(\"17\").withRace(\"Chinese\").withMedicalCondition(\"injured\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Volunteer CARL \u003d new VolunteerBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        .withAge(\"19\").withRace(\"French\").withMedicalCondition(\"nil\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Volunteer DANIEL \u003d new VolunteerBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        .withAge(\"19\").withRace(\"Chinese\").withMedicalCondition(\"nil\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Volunteer ELLE \u003d new VolunteerBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        .withAge(\"29\").withRace(\"Indian\").withMedicalCondition(\"vegetable\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Volunteer FIONA \u003d new VolunteerBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        .withAge(\"13\").withRace(\"English\").withMedicalCondition(\"nil\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Volunteer GEORGE \u003d new VolunteerBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        .withAge(\"15\").withRace(\"Chinese\").withMedicalCondition(\"dead\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Volunteer HOON \u003d new VolunteerBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Volunteer IDA \u003d new VolunteerBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    // Manually added - Volunteer\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Volunteer AMY \u003d new VolunteerBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final Volunteer BOB \u003d new VolunteerBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private TypicalVolunteers() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical volunteers."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        for (Volunteer volunteer : getTypicalVolunteers()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            ab.addVolunteer(volunteer);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static List\u003cVolunteer\u003e getTypicalVolunteers() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    public static ArrayList\u003cInteger\u003e getTypicalVolunteersPoints() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        ArrayList\u003cInteger\u003e points \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        points.add(6);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        points.add(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        points.add(5);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        points.add(6);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        points.add(2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        points.add(3);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        points.add(1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "articstranger"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "articstranger"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "articstranger"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 68,
      "articstranger": 27,
      "ndhuu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/VolunteerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.util.VolunteerSampleDataUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Age;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.DietaryPreference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.EmergencyContact;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Gender;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.MedicalCondition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Race;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Religion;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * A utility class to help with building Volunteer objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class VolunteerBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String DEFAULT_AGE \u003d \"19\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"F\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String DEFAULT_RACE \u003d \"American\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String DEFAULT_RELIGION \u003d \"Christian\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String DEFAULT_EMERGENCY_CONTACT \u003d \"Mary 98125555\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String DEFAULT_DIETARY_PREFERENCE \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static final String DEFAULT_MEDICAL_CONDITION \u003d \"NIL\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Age age;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Race race;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Religion religion;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private EmergencyContact emergencycontact;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private DietaryPreference dietarypreference;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private MedicalCondition medicalcondition;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        age \u003d new Age(DEFAULT_AGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        race \u003d new Race(DEFAULT_RACE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        religion \u003d new Religion(DEFAULT_RELIGION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        emergencycontact \u003d new EmergencyContact(DEFAULT_EMERGENCY_CONTACT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        dietarypreference \u003d new DietaryPreference(DEFAULT_DIETARY_PREFERENCE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        medicalcondition \u003d new MedicalCondition(DEFAULT_MEDICAL_CONDITION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Initializes the VolunteerBuilder with the data of {@code volunteerToCopy}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder(Volunteer volunteerToCopy) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        name \u003d volunteerToCopy.getName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        age \u003d volunteerToCopy.getAge();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        gender \u003d volunteerToCopy.getGender();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        race \u003d volunteerToCopy.getRace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        religion \u003d volunteerToCopy.getReligion();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        phone \u003d volunteerToCopy.getPhone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        email \u003d volunteerToCopy.getEmail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        address \u003d volunteerToCopy.getAddress();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        emergencycontact \u003d volunteerToCopy.getEmergencyContact();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        dietarypreference \u003d volunteerToCopy.getDietaryPreference();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        medicalcondition \u003d volunteerToCopy.getMedicalCondition();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(volunteerToCopy.getTags());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Sets the {@code Name} of the {@code Volunteer} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder withName(String name) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Volunteer} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.tags \u003d VolunteerSampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * build with age."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param age"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder withAge(String age) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.age \u003d new Age(age);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * guild with gender."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param gender"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * build with race."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param race"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder withRace(String race) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.race \u003d new Race(race);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * build with religion"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param religion"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder withReligion(String religion) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.religion \u003d new Religion(religion);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * build."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param medicalcondition"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder withMedicalCondition(String medicalcondition) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.medicalcondition \u003d new MedicalCondition(medicalcondition);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * build."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param dietarypreference"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder withDietaryPreference(String dietarypreference) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.dietarypreference \u003d new DietaryPreference(dietarypreference);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * build."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param emergencycontact"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder withEmergencyContact(String emergencycontact) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.emergencycontact \u003d new EmergencyContact(emergencycontact);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Sets the {@code Address} of the {@code Volunteer} that we are building."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Sets the {@code Phone} of the {@code Volunteer} that we are building."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Sets the {@code Email} of the {@code Volunteer} that we are building."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public VolunteerBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * build"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public Volunteer build() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return new Volunteer(name, age, gender, race, religion, phone, address, email,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            emergencycontact, dietarypreference, medicalcondition, tags);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 154,
      "ndhuu": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/VolunteerUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_AGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_DIETARY_PREFERENCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_EMERGENCY_CONTACT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_RACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.logic.parser.CliSyntaxVolunteer.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.AddVolunteerCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.logic.commands.EditVolunteerCommand.EditVolunteerDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " * A utility class for Volunteer."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "public class VolunteerUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns an add command string for adding the {@code volunteer}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static String getAddVolunteerCommand(Volunteer volunteer) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return AddVolunteerCommand.COMMAND_WORD + \" \" + getVolunteerDetails(volunteer);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns the part of command string for the given {@code volunteer}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static String getVolunteerDetails(Volunteer volunteer) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        sb.append(PREFIX_NAME + volunteer.getName().fullName + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        sb.append(PREFIX_AGE + volunteer.getAge().ageOutput + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        sb.append(PREFIX_RACE + volunteer.getRace().raceOutput + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        sb.append(PREFIX_PHONE + volunteer.getPhone().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        sb.append(PREFIX_ADDRESS + volunteer.getAddress().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        sb.append(PREFIX_EMAIL + volunteer.getEmail().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        sb.append(PREFIX_EMERGENCY_CONTACT + volunteer.getEmergencyContact().value + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        sb.append(PREFIX_DIETARY_PREFERENCE + volunteer.getDietaryPreference().restriction + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        sb.append(PREFIX_MEDICAL_CONDITION + volunteer.getMedicalCondition().status + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        volunteer.getTags().stream().forEach("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "swalahlah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     * Returns the part of command string for the given {@code EditVolunteerDescriptor}\u0027s details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    public static String getEditVolunteerDescriptorDetails(EditVolunteerDescriptor descriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.getAge().ifPresent(age -\u003e sb.append(PREFIX_AGE).append(age.ageOutput).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.getRace().ifPresent(race -\u003e sb.append(PREFIX_RACE).append(race.raceOutput).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.getEmergencyContact().ifPresent(emergency_contact -\u003e sb.append(PREFIX_EMERGENCY_CONTACT)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(emergency_contact.value).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.getDietaryPreference().ifPresent(dietary_preference -\u003e sb.append(PREFIX_DIETARY_PREFERENCE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(dietary_preference.restriction).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.getMedicalCondition().ifPresent(medicalcondition -\u003e sb.append(PREFIX_MEDICAL_CONDITION)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            .append(medicalcondition.status).append(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 70,
      "ndhuu": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/beneficiary/BeneficiariesSyncProjects.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.testutil.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.EditBeneficiaryCommand.EditBeneficiaryDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.Complete;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * A utility class containing a list of {@code Beneficiary and Project} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class BeneficiariesSyncProjects {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final ProjectTitle ATTACH_TO_A_TITLE \u003d new ProjectTitle(\"Attach to A\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final ProjectTitle ATTACH_TO_B1_TITLE \u003d new ProjectTitle(\"Attach to B no 1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final ProjectTitle ATTACH_TO_B2_TITLE \u003d new ProjectTitle(\"Attach to B no 2\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Set\u003cProjectTitle\u003e PROJECT_LIST_OF_A \u003d new HashSet\u003c\u003e(Arrays.asList(ATTACH_TO_A_TITLE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Set\u003cProjectTitle\u003e PROJECT_LIST_OF_B \u003d new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Arrays.asList(ATTACH_TO_B1_TITLE, ATTACH_TO_B2_TITLE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String BENEFICIARY_A_NAME \u003d \"Beneficiary A\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String A_PHONE \u003d \"8482131\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String A_EMAIL \u003d \"befA@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String A_ADDRESS \u003d \"chicago ave\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Beneficiary BENEFICIARY_A \u003d new BeneficiaryBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withName(BENEFICIARY_A_NAME).withPhone(A_PHONE).withEmail(A_EMAIL)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withAddress(A_ADDRESS).buildWithProjectList(PROJECT_LIST_OF_A);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Beneficiary BENEFICIARY_B \u003d new BeneficiaryBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withName(\"Beneficiary B\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withEmail(\"befB@example.com\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withAddress(\"chicago ave\").buildWithProjectList(PROJECT_LIST_OF_B);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String BENEFICIARY_A_EDITED_NAME \u003d \"Beneficiary A edited\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final EditBeneficiaryDescriptor BENEFICIARY_A_EDITED \u003d new EditBeneficiaryDescriptorBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withName(BENEFICIARY_A_EDITED_NAME).withPhone(A_PHONE).withEmail(A_EMAIL)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withAddress(A_ADDRESS).withProjectList(PROJECT_LIST_OF_A).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Project ATTACHED_PROJECT_A \u003d buildProjectStub(ATTACH_TO_A_TITLE, BENEFICIARY_A);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Project ATTACHED_PROJECT_B1 \u003d buildProjectStub(ATTACH_TO_B1_TITLE, BENEFICIARY_B);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Project ATTACHED_PROJECT_B2 \u003d buildProjectStub(ATTACH_TO_B2_TITLE, BENEFICIARY_B);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * A method to build a project stub"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param projectTitle"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param beneficiary"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return a project stub model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static Project buildProjectStub(ProjectTitle projectTitle, Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String dateString \u003d LocalDate.now().plus(2, ChronoUnit.DAYS).toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String[] arrOfStr \u003d dateString.split(\"-\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        String formattedDateString \u003d arrOfStr[2] + \"/\" + arrOfStr[1] + \"/\" + arrOfStr[0];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        ProjectDate nextDay \u003d new ProjectDate(formattedDateString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new Project(projectTitle, nextDay, new Complete(false), beneficiary.getName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns an {@code AddressBook} with all the beneficiaries and projects"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * to test interaction if a beneficiary is modified."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static AddressBook getAddressBookForBeneficiarySyncTest("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        List\u003cBeneficiary\u003e beneficiaries, List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        for (Beneficiary beneficiary : beneficiaries) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            ab.addBeneficiary(beneficiary);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        for (Project project : projects) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            ab.addProject(project);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * original list of beneficiaries."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return List of Beneficiaries."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static List\u003cBeneficiary\u003e getAandBBeneficiaries() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BENEFICIARY_B, BENEFICIARY_A));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * original list of projects."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return List of Projects."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static List\u003cProject\u003e getProjectA2B() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ATTACHED_PROJECT_A, ATTACHED_PROJECT_B1, ATTACHED_PROJECT_B2));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * list of beneficiaries after hard delete B."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return List of Beneficiaries."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static List\u003cBeneficiary\u003e getBeneficiariesAfterDeleteB() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BENEFICIARY_A));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * list of projects after hard delete B."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return List of Projects."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static List\u003cProject\u003e getProjectAfterDeleteB1AndB2() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ATTACHED_PROJECT_A));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/beneficiary/BeneficiaryBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.testutil.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * A utility class to help with building Beneficiary objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class BeneficiaryBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Orange Home\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"orangeHomeEmail@orangehome.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Set\u003cProjectTitle\u003e attachedProjectList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public BeneficiaryBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        attachedProjectList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Initializes the BeneficiaryBuilder with the data of {@code beneficiaryToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public BeneficiaryBuilder(Beneficiary beneficiaryToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        name \u003d beneficiaryToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        phone \u003d beneficiaryToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        email \u003d beneficiaryToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        address \u003d beneficiaryToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        attachedProjectList \u003d new HashSet\u003c\u003e(beneficiaryToCopy.getAttachedProjectLists());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Sets the {@code Name} of the {@code Beneficiary} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public BeneficiaryBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Sets the {@code Address} of the {@code Beneficiary} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public BeneficiaryBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Sets the {@code Phone} of the {@code Beneficiary} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public BeneficiaryBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Sets the {@code Email} of the {@code Beneficiary} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public BeneficiaryBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Build method to build new beneficiary"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return a beneficiary object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Beneficiary build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary b \u003d new Beneficiary(name, phone, email, address);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        b.setProjectLists(this.attachedProjectList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return b;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * build method to build new beneficiary with an attached project list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @param attachedProjectList"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * @return a beneficiary"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public Beneficiary buildWithProjectList(Set\u003cProjectTitle\u003e attachedProjectList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Beneficiary beneficiary \u003d build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        beneficiary.setProjectLists(attachedProjectList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return beneficiary;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/beneficiary/BeneficiaryUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.testutil.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.AddBeneficiaryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.EditBeneficiaryCommand.EditBeneficiaryDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * A utility class for beneficiary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class BeneficiaryUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns an add command string for adding the {@code beneficiary}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static String getAddCommand(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return AddBeneficiaryCommand.COMMAND_WORD + \" \" + getbeneficiaryDetails(beneficiary);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns the part of command string for the given {@code beneficiary}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static String getbeneficiaryDetails(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        sb.append(PREFIX_NAME + beneficiary.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        sb.append(PREFIX_PHONE + beneficiary.getPhone().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        sb.append(PREFIX_EMAIL + beneficiary.getEmail().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        sb.append(PREFIX_ADDRESS + beneficiary.getAddress().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns the part of command string for the given {@code EditbeneficiaryDescriptor}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static String getEditbeneficiaryDescriptorDetails(EditBeneficiaryDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/beneficiary/EditBeneficiaryDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.testutil.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.logic.commands.beneficiary.EditBeneficiaryCommand.EditBeneficiaryDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.project.ProjectTitle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * A utility class to help with building EditBeneficiaryDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class EditBeneficiaryDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private EditBeneficiaryDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public EditBeneficiaryDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor \u003d new EditBeneficiaryDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public EditBeneficiaryDescriptorBuilder(EditBeneficiaryDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        this.descriptor \u003d new EditBeneficiaryDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns an {@code EditBeneficiaryDescriptor} with fields containing {@code Beneficiary}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public EditBeneficiaryDescriptorBuilder(Beneficiary beneficiary) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor \u003d new EditBeneficiaryDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.setName(beneficiary.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.setPhone(beneficiary.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.setEmail(beneficiary.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.setAddress(beneficiary.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.setAttachedProjectList(beneficiary.getAttachedProjectLists());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Sets the {@code Name} of the {@code EditBeneficiaryDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public EditBeneficiaryDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditBeneficiaryDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public EditBeneficiaryDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Sets the {@code Email} of the {@code EditBeneficiaryDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public EditBeneficiaryDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Sets the {@code Address} of the {@code EditBeneficiaryDescriptor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public EditBeneficiaryDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Sets the {@code attachedProjectList} of the {@code EditBeneficiaryDescriptor} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public EditBeneficiaryDescriptorBuilder withProjectList(Set\u003cProjectTitle\u003e projectList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        descriptor.setAttachedProjectList(projectList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public EditBeneficiaryDescriptor build() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/beneficiary/TypicalBeneficiaries.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "//@@author ndhuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "package seedu.address.testutil.beneficiary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_ADDRESS_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_ADDRESS_BABES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_EMAIL_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_EMAIL_BABES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_NAME_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_NAME_BABES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_PHONE_ANIMAL_SHELTER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import static seedu.address.logic.commands.beneficiary.BeneficiaryCommandTestUtil.VALID_PHONE_BABES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "import seedu.address.model.beneficiary.Beneficiary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " * A utility class containing a list of {@code Beneficiary} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "public class TypicalBeneficiaries {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Beneficiary ACTION_FOR_AIDS \u003d new BeneficiaryBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withName(\"Action for AIDS\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withEmail(\"AforA@example.com\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withPhone(\"94351253\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Beneficiary BEYOND_SOCIAL_SERVICES \u003d new BeneficiaryBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withName(\"Beyond Social Services\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withEmail(\"bys@example.com\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withPhone(\"98765432\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Beneficiary FOOD_FROM_HEART \u003d new BeneficiaryBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withName(\"Food from the heart\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withEmail(\"foodHeart@example.com\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Beneficiary AWWA \u003d new BeneficiaryBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withName(\"Asian Women Welfare Association\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withEmail(\"awwa@example.com\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withAddress(\"10th street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Beneficiary MAKE_WISH \u003d new BeneficiaryBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withName(\"Make A Wish Foundation\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withEmail(\"wish@example.com\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Beneficiary AIDHA \u003d new BeneficiaryBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withName(\"Aidha\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withEmail(\"aidHa@example.com\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Beneficiary MIGRANT_WORKERS \u003d new BeneficiaryBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withName(\"Migrant Workers\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withEmail(\"migrantWorkers@example.com\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    // Manually added - Beneficiary\u0027s details found in {@code BeneficiaryBeneficiaryCommandTestUtil}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Beneficiary ANIMAL_SHELTER \u003d new BeneficiaryBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withName(VALID_NAME_ANIMAL_SHELTER).withPhone(VALID_PHONE_ANIMAL_SHELTER)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withEmail(VALID_EMAIL_ANIMAL_SHELTER).withAddress(VALID_ADDRESS_ANIMAL_SHELTER).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final Beneficiary BABES \u003d new BeneficiaryBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withName(VALID_NAME_BABES).withPhone(VALID_PHONE_BABES)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        .withEmail(VALID_EMAIL_BABES).withAddress(VALID_ADDRESS_BABES).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private TypicalBeneficiaries() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical beneficiaries."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        for (Beneficiary beneficiary : getTypicalBeneficiaries()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            ab.addBeneficiary(beneficiary);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static List\u003cBeneficiary\u003e getTypicalBeneficiaries() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ACTION_FOR_AIDS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            BEYOND_SOCIAL_SERVICES, FOOD_FROM_HEART, AWWA, MAKE_WISH));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ndhuu": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import static seedu.address.testutil.TypicalVolunteers.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "import seedu.address.model.volunteer.Volunteer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "    private SimpleObjectProperty\u003cVolunteer\u003e selectedVolunteer \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedVolunteer));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        guiRobot.interact(() -\u003e selectedVolunteer.set(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        URL expectedVolunteerUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "swalahlah"
        },
        "content": "        assertEquals(expectedVolunteerUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "swalahlah": 6,
      "-": 34,
      "ndhuu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 156,
      "ndhuu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e addressBook.addPerson(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "ndhuu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "ndhuu": 2
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 286,
      "ndhuu": 4
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ndhuu"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "ndhuu": 2
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 90,
      "ndhuu": 4
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ndhuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyAddressBook\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "ndhuu": 12
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"seedu.address.ui.TestFxmlObject\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ndhuu"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "ndhuu": 3
    }
  }
]
